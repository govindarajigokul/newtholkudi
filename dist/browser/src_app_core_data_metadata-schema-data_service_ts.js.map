{"version":3,"file":"src_app_core_data_metadata-schema-data_service_ts.js","mappings":"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","sources":["./src/app/core/data/metadata-schema-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { hasValue } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { MetadataSchema } from '../metadata/metadata-schema.model';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { NoContent } from '../shared/NoContent.model';\nimport {\n  CreateData,\n  CreateDataImpl,\n} from './base/create-data';\nimport {\n  DeleteData,\n  DeleteDataImpl,\n} from './base/delete-data';\nimport {\n  FindAllData,\n  FindAllDataImpl,\n} from './base/find-all-data';\nimport { IdentifiableDataService } from './base/identifiable-data.service';\nimport {\n  PutData,\n  PutDataImpl,\n} from './base/put-data';\nimport { FindListOptions } from './find-list-options.model';\nimport { PaginatedList } from './paginated-list.model';\nimport { RemoteData } from './remote-data';\nimport { RequestService } from './request.service';\n\n/**\n * A service responsible for fetching/sending data from/to the REST API on the metadataschemas endpoint\n */\n@Injectable({ providedIn: 'root' })\nexport class MetadataSchemaDataService extends IdentifiableDataService<MetadataSchema> implements FindAllData<MetadataSchema>, DeleteData<MetadataSchema> {\n  private createData: CreateData<MetadataSchema>;\n  private findAllData: FindAllData<MetadataSchema>;\n  private putData: PutData<MetadataSchema>;\n  private deleteData: DeleteData<MetadataSchema>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n  ) {\n    super('metadataschemas', requestService, rdbService, objectCache, halService);\n\n    this.createData = new CreateDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive);\n    this.putData = new PutDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n    this.findAllData = new FindAllDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  /**\n   * Create or Update a MetadataSchema\n   *  If the MetadataSchema contains an id, it is assumed the schema already exists and is updated instead\n   *  Since creating or updating is nearly identical, the only real difference is the request (and slight difference in endpoint):\n   *  - On creation, a CreateRequest is used\n   *  - On update, a PutRequest is used\n   * @param schema    The MetadataSchema to create or update\n   */\n  createOrUpdateMetadataSchema(schema: MetadataSchema): Observable<RemoteData<MetadataSchema>> {\n    const isUpdate = hasValue(schema.id);\n\n    if (isUpdate) {\n      return this.putData.put(schema);\n    } else {\n      return this.createData.create(schema);\n    }\n  }\n\n  /**\n   * Clear all metadata schema requests\n   * Used for refreshing lists after adding/updating/removing a metadata schema in the registry\n   */\n  clearRequests(): Observable<string> {\n    return this.getBrowseEndpoint().pipe(\n      tap((href: string) => this.requestService.removeByHrefSubstring(href)),\n    );\n  }\n\n  /**\n   * Returns {@link RemoteData} of all object with a list of {@link FollowLinkConfig}, to indicate which embedded\n   * info should be added to the objects\n   *\n   * @param options                     Find list options object\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   * @return {Observable<RemoteData<PaginatedList<T>>>}\n   *    Return an observable that emits object list\n   */\n  public findAll(options?: FindListOptions, useCachedVersionIfAvailable?: boolean, reRequestOnStale?: boolean, ...linksToFollow: FollowLinkConfig<MetadataSchema>[]): Observable<RemoteData<PaginatedList<MetadataSchema>>> {\n    return this.findAllData.findAll(options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Delete an existing object on the server\n   * @param   objectId The id of the object to be removed\n   * @param   copyVirtualMetadata (optional parameter) the identifiers of the relationship types for which the virtual\n   *                            metadata should be saved as real metadata\n   * @return  A RemoteData observable with an empty payload, but still representing the state of the request: statusCode,\n   *          errorMessage, timeCompleted, etc\n   */\n  public delete(objectId: string, copyVirtualMetadata?: string[]): Observable<RemoteData<NoContent>> {\n    return this.deleteData.delete(objectId, copyVirtualMetadata);\n  }\n\n  /**\n   * Delete an existing object on the server\n   * @param   href The self link of the object to be removed\n   * @param   copyVirtualMetadata (optional parameter) the identifiers of the relationship types for which the virtual\n   *                            metadata should be saved as real metadata\n   * @return  A RemoteData observable with an empty payload, but still representing the state of the request: statusCode,\n   *          errorMessage, timeCompleted, etc\n   *          Only emits once all request related to the DSO has been invalidated.\n   */\n  public deleteByHref(href: string, copyVirtualMetadata?: string[]): Observable<RemoteData<NoContent>> {\n    return this.deleteData.deleteByHref(href, copyVirtualMetadata);\n  }\n}\n"],"names":["tap","hasValue","NotificationsService","RemoteDataBuildService","ObjectCacheService","HALEndpointService","CreateDataImpl","DeleteDataImpl","FindAllDataImpl","IdentifiableDataService","PutDataImpl","RequestService","MetadataSchemaDataService","constructor","requestService","rdbService","objectCache","halService","notificationsService","createData","linkPath","responseMsToLive","putData","deleteData","constructIdEndpoint","findAllData","createOrUpdateMetadataSchema","schema","isUpdate","id","put","create","clearRequests","getBrowseEndpoint","pipe","href","removeByHrefSubstring","findAll","options","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","delete","objectId","copyVirtualMetadata","deleteByHref","i0","ɵɵinject","i1","i2","i3","i4","i5","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}