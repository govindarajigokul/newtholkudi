{"version":3,"file":"src_app_core_submission_correctiontype-data_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAIc;AAE0E;AACH;AAClB;AACA;AACc;AACvB;AACQ;AAGT;AACW;AAIvC;;;;;;;AAG7B;;;AAIM,MAAOY,yBAA0B,SAAQP,yFAAuC;EAMpFQ,YACYC,cAA8B,EAC9BC,UAAkC,EAClCC,WAA+B,EAC/BC,UAA8B,EAC9BC,oBAA0C;IAEpD,KAAK,CAAC,iBAAiB,EAAEJ,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,CAAC;IANnE,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,oBAAoB,GAApBA,oBAAoB;IAVtB,KAAAC,QAAQ,GAAG,iBAAiB;IAC5B,KAAAC,aAAa,GAAG,aAAa;IAC7B,KAAAC,gBAAgB,GAAG,YAAY;IAYvC,IAAI,CAACC,UAAU,GAAG,IAAIhB,kEAAc,CAAC,IAAI,CAACa,QAAQ,EAAEL,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAE,IAAI,CAACM,gBAAgB,CAAC;EACjI;EAEA;;;;;;;EAOAC,qBAAqBA,CAACC,EAAU,EAAEC,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI;IAC3F,OAAO,IAAI,CAACC,QAAQ,CAACH,EAAE,EAAEC,2BAA2B,EAAEC,gBAAgB,CAAC;EACzE;EAEA;;;;;;EAMAE,UAAUA,CAACC,QAAgB,EAAEJ,2BAA2B;IACtD,MAAMK,OAAO,GAAG,IAAIxB,0EAAe,EAAE;IACrCwB,OAAO,CAACC,YAAY,GAAG,CAAC,IAAI7B,2EAAY,CAAC,MAAM,EAAE2B,QAAQ,CAAC,CAAC;IAC3D,OAAO,IAAI,CAACR,UAAU,CAACW,QAAQ,CAAC,IAAI,CAACZ,gBAAgB,EAAEU,OAAO,EAAEL,2BAA2B,CAAC;EAC9F;EAEA;;;;;;;EAOAQ,WAAWA,CAACC,KAAa,EAAET,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI;IACpF,MAAMI,OAAO,GAAG,IAAIxB,0EAAe,EAAE;IACrCwB,OAAO,CAACC,YAAY,GAAG,CACrB,IAAI7B,2EAAY,CAAC,OAAO,EAAEgC,KAAK,CAAC,CACjC;IAED,OAAO,IAAI,CAACb,UAAU,CAACW,QAAQ,CAAC,IAAI,CAACb,aAAa,EAAEW,OAAO,EAAEL,2BAA2B,EAAEC,gBAAgB,CAAC,CAACS,IAAI,CAC9G1B,mFAAgC,EAAE,EAClCC,0EAAuB,EAAE,EACzBX,0CAAG,CAAEqC,IAAsB,IAAI;MAC7B,OAAOA,IAAI,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CACH;EACH;;;uBA7DWzB,yBAAyB,EAAA0B,uDAAA,CAAAE,iEAAA,GAAAF,uDAAA,CAAAG,6FAAA,GAAAH,uDAAA,CAAAI,2EAAA,GAAAJ,uDAAA,CAAAK,4EAAA,GAAAL,uDAAA,CAAAM,6FAAA;IAAA;EAAA;;;aAAzBhC,yBAAyB;MAAAiC,OAAA,EAAzBjC,yBAAyB,CAAAkC,IAAA;MAAAC,UAAA,EADZ;IAAM;EAAA","sources":["./src/app/core/submission/correctiontype-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  map,\n  Observable,\n} from 'rxjs';\n\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport { SearchDataImpl } from '../data/base/search-data';\nimport { FindListOptions } from '../data/find-list-options.model';\nimport { PaginatedList } from '../data/paginated-list.model';\nimport { RemoteData } from '../data/remote-data';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport {\n  getAllSucceededRemoteDataPayload,\n  getPaginatedListPayload,\n} from '../shared/operators';\nimport { CorrectionType } from './models/correctiontype.model';\n\n/**\n * A service that provides methods to make REST requests with correctiontypes endpoint.\n */\n@Injectable({ providedIn: 'root' })\nexport class CorrectionTypeDataService extends IdentifiableDataService<CorrectionType> {\n  protected linkPath = 'correctiontypes';\n  protected searchByTopic = 'findByTopic';\n  protected searchFindByItem = 'findByItem';\n  private searchData: SearchDataImpl<CorrectionType>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n  ) {\n    super('correctiontypes', requestService, rdbService, objectCache, halService);\n\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  /**\n   * Get the correction type by id\n   * @param id the id of the correction type\n   * @param useCachedVersionIfAvailable use the cached version if available\n   * @param reRequestOnStale re-request on stale\n   * @returns {Observable<RemoteData<CorrectionType>>} the correction type\n   */\n  getCorrectionTypeById(id: string, useCachedVersionIfAvailable = true, reRequestOnStale = true): Observable<RemoteData<CorrectionType>> {\n    return this.findById(id, useCachedVersionIfAvailable, reRequestOnStale);\n  }\n\n  /**\n   * Search for the correction types for the item\n   * @param itemUuid the uuid of the item\n   * @param useCachedVersionIfAvailable use the cached version if available\n   * @returns the list of correction types for the item\n   */\n  findByItem(itemUuid: string, useCachedVersionIfAvailable): Observable<RemoteData<PaginatedList<CorrectionType>>> {\n    const options = new FindListOptions();\n    options.searchParams = [new RequestParam('uuid', itemUuid)];\n    return this.searchData.searchBy(this.searchFindByItem, options, useCachedVersionIfAvailable);\n  }\n\n  /**\n   * Find the correction type for the topic\n   * @param topic the topic of the correction type to search for\n   * @param useCachedVersionIfAvailable use the cached version if available\n   * @param reRequestOnStale re-request on stale\n   * @returns the correction type for the topic\n   */\n  findByTopic(topic: string, useCachedVersionIfAvailable = true, reRequestOnStale = true): Observable<CorrectionType> {\n    const options = new FindListOptions();\n    options.searchParams = [\n      new RequestParam('topic', topic),\n    ];\n\n    return this.searchData.searchBy(this.searchByTopic, options, useCachedVersionIfAvailable, reRequestOnStale).pipe(\n      getAllSucceededRemoteDataPayload(),\n      getPaginatedListPayload(),\n      map((list: CorrectionType[]) => {\n        return list[0];\n      }),\n    );\n  }\n}\n"],"names":["map","NotificationsService","RemoteDataBuildService","RequestParam","ObjectCacheService","IdentifiableDataService","SearchDataImpl","FindListOptions","RequestService","HALEndpointService","getAllSucceededRemoteDataPayload","getPaginatedListPayload","CorrectionTypeDataService","constructor","requestService","rdbService","objectCache","halService","notificationsService","linkPath","searchByTopic","searchFindByItem","searchData","responseMsToLive","getCorrectionTypeById","id","useCachedVersionIfAvailable","reRequestOnStale","findById","findByItem","itemUuid","options","searchParams","searchBy","findByTopic","topic","pipe","list","i0","ɵɵinject","i1","i2","i3","i4","i5","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}