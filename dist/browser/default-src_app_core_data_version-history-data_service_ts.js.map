{"version":3,"file":"default-src_app_core_data_version-history-data_service_ts.js","mappings":"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","sources":["./src/app/core/data/version-data.service.ts","./src/app/core/data/version-history-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Operation } from 'fast-json-patch';\nimport {\n  EMPTY,\n  Observable,\n} from 'rxjs';\nimport {\n  map,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { getFirstSucceededRemoteDataPayload } from '../shared/operators';\nimport { Version } from '../shared/version.model';\nimport { VersionHistory } from '../shared/version-history.model';\nimport { IdentifiableDataService } from './base/identifiable-data.service';\nimport {\n  PatchData,\n  PatchDataImpl,\n} from './base/patch-data';\nimport { DefaultChangeAnalyzer } from './default-change-analyzer.service';\nimport { RemoteData } from './remote-data';\nimport { RequestService } from './request.service';\nimport { RestRequestMethod } from './rest-request-method';\n\n/**\n * Service responsible for handling requests related to the Version object\n */\n@Injectable({ providedIn: 'root' })\nexport class VersionDataService extends IdentifiableDataService<Version> implements PatchData<Version> {\n  private patchData: PatchData<Version>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected comparator: DefaultChangeAnalyzer<Version>,\n  ) {\n    super('versions', requestService, rdbService, objectCache, halService);\n\n    this.patchData = new PatchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, comparator, this.responseMsToLive, this.constructIdEndpoint);\n  }\n\n  /**\n   * Get the version history for the given version\n   * @param version\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   */\n  getHistoryFromVersion(version: Version, useCachedVersionIfAvailable = false, reRequestOnStale = true): Observable<VersionHistory> {\n    return isNotEmpty(version) ? this.findById(version.id, useCachedVersionIfAvailable, reRequestOnStale, followLink('versionhistory')).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((res: Version) => res.versionhistory),\n      getFirstSucceededRemoteDataPayload(),\n    ) : EMPTY;\n  }\n\n  /**\n   * Get the ID of the version history for the given version\n   * @param version\n   */\n  getHistoryIdFromVersion(version: Version): Observable<string> {\n    return this.getHistoryFromVersion(version).pipe(\n      map((versionHistory: VersionHistory) => versionHistory.id),\n    );\n  }\n\n  /**\n   * Send a patch request for a specified object\n   * @param {T} object The object to send a patch request for\n   * @param {Operation[]} operations The patch operations to be performed\n   */\n  public patch(object: Version, operations: []): Observable<RemoteData<Version>> {\n    return this.patchData.patch(object, operations);\n  }\n\n  /**\n   * Add a new patch to the object cache\n   * The patch is derived from the differences between the given object and its version in the object cache\n   * @param {DSpaceObject} object The given object\n   */\n  public update(object: Version): Observable<RemoteData<Version>> {\n    return this.patchData.update(object);\n  }\n\n  /**\n   * Commit current object changes to the server\n   * @param method The RestRequestMethod for which de server sync buffer should be committed\n   */\n  public commitUpdates(method?: RestRequestMethod): void {\n    this.patchData.commitUpdates(method);\n  }\n\n  /**\n   * Return a list of operations representing the difference between an object and its latest value in the cache.\n   * @param object  the object to resolve to a list of patch operations\n   */\n  public createPatchFromCache(object: Version): Observable<Operation[]> {\n    return this.patchData.createPatchFromCache(object);\n  }\n\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  combineLatest,\n  Observable,\n  of as observableOf,\n} from 'rxjs';\nimport {\n  filter,\n  find,\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport {\n  hasValue,\n  hasValueOperator,\n} from '../../shared/empty.util';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { PaginatedSearchOptions } from '../../shared/search/models/paginated-search-options.model';\nimport {\n  followLink,\n  FollowLinkConfig,\n} from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { HttpOptions } from '../dspace-rest/dspace-rest.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { Item } from '../shared/item.model';\nimport {\n  getAllSucceededRemoteData,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload,\n  getRemoteDataPayload,\n} from '../shared/operators';\nimport { Version } from '../shared/version.model';\nimport { VersionHistory } from '../shared/version-history.model';\nimport { IdentifiableDataService } from './base/identifiable-data.service';\nimport { FindListOptions } from './find-list-options.model';\nimport { PaginatedList } from './paginated-list.model';\nimport { RemoteData } from './remote-data';\nimport { PostRequest } from './request.models';\nimport { RequestService } from './request.service';\nimport { VersionDataService } from './version-data.service';\n\n/**\n * Service responsible for handling requests related to the VersionHistory object\n */\n@Injectable({ providedIn: 'root' })\nexport class VersionHistoryDataService extends IdentifiableDataService<VersionHistory> {\n  protected versionsEndpoint = 'versions';\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected versionDataService: VersionDataService,\n  ) {\n    super('versionhistories', requestService, rdbService, objectCache, halService);\n  }\n\n  /**\n   * Get the endpoint for browsing versions\n   */\n  getBrowseEndpoint(options: FindListOptions = {}, linkPath?: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Get the versions endpoint for a version history\n   * @param versionHistoryId\n   */\n  getVersionsEndpoint(versionHistoryId: string): Observable<string> {\n    return this.getBrowseEndpoint().pipe(\n      switchMap((href: string) => this.halService.getEndpoint(this.versionsEndpoint, `${href}/${versionHistoryId}`)),\n    );\n  }\n\n  /**\n   * Get a version history's versions using paginated search options\n   * @param versionHistoryId            The version history's ID\n   * @param searchOptions               The search options to use\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  getVersions(versionHistoryId: string, searchOptions?: PaginatedSearchOptions, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<Version>[]): Observable<RemoteData<PaginatedList<Version>>> {\n    const hrefObs = this.getVersionsEndpoint(versionHistoryId).pipe(\n      map((href) => searchOptions ? searchOptions.toRestUrl(href) : href),\n    );\n\n    return this.versionDataService.findListByHref(hrefObs, undefined, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Create a new version for an item\n   * @param itemHref the item for which create a new version\n   * @param summary the summary of the new version\n   */\n  createVersion(itemHref: string, summary: string): Observable<RemoteData<Version>> {\n    const requestId = this.requestService.generateRequestId();\n    const requestOptions: HttpOptions = Object.create({});\n    let requestHeaders = new HttpHeaders();\n    requestHeaders = requestHeaders.append('Content-Type', 'text/uri-list');\n    requestOptions.headers = requestHeaders;\n\n    this.halService.getEndpoint(this.versionsEndpoint).pipe(\n      take(1),\n      map((endpointUrl: string) => (summary?.length > 0) ? `${endpointUrl}?summary=${summary}` : `${endpointUrl}`),\n      find((href: string) => hasValue(href)),\n    ).subscribe((href) => {\n      const request = new PostRequest(requestId, href, itemHref, requestOptions);\n      if (hasValue(this.responseMsToLive)) {\n        request.responseMsToLive = this.responseMsToLive;\n      }\n\n      this.requestService.send(request);\n    });\n\n    return this.rdbService.buildFromRequestUUIDAndAwait<Version>(requestId, (versionRD) => combineLatest([\n      this.requestService.setStaleByHrefSubstring(versionRD.payload._links.self.href),\n      this.requestService.setStaleByHrefSubstring(versionRD.payload._links.versionhistory.href),\n    ])).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n\n  /**\n   * Get the latest version in a version history\n   * @param versionHistory\n   */\n  getLatestVersionFromHistory$(versionHistory: VersionHistory): Observable<Version> {\n\n    // Pagination options to fetch a single version on the first page (this is the latest version in the history)\n    const latestVersionOptions = Object.assign(new PaginationComponentOptions(), {\n      id: 'item-newest-version-options',\n      currentPage: 1,\n      pageSize: 1,\n    });\n\n    const latestVersionSearch = new PaginatedSearchOptions({ pagination: latestVersionOptions });\n\n    return this.getVersions(versionHistory.id, latestVersionSearch, false, true, followLink('item')).pipe(\n      getAllSucceededRemoteData(),\n      getRemoteDataPayload(),\n      hasValueOperator(),\n      filter((versions) => versions.page.length > 0),\n      map((versions) => versions.page[0]),\n    );\n\n  }\n\n  /**\n   * Get the latest version (return null if the specified version is null)\n   * @param version\n   */\n  getLatestVersion$(version: Version): Observable<Version> {\n    // retrieve again version, including with versionHistory\n    return version.id ? this.versionDataService.findById(version.id, false, true, followLink('versionhistory')).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((res) => res.versionhistory),\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((versionHistoryRD) => this.getLatestVersionFromHistory$(versionHistoryRD)),\n    ) : observableOf(null);\n  }\n\n  /**\n   * Check if the given version is the latest (return null if `version` is null)\n   * @param version\n   * @returns `true` if the specified version is the latest one, `false` otherwise, or `null` if the specified version is null\n   */\n  isLatest$(version: Version): Observable<boolean> {\n    return version ? this.getLatestVersion$(version).pipe(\n      take(1),\n      switchMap((latestVersion) => observableOf(version.version === latestVersion.version)),\n    ) : observableOf(null);\n  }\n\n  /**\n   * Check if a worskpace item exists in the version history (return null if there is no version history)\n   * @param versionHref the href of the version\n   * @returns `true` if a workspace item exists, `false` otherwise, or `null` if a version history does not exist\n   */\n  hasDraftVersion$(versionHref: string): Observable<boolean> {\n    return this.versionDataService.findByHref(versionHref, false, true, followLink('versionhistory')).pipe(\n      getFirstCompletedRemoteData(),\n      switchMap((versionRD: RemoteData<Version>) => {\n        if (versionRD.hasSucceeded && !versionRD.hasNoContent && hasValue(versionRD.payload)) {\n          return versionRD.payload.versionhistory.pipe(\n            getFirstCompletedRemoteData(),\n            map((versionHistoryRD: RemoteData<VersionHistory>) => {\n              if (versionHistoryRD.hasSucceeded && !versionHistoryRD.hasNoContent) {\n                return versionHistoryRD.payload.draftVersion;\n              } else {\n                return false;\n              }\n            }),\n          );\n        } else {\n          return observableOf(false);\n        }\n      }),\n    );\n  }\n\n  /**\n   * Get the item of the latest version in a version history\n   * @param versionHistory\n   */\n  getLatestVersionItemFromHistory$(versionHistory: VersionHistory): Observable<Item> {\n    return this.getLatestVersionFromHistory$(versionHistory).pipe(\n      switchMap((newLatestVersion) => newLatestVersion.item),\n      getFirstSucceededRemoteDataPayload(),\n    );\n  }\n\n  /**\n   * Get the item of the latest version from any version in the version history\n   * @param version\n   */\n  getVersionHistoryFromVersion$(version: Version): Observable<VersionHistory> {\n    return this.versionDataService.getHistoryIdFromVersion(version).pipe(\n      take(1),\n      switchMap((res) => this.findById(res)),\n      getFirstSucceededRemoteDataPayload(),\n    );\n  }\n\n  /**\n   * Invalidate the cache of the version history\n   * @param versionHistoryID\n   */\n  invalidateVersionHistoryCache(versionHistoryID: string) {\n    this.requestService.setStaleByHrefSubstring('versioning/versionhistories/' + versionHistoryID);\n  }\n}\n"],"names":["EMPTY","map","switchMap","isNotEmpty","followLink","RemoteDataBuildService","ObjectCacheService","HALEndpointService","getFirstSucceededRemoteDataPayload","IdentifiableDataService","PatchDataImpl","DefaultChangeAnalyzer","RequestService","VersionDataService","constructor","requestService","rdbService","objectCache","halService","comparator","patchData","linkPath","responseMsToLive","constructIdEndpoint","getHistoryFromVersion","version","useCachedVersionIfAvailable","reRequestOnStale","findById","id","pipe","res","versionhistory","getHistoryIdFromVersion","versionHistory","patch","object","operations","update","commitUpdates","method","createPatchFromCache","i0","ɵɵinject","i1","i2","i3","i4","i5","factory","ɵfac","providedIn","HttpHeaders","combineLatest","of","observableOf","filter","find","take","hasValue","hasValueOperator","PaginationComponentOptions","PaginatedSearchOptions","getAllSucceededRemoteData","getFirstCompletedRemoteData","getRemoteDataPayload","PostRequest","VersionHistoryDataService","versionDataService","versionsEndpoint","getBrowseEndpoint","options","getEndpoint","getVersionsEndpoint","versionHistoryId","href","getVersions","searchOptions","linksToFollow","hrefObs","toRestUrl","findListByHref","undefined","createVersion","itemHref","summary","requestId","generateRequestId","requestOptions","Object","create","requestHeaders","append","headers","endpointUrl","length","subscribe","request","send","buildFromRequestUUIDAndAwait","versionRD","setStaleByHrefSubstring","payload","_links","self","getLatestVersionFromHistory$","latestVersionOptions","assign","currentPage","pageSize","latestVersionSearch","pagination","versions","page","getLatestVersion$","versionHistoryRD","isLatest$","latestVersion","hasDraftVersion$","versionHref","findByHref","hasSucceeded","hasNoContent","draftVersion","getLatestVersionItemFromHistory$","newLatestVersion","item","getVersionHistoryFromVersion$","invalidateVersionHistoryCache","versionHistoryID"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}