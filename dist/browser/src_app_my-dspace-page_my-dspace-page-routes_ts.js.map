{"version":3,"file":"src_app_my-dspace-page_my-dspace-page-routes_ts.js","mappings":"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","sources":["./src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts","./src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","./src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","./src/app/my-dspace-page/my-dspace-page-routes.ts","./src/app/my-dspace-page/my-dspace.guard.ts","./src/app/my-dspace-page/themed-my-dspace-page.component.ts","./src/app/shared/theme-support/themed.component.html","./src/themes/ lazy ^\\.\\/.*\\/app\\/my\\-dspace\\-page\\/my\\-dspace\\-page\\.component$ namespace object"],"sourcesContent":["/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\n\n/**\n * Method for resolving an I18n breadcrumb configuration object\n * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n * @param {I18nBreadcrumbsService} breadcrumbService\n * @returns BreadcrumbConfig object\n */\nexport const i18nBreadcrumbResolver: ResolveFn<BreadcrumbConfig<string>> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  breadcrumbService: I18nBreadcrumbsService = inject(I18nBreadcrumbsService),\n): BreadcrumbConfig<string> => {\n  const key = route.data.breadcrumbKey;\n  if (hasNoValue(key)) {\n    throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n  }\n  const fullPath = currentPathFromSnapshot(route);\n  return { provider: breadcrumbService, key: key, url: fullPath };\n};\n","import { Injectable } from '@angular/core';\nimport {\n  Observable,\n  of as observableOf,\n} from 'rxjs';\n\nimport { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Route } from '@angular/router';\n\nimport { i18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { myDSpaceGuard } from './my-dspace.guard';\nimport { ThemedMyDSpacePageComponent } from './themed-my-dspace-page.component';\n\nexport const ROUTES: Route[] = [\n  {\n    path: '',\n    component: ThemedMyDSpacePageComponent,\n    resolve: {\n      breadcrumb: i18nBreadcrumbResolver,\n    },\n    data: { title: 'mydspace.title', breadcrumbKey: 'mydspace' },\n    canActivate: [\n      myDSpaceGuard,\n    ],\n  },\n];\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  NavigationExtras,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  first,\n  map,\n} from 'rxjs/operators';\n\nimport { isEmpty } from '../shared/empty.util';\nimport { MyDSpaceConfigurationService } from './my-dspace-configuration.service';\nimport { MyDSpaceConfigurationValueType } from './my-dspace-configuration-value-type';\nimport { MYDSPACE_ROUTE } from './my-dspace-page.component';\n\n/**\n * Prevent unauthorized activating and loading of mydspace configuration\n */\nexport const myDSpaceGuard: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  configurationService: MyDSpaceConfigurationService = inject(MyDSpaceConfigurationService),\n  router: Router = inject(Router),\n): Observable<boolean> => {\n  return configurationService.getAvailableConfigurationTypes().pipe(\n    first(),\n    map((configurationList) => validateConfigurationParam(router, route.queryParamMap.get('configuration'), configurationList)));\n};\n\n/**\n * Check if the given configuration is present in the list of those available\n *\n * @param router\n *    the service router\n * @param configuration\n *    the configuration to validate\n * @param configurationList\n *    the list of available configuration\n *\n */\nfunction validateConfigurationParam(router: Router, configuration: string, configurationList: MyDSpaceConfigurationValueType[]): boolean {\n  const configurationDefault: string = configurationList[0];\n  if (isEmpty(configuration) || !configurationList.includes(configuration as MyDSpaceConfigurationValueType)) {\n    // If configuration param is empty or is not included in available configurations redirect to a default configuration value\n    const navigationExtras: NavigationExtras = {\n      queryParams: { configuration: configurationDefault },\n    };\n\n    router.navigate([MYDSPACE_ROUTE], navigationExtras);\n    return false;\n  } else {\n    return true;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { MyDSpacePageComponent } from './my-dspace-page.component';\n\n/**\n * Themed wrapper for MyDSpacePageComponent\n */\n@Component({\n  selector: 'ds-my-dspace-page',\n  styleUrls: [],\n  templateUrl: './../shared/theme-support/themed.component.html',\n  standalone: true,\n  imports: [MyDSpacePageComponent],\n})\nexport class ThemedMyDSpacePageComponent extends ThemedComponent<MyDSpacePageComponent> {\n\n  protected getComponentName(): string {\n    return 'MyDSpacePageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/my-dspace-page/my-dspace-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./my-dspace-page.component`);\n  }\n}\n","<ng-template #vcr>\n</ng-template>\n<div #content>\n  <ng-content></ng-content>\n</div>\n","var map = {\n\t\"./custom/app/my-dspace-page/my-dspace-page.component\": [\n\t\t24487,\n\t\t\"src_themes_custom_app_my-dspace-page_my-dspace-page_component_ts\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 98966;\nmodule.exports = webpackAsyncContext;"],"names":["Breadcrumb","constructor","text","url","inject","hasNoValue","currentPathFromSnapshot","I18nBreadcrumbsService","i18nBreadcrumbResolver","route","state","breadcrumbService","key","data","breadcrumbKey","Error","fullPath","provider","of","observableOf","BREADCRUMB_MESSAGE_POSTFIX","getBreadcrumbs","factory","ɵfac","providedIn","myDSpaceGuard","ThemedMyDSpacePageComponent","ROUTES","path","component","resolve","breadcrumb","title","canActivate","Router","first","map","isEmpty","MyDSpaceConfigurationService","MYDSPACE_ROUTE","configurationService","router","getAvailableConfigurationTypes","pipe","configurationList","validateConfigurationParam","queryParamMap","get","configuration","configurationDefault","includes","navigationExtras","queryParams","navigate","ThemedComponent","MyDSpacePageComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","t","selectors","standalone","features","i0","ɵɵInheritDefinitionFeature","ɵɵStandaloneFeature","ngContentSelectors","_c0","decls","vars","consts","template","ThemedMyDSpacePageComponent_Template","rf","ctx","ɵɵtemplate","ThemedMyDSpacePageComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}