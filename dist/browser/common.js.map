{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/admin/admin-ldn-services/ldn-services-data/ldn-itemfilters-data.service.ts","./src/app/collection-page/collection-page.resolver.ts","./src/app/core/coar-notify/notify-info/notify-info.guard.ts","./src/app/core/data/identifier-data.service.ts","./src/app/core/data/item-request-data.service.ts","./src/app/core/feedback/feedback-data.service.ts","./src/app/core/orcid/orcid-history-data.service.ts","./src/app/core/orcid/orcid-queue-data.service.ts","./src/app/core/statistics/usage-report-data.service.ts","./src/app/item-page/item.resolver.ts","./node_modules/rxjs/dist/esm/internal/operators/combineLatest.js","./node_modules/rxjs/dist/esm/internal/operators/combineLatestWith.js"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { RemoteDataBuildService } from '../../../core/cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport {\n  FindAllData,\n  FindAllDataImpl,\n} from '../../../core/data/base/find-all-data';\nimport { IdentifiableDataService } from '../../../core/data/base/identifiable-data.service';\nimport { FindListOptions } from '../../../core/data/find-list-options.model';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { RequestService } from '../../../core/data/request.service';\nimport { HALEndpointService } from '../../../core/shared/hal-endpoint.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../../shared/utils/follow-link-config.model';\nimport { Itemfilter } from '../ldn-services-model/ldn-service-itemfilters';\n\n/**\n * A service responsible for fetching/sending data from/to the REST API on the itemfilters endpoint\n */\n@Injectable({ providedIn: 'root' })\nexport class LdnItemfiltersService extends IdentifiableDataService<Itemfilter> implements FindAllData<Itemfilter> {\n  private findAllData: FindAllDataImpl<Itemfilter>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n  ) {\n    super('itemfilters', requestService, rdbService, objectCache, halService);\n\n    this.findAllData = new FindAllDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  /**\n   * Gets the endpoint URL for the itemfilters.\n   *\n   * @returns {string} - The endpoint URL.\n   */\n  getEndpoint() {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Finds all itemfilters based on the provided options and link configurations.\n   *\n   * @param {FindListOptions} options - The options for finding a list of itemfilters.\n   * @param {boolean} useCachedVersionIfAvailable - Whether to use the cached version if available.\n   * @param {boolean} reRequestOnStale - Whether to re-request the data if it's stale.\n   * @param {...FollowLinkConfig<Itemfilter>[]} linksToFollow - Configurations for following specific links.\n   * @returns {Observable<RemoteData<PaginatedList<Itemfilter>>>} - An observable of remote data containing a paginated list of itemfilters.\n   */\n  findAll(options?: FindListOptions, useCachedVersionIfAvailable?: boolean, reRequestOnStale?: boolean, ...linksToFollow: FollowLinkConfig<Itemfilter>[]): Observable<RemoteData<PaginatedList<Itemfilter>>> {\n    return this.findAllData.findAll(options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n}\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { AppState } from '../app.reducer';\nimport { CollectionDataService } from '../core/data/collection-data.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\nimport { Collection } from '../core/shared/collection.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport {\n  followLink,\n  FollowLinkConfig,\n} from '../shared/utils/follow-link-config.model';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const COLLECTION_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Collection>[] = [\n  followLink('parentCommunity', {},\n    followLink('parentCommunity'),\n  ),\n  followLink('logo'),\n];\n\n/**\n * Method for resolving a collection based on the parameters in the current route\n * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n * @param collectionService\n * @param store\n * @returns Observable<<RemoteData<Collection>> Emits the found collection based on the parameters in the current route,\n * or an error if something went wrong\n */\nexport const collectionPageResolver: ResolveFn<RemoteData<Collection>> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  collectionService: CollectionDataService = inject(CollectionDataService),\n  store: Store<AppState> = inject(Store<AppState>),\n): Observable<RemoteData<Collection>> => {\n  const collectionRD$ = collectionService.findById(\n    route.params.id,\n    true,\n    false,\n    ...COLLECTION_PAGE_LINKS_TO_FOLLOW,\n  ).pipe(\n    getFirstCompletedRemoteData(),\n  );\n\n  collectionRD$.subscribe((collectionRD: RemoteData<Collection>) => {\n    store.dispatch(new ResolvedAction(state.url, collectionRD.payload));\n  });\n\n  return collectionRD$;\n};\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { NotifyInfoService } from './notify-info.service';\n\nexport const notifyInfoGuard: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  notifyInfoService: NotifyInfoService = inject(NotifyInfoService),\n  router: Router = inject(Router),\n): Observable<boolean | UrlTree> => {\n  return notifyInfoService.isCoarConfigEnabled().pipe(\n    map(isEnabled => isEnabled ? true : router.parseUrl('/404')),\n  );\n};\n","import {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { IdentifierData } from '../../shared/object-list/identifier-data/identifier-data.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { CoreState } from '../core-state.model';\nimport { HttpOptions } from '../dspace-rest/dspace-rest.service';\nimport { ConfigurationProperty } from '../shared/configuration-property.model';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { Item } from '../shared/item.model';\nimport { getFirstCompletedRemoteData } from '../shared/operators';\nimport { sendRequest } from '../shared/request.operators';\nimport { BaseDataService } from './base/base-data.service';\nimport { ConfigurationDataService } from './configuration-data.service';\nimport { DefaultChangeAnalyzer } from './default-change-analyzer.service';\nimport { RemoteData } from './remote-data';\nimport { PostRequest } from './request.models';\nimport { RequestService } from './request.service';\nimport { RestRequest } from './rest-request.model';\n\n/**\n * The service handling all REST requests to get item identifiers like handles and DOIs\n * from the /identifiers endpoint, as well as the backend configuration that controls whether a 'Register DOI'\n * button appears for admins in the item status page\n */\n@Injectable({ providedIn: 'root' })\nexport class IdentifierDataService extends BaseDataService<IdentifierData> {\n\n  constructor(\n    protected comparator: DefaultChangeAnalyzer<IdentifierData>,\n    protected halService: HALEndpointService,\n    protected http: HttpClient,\n    protected notificationsService: NotificationsService,\n    protected objectCache: ObjectCacheService,\n    protected rdbService: RemoteDataBuildService,\n    protected requestService: RequestService,\n    protected store: Store<CoreState>,\n    private configurationService: ConfigurationDataService,\n  ) {\n    super('identifiers', requestService, rdbService, objectCache, halService);\n  }\n\n  /**\n   * Returns {@link RemoteData} of {@link IdentifierData} representing identifiers for this item\n   * @param item  Item we are querying\n   */\n  getIdentifierDataFor(item: Item): Observable<RemoteData<IdentifierData>> {\n    return this.findByHref(item._links.identifiers.href, false, true);\n  }\n\n  /**\n   * Should we allow registration of new DOIs via the item status page?\n   */\n  public getIdentifierRegistrationConfiguration(): Observable<string[]> {\n    return this.configurationService.findByPropertyName('identifiers.item-status.register-doi').pipe(\n      getFirstCompletedRemoteData(),\n      map((propertyRD: RemoteData<ConfigurationProperty>) => propertyRD.hasSucceeded ? propertyRD.payload.values : []),\n    );\n  }\n\n  public registerIdentifier(item: Item, type: string): Observable<RemoteData<any>> {\n    const requestId = this.requestService.generateRequestId();\n    return this.getEndpoint().pipe(\n      map((endpointURL: string) => {\n        const options: HttpOptions = Object.create({});\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'text/uri-list');\n        options.headers = headers;\n        let params = new HttpParams();\n        params = params.append('type', type);\n        options.params = params;\n        return new PostRequest(requestId, endpointURL, item._links.self.href, options);\n      }),\n      sendRequest(this.requestService),\n      switchMap((request: RestRequest) => this.rdbService.buildFromRequestUUID(request.uuid) as Observable<RemoteData<any>>),\n    );\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  find,\n  map,\n} from 'rxjs/operators';\n\nimport { RequestCopyEmail } from '../../request-copy/email-request-copy/request-copy-email.model';\nimport {\n  hasValue,\n  isNotEmpty,\n} from '../../shared/empty.util';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { HttpOptions } from '../dspace-rest/dspace-rest.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { ItemRequest } from '../shared/item-request.model';\nimport { getFirstCompletedRemoteData } from '../shared/operators';\nimport { sendRequest } from '../shared/request.operators';\nimport { IdentifiableDataService } from './base/identifiable-data.service';\nimport { RemoteData } from './remote-data';\nimport {\n  PostRequest,\n  PutRequest,\n} from './request.models';\nimport { RequestService } from './request.service';\n\n/**\n * A service responsible for fetching/sending data from/to the REST API on the itemrequests endpoint\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemRequestDataService extends IdentifiableDataService<ItemRequest> {\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n  ) {\n    super('itemrequests', requestService, rdbService, objectCache, halService);\n  }\n\n  getItemRequestEndpoint(): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Get the endpoint for an {@link ItemRequest} by their token\n   * @param token\n   */\n  getItemRequestEndpointByToken(token: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      map((href: string) => `${href}/${token}`));\n  }\n\n  /**\n   * Request a copy of an item\n   * @param itemRequest\n   */\n  requestACopy(itemRequest: ItemRequest): Observable<RemoteData<ItemRequest>> {\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getItemRequestEndpoint();\n\n    href$.pipe(\n      find((href: string) => hasValue(href)),\n      map((href: string) => {\n        const request = new PostRequest(requestId, href, itemRequest);\n        this.requestService.send(request);\n      }),\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID<ItemRequest>(requestId).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n\n  /**\n   * Deny the request of an item\n   * @param token Token of the {@link ItemRequest}\n   * @param email Email to send back to the user requesting the item\n   */\n  deny(token: string, email: RequestCopyEmail): Observable<RemoteData<ItemRequest>> {\n    return this.process(token, email, false);\n  }\n\n  /**\n   * Grant the request of an item\n   * @param token Token of the {@link ItemRequest}\n   * @param email Email to send back to the user requesting the item\n   * @param suggestOpenAccess Whether or not to suggest the item to become open access\n   */\n  grant(token: string, email: RequestCopyEmail, suggestOpenAccess = false): Observable<RemoteData<ItemRequest>> {\n    return this.process(token, email, true, suggestOpenAccess);\n  }\n\n  /**\n   * Process the request of an item\n   * @param token Token of the {@link ItemRequest}\n   * @param email Email to send back to the user requesting the item\n   * @param grant Grant or deny the request (true = grant, false = deny)\n   * @param suggestOpenAccess Whether or not to suggest the item to become open access\n   */\n  process(token: string, email: RequestCopyEmail, grant: boolean, suggestOpenAccess = false): Observable<RemoteData<ItemRequest>> {\n    const requestId = this.requestService.generateRequestId();\n\n    this.getItemRequestEndpointByToken(token).pipe(\n      distinctUntilChanged(),\n      map((endpointURL: string) => {\n        const options: HttpOptions = Object.create({});\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        options.headers = headers;\n        return new PutRequest(requestId, endpointURL, JSON.stringify({\n          acceptRequest: grant,\n          responseMessage: email.message,\n          subject: email.subject,\n          suggestOpenAccess,\n        }), options);\n      }),\n      sendRequest(this.requestService),\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID(requestId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport {\n  CreateData,\n  CreateDataImpl,\n} from '../data/base/create-data';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport { RemoteData } from '../data/remote-data';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport {\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload,\n} from '../shared/operators';\nimport { Feedback } from './models/feedback.model';\n\n/**\n * Service for checking and managing the feedback\n */\n@Injectable({ providedIn: 'root' })\nexport class FeedbackDataService extends IdentifiableDataService<Feedback> implements CreateData<Feedback> {\n  private createData: CreateDataImpl<Feedback>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<any>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n  ) {\n    super('feedbacks', requestService, rdbService, objectCache, halService);\n\n    this.createData = new CreateDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive);\n  }\n\n  /**\n   * Get feedback from its id\n   * @param uuid string the id of the feedback\n   */\n  getFeedback(uuid: string): Observable<Feedback> {\n    return this.findById(uuid).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    );\n  }\n\n\n  /**\n   * Create a new object on the server, and store the response in the object cache\n   *\n   * @param object    The object to create\n   * @param params    Array with additional params to combine with query string\n   */\n  public create(object: Feedback, ...params: RequestParam[]): Observable<RemoteData<Feedback>> {\n    return this.createData.create(object, ...params);\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport { RemoteData } from '../data/remote-data';\nimport { PostRequest } from '../data/request.models';\nimport { RequestService } from '../data/request.service';\nimport { RestRequest } from '../data/rest-request.model';\nimport { HttpOptions } from '../dspace-rest/dspace-rest.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { sendRequest } from '../shared/request.operators';\nimport { OrcidHistory } from './model/orcid-history.model';\nimport { OrcidQueue } from './model/orcid-queue.model';\n\n/**\n * A service that provides methods to make REST requests with Orcid History endpoint.\n */\n@Injectable({ providedIn: 'root' })\nexport class OrcidHistoryDataService extends IdentifiableDataService<OrcidHistory> {\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n  ) {\n    super('orcidhistories', requestService, rdbService, objectCache, halService, 10 * 1000);\n  }\n\n  sendToORCID(orcidQueue: OrcidQueue): Observable<RemoteData<OrcidHistory>> {\n    const requestId = this.requestService.generateRequestId();\n    return this.getEndpoint().pipe(\n      map((endpointURL: string) => {\n        const options: HttpOptions = Object.create({});\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'text/uri-list');\n        options.headers = headers;\n        return new PostRequest(requestId, endpointURL, orcidQueue._links.self.href, options);\n      }),\n      sendRequest(this.requestService),\n      switchMap((request: RestRequest) => this.rdbService.buildFromRequestUUID(request.uuid)  as Observable<RemoteData<OrcidHistory>>),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport {\n  DeleteData,\n  DeleteDataImpl,\n} from '../data/base/delete-data';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport {\n  SearchData,\n  SearchDataImpl,\n} from '../data/base/search-data';\nimport { PaginatedList } from '../data/paginated-list.model';\nimport { RemoteData } from '../data/remote-data';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { NoContent } from '../shared/NoContent.model';\nimport { OrcidQueue } from './model/orcid-queue.model';\n\n/**\n * A service that provides methods to make REST requests with Orcid Queue endpoint.\n */\n@Injectable({ providedIn: 'root' })\nexport class OrcidQueueDataService extends IdentifiableDataService<OrcidQueue> {\n  private searchData: SearchData<OrcidQueue>;\n  private deleteData: DeleteData<OrcidQueue>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n  ) {\n    super('orcidqueues', requestService, rdbService, objectCache, halService, 10 * 1000);\n\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n  }\n\n  /**\n   * @param itemId                      It represent an Id of profileItem\n   * @param paginationOptions           The pagination options object\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @returns { OrcidQueue }\n   */\n  searchByProfileItemId(itemId: string, paginationOptions: PaginationComponentOptions, useCachedVersionIfAvailable = true, reRequestOnStale = true): Observable<RemoteData<PaginatedList<OrcidQueue>>> {\n    return this.searchData.searchBy('findByProfileItem', {\n      searchParams: [new RequestParam('profileItemId', itemId)],\n      elementsPerPage: paginationOptions.pageSize,\n      currentPage: paginationOptions.currentPage,\n    },\n    useCachedVersionIfAvailable,\n    reRequestOnStale,\n    );\n  }\n\n  /**\n   * @param orcidQueueId represents a id of orcid queue\n   * @returns { NoContent }\n   */\n  deleteById(orcidQueueId: number): Observable<RemoteData<NoContent>> {\n    return this.deleteData.delete(orcidQueueId.toString());\n  }\n\n  /**\n   * This method will set linkPath to stale\n   */\n  clearFindByProfileItemRequests() {\n    this.requestService.setStaleByHrefSubstring(this.linkPath + '/search/findByProfileItem');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport {\n  SearchData,\n  SearchDataImpl,\n} from '../data/base/search-data';\nimport { FindListOptions } from '../data/find-list-options.model';\nimport { PaginatedList } from '../data/paginated-list.model';\nimport { RemoteData } from '../data/remote-data';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport {\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload,\n} from '../shared/operators';\nimport { UsageReport } from './models/usage-report.model';\n\n/**\n * A service to retrieve {@link UsageReport}s from the REST API\n */\n@Injectable({ providedIn: 'root' })\nexport class UsageReportDataService extends IdentifiableDataService<UsageReport> implements SearchData<UsageReport> {\n  private searchData: SearchDataImpl<UsageReport>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected halService: HALEndpointService,\n    protected objectCache: ObjectCacheService,\n  ) {\n    super('usagereports', requestService, rdbService, objectCache, halService);\n\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  getStatistic(scope: string, type: string): Observable<UsageReport> {\n    return this.findById(`${scope}_${type}`).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    );\n  }\n\n  searchStatistics(uri: string, page: number, size: number): Observable<UsageReport[]> {\n    return this.searchBy('object', {\n      searchParams: [\n        new RequestParam('uri', uri),\n      ],\n      currentPage: page,\n      elementsPerPage: size,\n    }, true, false).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      map((list) => list.page),\n    );\n  }\n\n  public searchBy(searchMethod: string, options?: FindListOptions, useCachedVersionIfAvailable?: boolean, reRequestOnStale?: boolean, ...linksToFollow: FollowLinkConfig<UsageReport>[]): Observable<RemoteData<PaginatedList<UsageReport>>> {\n    return this.searchData.searchBy(searchMethod, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n}\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\nimport { AppState } from '../app.reducer';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\nimport { Item } from '../core/shared/item.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport {\n  followLink,\n  FollowLinkConfig,\n} from '../shared/utils/follow-link-config.model';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport function getItemPageLinksToFollow(): FollowLinkConfig<Item>[] {\n  const followLinks: FollowLinkConfig<Item>[] = [\n    followLink('owningCollection', {},\n      followLink('parentCommunity', {},\n        followLink('parentCommunity')),\n    ),\n    followLink('relationships'),\n    followLink('version', {}, followLink('versionhistory')),\n    followLink('thumbnail'),\n  ];\n  if (environment.item.showAccessStatuses) {\n    followLinks.push(followLink('accessStatus'));\n  }\n  return followLinks;\n}\n\nexport const itemResolver: ResolveFn<RemoteData<Item>> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  itemService: ItemDataService = inject(ItemDataService),\n  store: Store<AppState> = inject(Store<AppState>),\n): Observable<RemoteData<Item>> => {\n  const itemRD$ = itemService.findById(\n    route.params.id,\n    true,\n    false,\n    ...getItemPageLinksToFollow(),\n  ).pipe(\n    getFirstCompletedRemoteData(),\n  );\n\n  itemRD$.subscribe((itemRD: RemoteData<Item>) => {\n    store.dispatch(new ResolvedAction(state.url, itemRD.payload));\n  });\n\n  return itemRD$;\n};\n","import { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest(...args) {\n    const resultSelector = popResultSelector(args);\n    return resultSelector\n        ? pipe(combineLatest(...args), mapOneOrManyArgs(resultSelector))\n        : operate((source, subscriber) => {\n            combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\n        });\n}\n","import { combineLatest } from './combineLatest';\nexport function combineLatestWith(...otherSources) {\n    return combineLatest(...otherSources);\n}\n"],"names":["RemoteDataBuildService","ObjectCacheService","FindAllDataImpl","IdentifiableDataService","RequestService","HALEndpointService","NotificationsService","LdnItemfiltersService","constructor","requestService","rdbService","objectCache","halService","notificationsService","findAllData","linkPath","responseMsToLive","getEndpoint","findAll","options","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","i0","ɵɵinject","i1","i2","i3","i4","i5","factory","ɵfac","providedIn","inject","Store","CollectionDataService","ResolvedAction","getFirstCompletedRemoteData","followLink","COLLECTION_PAGE_LINKS_TO_FOLLOW","collectionPageResolver","route","state","collectionService","store","collectionRD$","findById","params","id","pipe","subscribe","collectionRD","dispatch","url","payload","Router","map","NotifyInfoService","notifyInfoGuard","notifyInfoService","router","isCoarConfigEnabled","isEnabled","parseUrl","HttpClient","HttpHeaders","HttpParams","switchMap","sendRequest","BaseDataService","ConfigurationDataService","DefaultChangeAnalyzer","PostRequest","IdentifierDataService","comparator","http","configurationService","getIdentifierDataFor","item","findByHref","_links","identifiers","href","getIdentifierRegistrationConfiguration","findByPropertyName","propertyRD","hasSucceeded","values","registerIdentifier","type","requestId","generateRequestId","endpointURL","Object","create","headers","append","self","request","buildFromRequestUUID","uuid","i6","i7","i8","i9","distinctUntilChanged","filter","find","hasValue","isNotEmpty","PutRequest","ItemRequestDataService","getItemRequestEndpoint","getItemRequestEndpointByToken","token","requestACopy","itemRequest","href$","send","deny","email","process","grant","suggestOpenAccess","JSON","stringify","acceptRequest","responseMessage","message","subject","CreateDataImpl","getFirstSucceededRemoteData","getRemoteDataPayload","FeedbackDataService","createData","getFeedback","object","OrcidHistoryDataService","sendToORCID","orcidQueue","RequestParam","DeleteDataImpl","SearchDataImpl","OrcidQueueDataService","searchData","deleteData","constructIdEndpoint","searchByProfileItemId","itemId","paginationOptions","searchBy","searchParams","elementsPerPage","pageSize","currentPage","deleteById","orcidQueueId","delete","toString","clearFindByProfileItemRequests","setStaleByHrefSubstring","UsageReportDataService","getStatistic","scope","searchStatistics","uri","page","size","list","searchMethod","environment","ItemDataService","getItemPageLinksToFollow","followLinks","showAccessStatuses","push","itemResolver","itemService","itemRD$","itemRD","combineLatestInit","operate","argsOrArgArray","mapOneOrManyArgs","popResultSelector","combineLatest","args","resultSelector","source","subscriber","combineLatestWith","otherSources"],"sourceRoot":"webpack:///","x_google_ignoreList":[10,11]}