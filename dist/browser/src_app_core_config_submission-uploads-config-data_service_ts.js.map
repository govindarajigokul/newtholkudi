{"version":3,"file":"src_app_core_config_submission-uploads-config-data_service_ts.js","mappings":";;;;;;;;;;;;;;;;AACqC;AAG4C;AAEf;AAGlE;;;;AAIM,MAAgBG,iBAAkB,SAAQF,yFAAqC;EACnF;;;;;;;;;;;;;;EAcOG,UAAUA,CAACC,IAAY,EAAEC,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI,EAAE,GAAGC,aAA+C;IAC7I,OAAO,KAAK,CAACJ,UAAU,CAACC,IAAI,EAAEC,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAa,CAAC,CAACC,IAAI,CACjGP,8EAA2B,EAAE,EAC7BF,mDAAG,CAAEU,EAA4B,IAAI;MACnC,IAAIA,EAAE,CAACC,SAAS,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD,CAAC,MAAM;QACL,OAAOF,EAAE;MACX;IACF,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;;;;EAaOG,UAAUA,CAACC,IAAY,EAAGR,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI,EAAE,GAAGC,aAA+C;IAC9I,OAAO,KAAK,CAACO,QAAQ,CAACD,IAAI,EAAER,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAa,CAAC;EAC9F;;;;;;;;;;;;;;;;;;;;;ACpDmF;AAClB;AAEV;AACW;AACV;;;;;;AAI1D;;;AAIM,MAAOY,kCAAmC,SAAQjB,mEAAiB;EACvEkB,YACYC,cAA8B,EAC9BC,UAAkC,EAClCC,WAA+B,EAC/BC,UAA8B;IAExC,KAAK,CAAC,mBAAmB,EAAEH,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,CAAC;IALrE,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;EAGtB;EAEArB,UAAUA,CAACC,IAAY,EAAEC,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI,EAAE,GAAGC,aAAa;IACpG,OAAO,KAAK,CAACJ,UAAU,CAACC,IAAI,EAAEC,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAiD,CAAmD;EACtL;;;uBAZWY,kCAAkC,EAAAM,sDAAA,CAAAE,iEAAA,GAAAF,sDAAA,CAAAG,6FAAA,GAAAH,sDAAA,CAAAI,2EAAA,GAAAJ,sDAAA,CAAAK,4EAAA;IAAA;EAAA;;;aAAlCX,kCAAkC;MAAAY,OAAA,EAAlCZ,kCAAkC,CAAAa,IAAA;MAAAC,UAAA,EADrB;IAAM;EAAA","sources":["./src/app/core/config/config-data.service.ts","./src/app/core/config/submission-uploads-config-data.service.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport { RemoteData } from '../data/remote-data';\nimport { getFirstCompletedRemoteData } from '../shared/operators';\nimport { ConfigObject } from './models/config.model';\n\n/**\n * Abstract data service to retrieve configuration objects from the REST server.\n * Common logic for configuration objects should be implemented here.\n */\nexport abstract class ConfigDataService extends IdentifiableDataService<ConfigObject> {\n  /**\n   * Returns an observable of {@link RemoteData} of an object, based on an href, with a list of\n   * {@link FollowLinkConfig}, to automatically resolve {@link HALLink}s of the object\n   *\n   * Throws an error if a configuration object cannot be retrieved.\n   *\n   * @param href                        The url of object we want to retrieve\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  public findByHref(href: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<ConfigObject>[]): Observable<RemoteData<ConfigObject>> {\n    return super.findByHref(href, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow).pipe(\n      getFirstCompletedRemoteData(),\n      map((rd: RemoteData<ConfigObject>) => {\n        if (rd.hasFailed) {\n          throw new Error(`Couldn't retrieve the config`);\n        } else {\n          return rd;\n        }\n      }),\n    );\n  }\n\n  /**\n   * Returns a config object by given name\n   *\n   * Throws an error if a configuration object cannot be retrieved.\n   *\n   * @param name                        The name of configuration to retrieve\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  public findByName(name: string,  useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<ConfigObject>[]): Observable<RemoteData<ConfigObject>> {\n    return super.findById(name, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { RemoteData } from '../data/remote-data';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { ConfigDataService } from './config-data.service';\nimport { ConfigObject } from './models/config.model';\nimport { SubmissionUploadsModel } from './models/config-submission-uploads.model';\n\n/**\n * Provides methods to retrieve, from REST server, bitstream access conditions configurations applicable during the submission process.\n */\n@Injectable({ providedIn: 'root' })\nexport class SubmissionUploadsConfigDataService extends ConfigDataService {\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n  ) {\n    super('submissionuploads', requestService, rdbService, objectCache, halService);\n  }\n\n  findByHref(href: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow): Observable<RemoteData<SubmissionUploadsModel>> {\n    return super.findByHref(href, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow as FollowLinkConfig<ConfigObject>[]) as Observable<RemoteData<SubmissionUploadsModel>>;\n  }\n}\n"],"names":["map","IdentifiableDataService","getFirstCompletedRemoteData","ConfigDataService","findByHref","href","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","pipe","rd","hasFailed","Error","findByName","name","findById","RemoteDataBuildService","ObjectCacheService","RequestService","HALEndpointService","SubmissionUploadsConfigDataService","constructor","requestService","rdbService","objectCache","halService","i0","ɵɵinject","i1","i2","i3","i4","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}