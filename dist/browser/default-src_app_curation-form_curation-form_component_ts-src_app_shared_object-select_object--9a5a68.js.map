{"version":3,"file":"default-src_app_curation-form_curation-form_component_ts-src_app_shared_object-select_object--9a5a68.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAGuB;AAMF;AASG;AAQY;AAEgB;AAGQ;AAY1B;AAOA;;;AAGlC,SAASyB,0BAA0BA,CAAA;EACjC,OAAOxB,2DAAc,CAACa,yDAAY,EAAGY,KAAgB,IAAKA,KAAK,CAAC,sBAAsB,CAAC,CAAC;AAC1F;AAEA,SAASC,qCAAqCA,CAACC,GAAW;EACxD,OAAO3B,2DAAc,CAACwB,0BAA0B,EAAE,EAAGC,KAAyB,IAAKA,KAAK,CAACE,GAAG,CAAC,CAAC;AAChG;AAEA,SAASC,oCAAoCA,CAACD,GAAW,EAAEE,IAAY;EACrE,OAAO7B,2DAAc,CAAC0B,qCAAqC,CAACC,GAAG,CAAC,EAAGF,KAAyB,IAAKA,KAAK,CAACK,WAAW,CAACD,IAAI,CAAC,CAAC;AAC3H;AAEA,SAASE,6BAA6BA,CAACJ,GAAW,EAAEK,MAAc;EAChE,OAAOhC,2DAAc,CAAC0B,qCAAqC,CAACC,GAAG,CAAC,EAAGF,KAAyB,IAAKA,KAAK,CAACQ,sBAAsB,CAACD,MAAM,CAAC,CAAC;AACxI;AAEA;;;AAIM,MAAOE,oBAAoB;EAC/BC,YAAoBC,KAAuB,EACvBC,QAAkB;IADlB,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,QAAQ,GAARA,QAAQ;EAC5B;EAEA;;;;;;;EAOAC,UAAUA,CAACX,GAAG,EAAEY,MAAsB,EAAEC,YAAkB,EAAEC,qBAAiE;IAC3H,IAAI,CAACL,KAAK,CAACM,QAAQ,CAAC,IAAIzB,2EAAsB,CAACU,GAAG,EAAEY,MAAM,EAAEC,YAAY,EAAEC,qBAAqB,CAAC,CAAC;EACnG;EAEA;;;;;;EAMQE,eAAeA,CAAChB,GAAW,EAAEiB,KAAmB,EAAEC,UAA2B;IACnF,IAAI,CAACT,KAAK,CAACM,QAAQ,CAAC,IAAI3B,yEAAoB,CAACY,GAAG,EAAEiB,KAAK,EAAEC,UAAU,CAAC,CAAC;EACvE;EAEA;;;;EAIQC,cAAcA,CAACnB,GAAW;IAChC,OAAO,IAAI,CAACS,KAAK,CAACW,IAAI,CAAC9C,mDAAM,CAACyB,qCAAqC,CAACC,GAAG,CAAC,CAAC,CAAC;EAC5E;EAEA;;;;;EAKQqB,aAAaA,CAACrB,GAAW,EAAEE,IAAY;IAC7C,OAAO,IAAI,CAACO,KAAK,CAACW,IAAI,CAAC9C,mDAAM,CAAC2B,oCAAoC,CAACD,GAAG,EAAEE,IAAI,CAAC,CAAC,CAAC;EACjF;EAEA;;;;;;;EAOAoB,eAAeA,CAACtB,GAAW,EAAEuB,aAA6B,EAAEC,YAAsB;IAChF,MAAMC,aAAa,GAAG,IAAI,CAACN,cAAc,CAACnB,GAAG,CAAC;IAC9C,OAAOyB,aAAa,CAACL,IAAI,CACvBzC,yDAAS,CAAE+C,WAAW,IAAI;MACxB,MAAMC,YAAY,GAAiB,EAAE;MACrC,IAAI7C,4DAAQ,CAAC4C,WAAW,CAAC,EAAE;QACzBE,MAAM,CAACC,IAAI,CAACL,YAAY,GAAGE,WAAW,CAACC,YAAY,GAAGD,WAAW,CAACvB,WAAW,CAAC,CAAC2B,OAAO,CAAE5B,IAAI,IAAI;UAC9FyB,YAAY,CAACzB,IAAI,CAAC,GAAGwB,WAAW,CAACC,YAAY,CAACzB,IAAI,CAAC;QACrD,CAAC,CAAC;MACJ;MACA,OAAO,IAAI,CAAC6B,wBAAwB,CAAC/B,GAAG,EAAEuB,aAAa,CAAC,CAACH,IAAI,CAC3D1C,mDAAG,CAAEsD,qBAAqB,IAAI;QAC5BJ,MAAM,CAACC,IAAI,CAACG,qBAAqB,CAAC,CAACF,OAAO,CAAE5B,IAAI,IAAI;UAClDyB,YAAY,CAACzB,IAAI,CAAC,GAAG8B,qBAAqB,CAAC9B,IAAI,CAAC;QAClD,CAAC,CAAC;QACF,OAAOyB,YAAY;MACrB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAI,wBAAwBA,CAAC/B,GAAW,EAAEuB,aAA6B;IACjE,MAAME,aAAa,GAAG,IAAI,CAACN,cAAc,CAACnB,GAAG,CAAC;IAC9C,OAAOyB,aAAa,CAACL,IAAI,CACvBrC,oEAAgB,EAAE,EAClBL,mDAAG,CAAEgD,WAAW,IAAI;MAClB,MAAMC,YAAY,GAAiB,EAAE;MACrC,KAAK,MAAMM,MAAM,IAAIV,aAAa,EAAE;QAClC,IAAIW,WAAW,GAAGR,WAAW,CAACC,YAAY,CAACM,MAAM,CAAC/B,IAAI,CAAC;QACvD,IAAIlB,2DAAO,CAACkD,WAAW,CAAC,EAAE;UACxBA,WAAW,GAAG;YAAEjB,KAAK,EAAEgB,MAAM;YAAEf,UAAU,EAAEiB;UAAS,CAAE;QACxD;QACAR,YAAY,CAACM,MAAM,CAAC/B,IAAI,CAAC,GAAGgC,WAAW;MACzC;MACA,OAAOP,YAAY;IACrB,CAAC,CAAC,CAAC;EACP;EAEA;;;;;EAKAS,UAAUA,CAACpC,GAAW,EAAEE,IAAY;IAClC,MAAMmC,WAAW,GAAG,IAAI,CAAChB,aAAa,CAACrB,GAAG,EAAEE,IAAI,CAAC;IACjD,OAAOmC,WAAW,CAACjB,IAAI,CACrB3C,sDAAM,CAAE6D,UAAU,IAAKxD,4DAAQ,CAACwD,UAAU,CAAC,CAAC,EAC5C5D,mDAAG,CAAE4D,UAAU,IAAKA,UAAU,CAACC,QAAQ,CAAC,EACxC/D,oEAAoB,EAAE,CACvB;EACH;EAEA;;;;;EAKAgE,OAAOA,CAACxC,GAAW,EAAEE,IAAY;IAC/B,MAAMmC,WAAW,GAAG,IAAI,CAAChB,aAAa,CAACrB,GAAG,EAAEE,IAAI,CAAC;IACjD,OAAOmC,WAAW,CAACjB,IAAI,CACrB3C,sDAAM,CAAE6D,UAAU,IAAKxD,4DAAQ,CAACwD,UAAU,CAAC,CAAC,EAC5C5D,mDAAG,CAAE4D,UAAU,IAAKA,UAAU,CAACE,OAAO,CAAC,EACvChE,oEAAoB,EAAE,CACvB;EACH;EAEA;;;;EAIAiE,WAAWA,CAACzC,GAAW;IACrB,MAAMyB,aAAa,GAAG,IAAI,CAACN,cAAc,CAACnB,GAAG,CAAC;IAC9C,OAAOyB,aAAa,CAACL,IAAI,CACvB1C,mDAAG,CAAEgE,KAAyB,IAAI;MAChC,OAAOd,MAAM,CAACe,MAAM,CAACD,KAAK,CAACvC,WAAW,CAAC,CAACyC,SAAS,CAAE9C,KAAiB,IAAK,CAACA,KAAK,CAAC0C,OAAO,CAAC,GAAG,CAAC;IAC9F,CAAC,CAAC,EACFhE,oEAAoB,EAAE,CACvB;EACH;EAEA;;;;;EAKAqE,kBAAkBA,CAAC7C,GAAW,EAAEiB,KAAmB;IACjD,MAAM6B,OAAO,GAAwB,IAAI,CAACf,wBAAwB,CAAC/B,GAAG,EAAE,CAACiB,KAAK,CAAC,CAAC,CAACG,IAAI,CACnF3C,sDAAM,CAAEkD,YAA0B,IAAKA,YAAY,CAACV,KAAK,CAACf,IAAI,CAAC,CAACgB,UAAU,KAAK/B,qEAAe,CAAC4D,GAAG,CAAC,EACnGnE,qDAAI,CAAC,CAAC,CAAC,EACPF,mDAAG,CAAC,MAAM,IAAI,CAAC,CAChB;IACD,IAAI,CAACsC,eAAe,CAAChB,GAAG,EAAEiB,KAAK,EAAE9B,qEAAe,CAAC4D,GAAG,CAAC;IACrD,OAAOD,OAAO;EAChB;EAEA;;;;;EAKAE,qBAAqBA,CAAChD,GAAW,EAAEiB,KAAmB;IACpD,MAAM6B,OAAO,GAAwB,IAAI,CAACf,wBAAwB,CAAC/B,GAAG,EAAE,CAACiB,KAAK,CAAC,CAAC,CAACG,IAAI,CACnF3C,sDAAM,CAAEkD,YAA0B,IAAKA,YAAY,CAACV,KAAK,CAACf,IAAI,CAAC,CAACgB,UAAU,KAAK/B,qEAAe,CAAC8D,MAAM,CAAC,EACtGrE,qDAAI,CAAC,CAAC,CAAC,EACPF,mDAAG,CAAC,MAAM,IAAI,CAAC,CAChB;IACD,IAAI,CAACsC,eAAe,CAAChB,GAAG,EAAEiB,KAAK,EAAE9B,qEAAe,CAAC8D,MAAM,CAAC;IACxD,OAAOH,OAAO;EAChB;EAEA;;;;;EAKAI,qBAAqBA,CAAClD,GAAW,EAAEiB,KAAmB;IACpD,IAAI,CAACD,eAAe,CAAChB,GAAG,EAAEiB,KAAK,EAAE9B,qEAAe,CAACgE,MAAM,CAAC;EAC1D;EAEA;;;;;;;;EAQAC,yBAAyBA,CAACpD,GAAW,EAAEqD,YAAoB,EAAEC,IAAY;IAEvE,OAAO,IAAI,CAAC7C,KAAK,CACdW,IAAI,CACH9C,mDAAM,CAAC8B,6BAA6B,CAACJ,GAAG,EAAEqD,YAAY,CAAC,CAAC,EACxD3E,mDAAG,CAAE6E,qBAAqB,IAAKA,qBAAqB,IAAIA,qBAAqB,CAACD,IAAI,CAAC,CAAC,CACrF;EACL;EAEA;;;;;;;EAOAE,0BAA0BA,CAACxD,GAAW,EAAEqD,YAAoB,EAAEnD,IAAY,EAAEuD,QAAiB;IAC3F,IAAI,CAAChD,KAAK,CAACM,QAAQ,CAAC,IAAItB,gFAA2B,CAACO,GAAG,EAAEqD,YAAY,EAAEnD,IAAI,EAAEuD,QAAQ,CAAC,CAAC;EACzF;EAEA;;;;;;EAMAC,sBAAsBA,CAAC1D,GAAW,EAAEE,IAAY,EAAEqC,QAAiB;IACjE,IAAI,CAAC9B,KAAK,CAACM,QAAQ,CAAC,IAAIrB,iFAA4B,CAACM,GAAG,EAAEE,IAAI,EAAEqC,QAAQ,CAAC,CAAC;EAC5E;EAEA;;;;;;EAMAoB,mBAAmBA,CAAC3D,GAAW,EAAEE,IAAY,EAAE0D,KAAc;IAC3D,IAAI,CAACnD,KAAK,CAACM,QAAQ,CAAC,IAAIpB,8EAAyB,CAACK,GAAG,EAAEE,IAAI,EAAE0D,KAAK,CAAC,CAAC;EACtE;EAEA;;;;;EAKAC,mBAAmBA,CAAC7D,GAAW,EAAE8D,gBAA+B;IAC9D,IAAI,CAACrD,KAAK,CAACM,QAAQ,CAAC,IAAI1B,+EAA0B,CAACW,GAAG,EAAE8D,gBAAgB,CAAC,CAAC;EAC5E;EAEA;;;;;EAKAC,sBAAsBA,CAAC/D,GAAW,EAAE8D,gBAA+B;IACjE,IAAI,CAACrD,KAAK,CAACM,QAAQ,CAAC,IAAI1B,+EAA0B,CAACW,GAAG,EAAE8D,gBAAgB,EAAE,IAAI,CAAC,CAAC;EAClF;EAEA;;;;EAIAE,qBAAqBA,CAAChE,GAAW;IAC/B,IAAI,CAACS,KAAK,CAACM,QAAQ,CAAC,IAAIxB,iFAA4B,CAACS,GAAG,CAAC,CAAC;EAC5D;EAEA;;;;;EAKAiE,uBAAuBA,CAACjE,GAAW,EAAEE,IAAI;IACvC,IAAI,CAACO,KAAK,CAACM,QAAQ,CAAC,IAAIvB,4EAAuB,CAACQ,GAAG,EAAEE,IAAI,CAAC,CAAC;EAC7D;EAEA;;;;;;EAMAgE,gBAAgBA,CAAClE,GAAW,EAAEuB,aAA6B;IACzD,MAAME,aAAa,GAAG,IAAI,CAACN,cAAc,CAACnB,GAAG,CAAC;IAC9C,OAAOyB,aAAa,CAACL,IAAI,CAAC1C,mDAAG,CAAEgD,WAAW,IAAI;MAC5C,MAAMd,MAAM,GAAmB,EAAE;MACjCgB,MAAM,CAACC,IAAI,CAACH,WAAW,CAACvB,WAAW,CAAC,CAAC2B,OAAO,CAAE5B,IAAI,IAAI;QACpD,MAAMgC,WAAW,GAAGR,WAAW,CAACC,YAAY,CAACzB,IAAI,CAAC;QAClD,IAAIrB,8DAAU,CAACqD,WAAW,CAAC,IAAIA,WAAW,CAAChB,UAAU,KAAK/B,qEAAe,CAAC8D,MAAM,EAAE;UAChF,IAAIhC,KAAK;UACT,IAAIhC,8DAAU,CAACiD,WAAW,CAAC,EAAE;YAC3BjB,KAAK,GAAGiB,WAAW,CAACjB,KAAK;UAC3B,CAAC,MAAM;YACLA,KAAK,GAAGM,aAAa,CAAC4C,IAAI,CAAElC,MAAoB,IAAKA,MAAM,CAAC/B,IAAI,KAAKA,IAAI,CAAC;UAC5E;UACAU,MAAM,CAACwD,IAAI,CAACnD,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;MACF,OAAOL,MAAM;IACf,CAAC,CAAC,CAAC;EACL;EAEA;;;;EAIAyD,UAAUA,CAACrE,GAAW;IACpB,OAAO,IAAI,CAACmB,cAAc,CAACnB,GAAG,CAAC,CAACoB,IAAI,CAAC1C,mDAAG,CAAEgD,WAAW,IAAK5C,4DAAQ,CAAC4C,WAAW,CAAC,IAAIzC,8DAAU,CAACyC,WAAW,CAACC,YAAY,CAAC,CAAC,CAAC;EAC3H;EAEA;;;;EAIA2C,cAAcA,CAACtE,GAAW;IACxB,OAAO,IAAI,CAACqE,UAAU,CAACrE,GAAG,GAAGJ,8EAAyB,CAAC;EACzD;EAEA;;;;EAIA2E,eAAeA,CAACvE,GAAW;IACzB,OAAO,IAAI,CAACmB,cAAc,CAACnB,GAAG,CAAC,CAACoB,IAAI,CAAC1C,mDAAG,CAAEgE,KAAyB,IAAKA,KAAK,CAAC7B,YAAY,CAAC,CAAC;EAC9F;EAEA;;;;;;EAMA2D,WAAWA,CAACxE,GAAW;IACrB,OAAO,IAAI,CAACmB,cAAc,CAACnB,GAAG,CAAC,CAACoB,IAAI,CAClC1C,mDAAG,CAAEgE,KAAK,IAAI;MACZ,IAAI+B,KAAK,GAAG,EAAE;MACd,IAAI3F,4DAAQ,CAAC4D,KAAK,CAAC5B,qBAAqB,CAAC,EAAE;QACzC2D,KAAK,GAAG,IAAI,CAAC/D,QAAQ,CAACgE,GAAG,CAAChC,KAAK,CAAC5B,qBAAqB,CAAC,CAAC6D,6BAA6B,CAACjC,KAAK,CAACf,YAAY,CAAC;MAC1G;MACA,OAAO8C,KAAK;IACd,CAAC,CAAC,CACH;EACH;;;uBArUWlE,oBAAoB,EAAAqE,uDAAA,CAAAE,8CAAA,GAAAF,uDAAA,CAAAA,oDAAA;IAAA;EAAA;;;aAApBrE,oBAAoB;MAAAwE,OAAA,EAApBxE,oBAAoB,CAAAyE,IAAA;MAAAC,UAAA,EADP;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEP;AAOF;AAMC;AACiB;AAIZ;AAKQ;AAE8C;AACJ;AAM7C;AACiD;AAMrD;AAC2B;AAC4B;;;;;;;;;;;ICtCjEL,4DAAA,gBAAkD;IAC9CA,oDAAA,GACJ;;IAAAA,0DAAA,EAAS;;;;IAF0BA,wDAAA,UAAA2B,OAAA,CAAc;IAC7C3B,uDAAA,EACJ;IADIA,gEAAA,MAAAA,yDAAA,+BAAA2B,OAAA,kBACJ;;;;;IAIJ3B,4DADJ,aAAuD,gBACN;IAAAA,oDAAA,GAA4C;;IAAAA,0DAAA,EAAQ;IACjGA,uDAAA,gBAAiE;IACjEA,4DAAA,gBAA0B;IAAAA,oDAAA,GAA2C;;IACzEA,0DADyE,EAAQ,EAC3E;;;IAH2CA,uDAAA,GAA4C;IAA5CA,+DAAA,CAAAA,yDAAA,qCAA4C;IAE/DA,uDAAA,GAA2C;IAA3CA,+DAAA,CAAAA,yDAAA,oCAA2C;;;ADgC9E,MAAMiC,YAAY,GAAG,6CAA6C;AAEzE;;;AASM,MAAOC,qBAAqB;EAWhCtG,YACUuG,iBAAoC,EACpCC,wBAAkD,EAClDC,oBAA0C,EAC1CC,gBAAkC,EAClCC,aAA4B,EAC5BC,MAAc,EACdC,GAAsB;IANtB,KAAAN,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,wBAAwB,GAAxBA,wBAAwB;IACxB,KAAAC,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,GAAG,GAAHA,GAAG;IATb,KAAAC,IAAI,GAAmB,EAAE;EAWzB;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACD,IAAI,CAACxF,OAAO,CAAE0F,GAAiB,IAAKA,GAAG,CAACC,WAAW,EAAE,CAAC;EAC7D;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,IAAI,GAAG,IAAInC,4DAAgB,CAAC;MAC/BoC,IAAI,EAAE,IAAIrC,8DAAkB,CAAC,EAAE,CAAC;MAChCsC,MAAM,EAAE,IAAItC,8DAAkB,CAAC,EAAE;KAClC,CAAC;IAEF,IAAI,CAACuC,MAAM,GAAG,IAAI,CAACd,wBAAwB,CAACe,kBAAkB,CAAClB,YAAY,CAAC;IAC5E,IAAI,CAACS,IAAI,CAAClD,IAAI,CAAC,IAAI,CAAC0D,MAAM,CAAC1G,IAAI,CAC7B2E,0FAAkC,EAAE,CACrC,CAACiC,SAAS,CAAEC,gBAAuC,IAAI;MACtD,IAAI,CAACC,KAAK,GAAGD,gBAAgB,CAACtF,MAAM,CACjClE,MAAM,CAAE0J,KAAK,IAAKlJ,8DAAU,CAACkJ,KAAK,CAAC,IAAIA,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAC3D1J,GAAG,CAAEyJ,KAAK,IAAKA,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE,CAAC;MAC7C,IAAI,CAACX,IAAI,CAACjD,GAAG,CAAC,MAAM,CAAC,CAAC6D,UAAU,CAAC,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/C,IAAI,CAACb,GAAG,CAACmB,aAAa,EAAE;IAC1B,CAAC,CAAC,CAAC;EACL;EAEA;;;EAGAC,cAAcA,CAAA;IACZ,OAAO3J,4DAAQ,CAAC,IAAI,CAAC4J,SAAS,CAAC;EACjC;EAEA;;;;EAIAC,MAAMA,CAAA;IACJ,MAAMC,QAAQ,GAAG,IAAI,CAACjB,IAAI,CAACjD,GAAG,CAAC,MAAM,CAAC,CAACyD,KAAK;IAC5C,IAAIU,OAAkC;IACtC,IAAI,IAAI,CAACJ,cAAc,EAAE,EAAE;MACzBI,OAAO,GAAG,IAAI,CAAC1B,aAAa,CAAC2B,eAAe,CAAC,IAAI,CAACJ,SAAS,CAAC,CAACtH,IAAI,CAC/D1C,mDAAG,CAAEmJ,MAAqB,IAAI;QAC5B,IAAI7I,2DAAO,CAAC6I,MAAM,CAAC,EAAE;UACnB,IAAI,CAACZ,oBAAoB,CAAC8B,KAAK,CAAC,IAAI,CAAC7B,gBAAgB,CAACxC,GAAG,CAAC,iCAAiC,CAAC,EAC1F,IAAI,CAACwC,gBAAgB,CAACxC,GAAG,CAAC,2CAA2C,CAAC,CAAC;QAC3E;QACA,OAAOmD,MAAM;MACf,CAAC,CAAC,CACH;IACH,CAAC,MAAM;MACLgB,OAAO,GAAG,IAAI,CAAC1B,aAAa,CAAC2B,eAAe,CAAC,IAAI,CAACnB,IAAI,CAACjD,GAAG,CAAC,QAAQ,CAAC,CAACyD,KAAK,CAAC,CAAC/G,IAAI,CAC9E1C,mDAAG,CAAEmJ,MAAqB,IAAK7I,2DAAO,CAAC6I,MAAM,CAAC,GAAG,KAAK,GAAGA,MAAM,CAAC,CACjE;IACH;IAEA,IAAI,CAACP,IAAI,CAAClD,IAAI,CAACyE,OAAO,CAACb,SAAS,CAAEH,MAAc,IAAI;MAClD,IAAI/I,4DAAQ,CAAC+I,MAAM,CAAC,EAAE;QACpB,IAAI,CAACP,IAAI,CAAClD,IAAI,CAAC,IAAI,CAAC2C,iBAAiB,CAACiC,MAAM,CAAC,QAAQ,EAAE,CACrD;UAAEC,IAAI,EAAE,IAAI;UAAEd,KAAK,EAAES;QAAQ,CAAE,EAC/B;UAAEK,IAAI,EAAE,IAAI;UAAEd,KAAK,EAAEN;QAAM,CAAE,CAC9B,EAAE,EAAE,CAAC,CAACzG,IAAI,CACT0E,mFAA2B,EAAE,CAC9B,CAACkC,SAAS,CAAEkB,EAAuB,IAAI;UACtC,IAAIA,EAAE,CAACC,YAAY,EAAE;YACnB,IAAI,CAAClC,oBAAoB,CAACmC,OAAO,CAAC,IAAI,CAAClC,gBAAgB,CAACxC,GAAG,CAAC,mCAAmC,CAAC,EAC9F,IAAI,CAACwC,gBAAgB,CAACxC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YACpE,KAAK,IAAI,CAAC0C,MAAM,CAACiC,aAAa,CAACrD,+FAAqB,CAACkD,EAAE,CAACI,OAAO,CAACC,SAAS,CAAC,CAAC;UAC7E,CAAC,MAAM;YACL,IAAI,CAACtC,oBAAoB,CAAC8B,KAAK,CAAC,IAAI,CAAC7B,gBAAgB,CAACxC,GAAG,CAAC,iCAAiC,CAAC,EAC1F,IAAI,CAACwC,gBAAgB,CAACxC,GAAG,CAAC,oCAAoC,CAAC,CAAC;UACpE;QACF,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC,CAAC;EACL;;;uBA7FWoC,qBAAqB,EAAAlC,+DAAA,CAAAE,uFAAA,GAAAF,+DAAA,CAAA6E,2FAAA,GAAA7E,+DAAA,CAAA8E,6FAAA,GAAA9E,+DAAA,CAAA+E,kEAAA,GAAA/E,+DAAA,CAAAgF,iEAAA,GAAAhF,+DAAA,CAAAiF,oDAAA,GAAAjF,+DAAA,CAAAA,4DAAA;IAAA;EAAA;;;YAArBkC,qBAAqB;MAAAgD,SAAA;MAAAC,MAAA;QAAArB,SAAA;MAAA;MAAAsB,UAAA;MAAAC,QAAA,GAAArF,iEAAA;MAAAuF,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCzDlC5F,4DAAA,cAA+C;UAAtBA,wDAAA,sBAAA+F,wDAAA;YAAA,OAAYF,GAAA,CAAA9B,MAAA,EAAQ;UAAA,EAAC;UAI9B/D,4DAHZ,aAAwB,aACE,aACW,eACkB;UAAAA,oDAAA,GAAiD;;UAAAA,0DAAA,EAAQ;UACpGA,4DAAA,gBAA8D;UAC1DA,wDAAA,IAAAiG,uCAAA,oBAAkD;UAI1DjG,0DADI,EAAS,EACP;UACNA,wDAAA,IAAAkG,oCAAA,iBAAuD;UAK3DlG,0DAAA,EAAM;UACNA,4DAAA,iBAA0D;UAAAA,oDAAA,IAAsC;;UAExGA,0DAFwG,EAAS,EACvG,EACH;;;UAnBDA,wDAAA,cAAA6F,GAAA,CAAA9C,IAAA,CAAkB;UAImC/C,uDAAA,GAAiD;UAAjDA,+DAAA,CAAAA,yDAAA,0CAAiD;UAE/DA,uDAAA,GAAQ;UAARA,wDAAA,YAAA6F,GAAA,CAAAvC,KAAA,CAAQ;UAKnCtD,uDAAA,EAAuB;UAAvBA,wDAAA,UAAA6F,GAAA,CAAAhC,cAAA,GAAuB;UAMyB7D,uDAAA,GAAsC;UAAtCA,+DAAA,CAAAA,yDAAA,gCAAsC;;;qBDsC5FS,uDAAW,EAAA0F,4DAAA,EAAAA,0DAAA,EAAAA,sEAAA,EAAAA,gEAAA,EAAAA,sEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAAEzF,+DAAmB,EAAAyF,8DAAA,EAAAA,2DAAA,EAAE7F,mDAAK,EAAEC,kDAAI,EAAEO,iEAAe,EAAAiE,+DAAA;MAAA+B,aAAA;IAAA;EAAA;;;;;;;;;;;;;;;AEnD1E;;;AAGM,MAAOC,kBAAkB;;;;;;;;;;;;;;;;;;;;ACFV;AAEgB;AAGI;AAQR;;;AAOjC,MAAMO,6BAA6B,GAAIpM,KAA+B,IAAKA,KAAK,CAACqM,eAAe;AAChG,MAAMC,gCAAgC,GAAItM,KAAe,IAAKA,KAAK,CAACqM,eAAe;AAEnF;;;AAIM,MAAOE,mBAAmB;EAE9B7L,YACUC,KAAsC,EACtC6L,QAAyB;IADzB,KAAA7L,KAAK,GAALA,KAAK;IACL,KAAA6L,QAAQ,GAARA,QAAQ;EAElB;EAEA;;;;;;EAMAC,WAAWA,CAACC,GAAW,EAAEC,EAAU;IACjC,OAAO,IAAI,CAAChM,KAAK,CAACnC,MAAM,CAACoO,2BAA2B,CAACF,GAAG,EAAEC,EAAE,CAAC,CAAC,CAACrL,IAAI,CACjE1C,mDAAG,CAAEuD,MAA4B,IAAI;MACnC,IAAIA,MAAM,EAAE;QACV,OAAOA,MAAM,CAAC0K,OAAO;MACvB,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAC,CAAC,CACH;EACH;EAEA;;;;EAIAC,cAAcA,CAACJ,GAAW;IACxB,OAAO,IAAI,CAACF,QAAQ,CAAChO,MAAM,CAAC8N,gCAAgC,CAAC,CAAChL,IAAI,CAChE1C,mDAAG,CAAEoB,KAA+B,IAAI;MACtC,IAAIhB,qDAAQ,CAACgB,KAAK,CAAC0M,GAAG,CAAC,CAAC,EAAE;QACxB,OAAO5K,MAAM,CAACC,IAAI,CAAC/B,KAAK,CAAC0M,GAAG,CAAC,CAAC,CAAC/N,MAAM,CAAEgO,EAAE,IAAK3M,KAAK,CAAC0M,GAAG,CAAC,CAACC,EAAE,CAAC,CAACE,OAAO,CAAC;MACvE,CAAC,MAAM;QACL,OAAO,EAAE;MACX;IACF,CAAC,CAAC,CACH;EACH;EAEA;;;;;EAKOE,aAAaA,CAACL,GAAW,EAAEC,EAAU;IAC1C,IAAI,CAAChM,KAAK,CAACM,QAAQ,CAAC,IAAI+K,sFAAkC,CAACU,GAAG,EAAEC,EAAE,CAAC,CAAC;EACtE;EAEA;;;;;EAKOK,eAAeA,CAACN,GAAW,EAAEC,EAAU;IAC5C,IAAI,CAAChM,KAAK,CAACM,QAAQ,CAAC,IAAI8K,wFAAoC,CAACW,GAAG,EAAEC,EAAE,CAAC,CAAC;EACxE;EAEA;;;;;EAKOnO,MAAMA,CAACkO,GAAW,EAAEC,EAAU;IACnC,IAAI,CAAChM,KAAK,CAACM,QAAQ,CAAC,IAAIiL,+EAA2B,CAACQ,GAAG,EAAEC,EAAE,CAAC,CAAC;EAC/D;EAEA;;;;;EAKOM,QAAQA,CAACP,GAAW,EAAEC,EAAU;IACrC,IAAI,CAAChM,KAAK,CAACM,QAAQ,CAAC,IAAI6K,iFAA6B,CAACY,GAAG,EAAEC,EAAE,CAAC,CAAC;EACjE;EAEA;;;;;EAKOO,MAAMA,CAACR,GAAW,EAAEC,EAAU;IACnC,IAAI,CAAChM,KAAK,CAACM,QAAQ,CAAC,IAAIkL,+EAA2B,CAACO,GAAG,EAAEC,EAAE,CAAC,CAAC;EAC/D;EAEA;;;;EAIOQ,KAAKA,CAACT,GAAY;IACvB,IAAI,CAAC/L,KAAK,CAACM,QAAQ,CAAC,IAAIgL,8EAA0B,CAACS,GAAG,EAAE,IAAI,CAAC,CAAC;EAChE;;;uBA7FWH,mBAAmB,EAAAzH,sDAAA,CAAAE,8CAAA,GAAAF,sDAAA,CAAAE,8CAAA;IAAA;EAAA;;;aAAnBuH,mBAAmB;MAAAtH,OAAA,EAAnBsH,mBAAmB,CAAArH,IAAA;MAAAC,UAAA,EADN;IAAM;EAAA;;AAkGhC,SAASyH,2BAA2BA,CAACF,GAAW,EAAEC,EAAU;EAC1D,OAAOS,gBAAgB,CAAuBV,GAAG,EAAEC,EAAE,CAAC;AACxD;AAEM,SAAUS,gBAAgBA,CAAIV,GAAW,EAAEC,EAAU;EACzD,OAAOpO,2DAAc,CAAC6N,6BAA6B,EAAGpM,KAA4B,IAAI;IACpF,IAAIhB,qDAAQ,CAACgB,KAAK,CAAC,IAAIhB,qDAAQ,CAACgB,KAAK,CAAC0M,GAAG,CAAC,CAAC,EAAE;MAC3C,OAAO1M,KAAK,CAAC0M,GAAG,CAAC,CAACC,EAAE,CAAC;IACvB,CAAC,MAAM;MACL,OAAOtK,SAAS;IAClB;EACF,CAAC,CAAC;AACJ;;;;;;;;;;;;;;;;;;;;;;;;ACtIuB;AAIT;AAIU;AAEoD;AACA;AACmC;AAC/B;AAIiB;AAClC;;;;;AAE/D;;;AAOM,MAAgByL,qBAAqB;EAuEzCpN,YACYqN,mBAAwC,EACxCC,oBAA8C,EACjDC,cAA8B;IAF3B,KAAAF,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,oBAAoB,GAApBA,oBAAoB;IACvB,KAAAC,cAAc,GAAdA,cAAc;IA5BvB;;;IAIA,KAAAC,MAAM,GAAG,IAAIb,uDAAY,EAAO;IAEhC;;;;IAKA,KAAAc,OAAO,GAA2B,IAAId,uDAAY,EAAY;IAE9D;;;;IAKA,KAAAe,aAAa,GAAG,KAAK;EAYrB;EAEAxG,QAAQA,CAAA;IACN,IAAI,CAACyG,YAAY,GAAG,IAAI,CAACN,mBAAmB,CAACjB,cAAc,CAAC,IAAI,CAACJ,GAAG,CAAC;EACvE;EAEAjF,WAAWA,CAAA;IACT,IAAI,CAACsG,mBAAmB,CAACZ,KAAK,CAAC,IAAI,CAACT,GAAG,CAAC;EAC1C;EAEA;;;;EAIAQ,MAAMA,CAACP,EAAU;IACf,IAAI,CAACoB,mBAAmB,CAACb,MAAM,CAAC,IAAI,CAACR,GAAG,EAAEC,EAAE,CAAC;EAC/C;EAEA;;;;;EAKAF,WAAWA,CAACE,EAAU;IACpB,OAAO,IAAI,CAACoB,mBAAmB,CAACtB,WAAW,CAAC,IAAI,CAACC,GAAG,EAAEC,EAAE,CAAC;EAC3D;EAEA;;;EAGA2B,SAASA,CAAC9K,IAAkB;IAC1B,IAAI,CAAC,IAAI,CAAC+K,SAAS,EAAE;MACnB,OAAOhB,wCAAE,CAAC,IAAI,CAAC;IACjB;IACA,OAAO,IAAI,CAACS,oBAAoB,CAACQ,YAAY,CAAC,IAAI,CAACD,SAAS,EAAE/K,IAAI,CAACiL,IAAI,CAAC,CAACnN,IAAI,CAACkM,yDAAS,CAAC,KAAK,CAAC,CAAC;EACjG;EAEA;;;;EAIAkB,eAAeA,CAAA;IACb,IAAI,CAACL,YAAY,CAAC/M,IAAI,CACpBxC,oDAAI,CAAC,CAAC,CAAC,CACR,CAACoJ,SAAS,CAAEyG,GAAa,IAAI;MAC5B,IAAI,CAACR,OAAO,CAACS,IAAI,CAACD,GAAG,CAAC;MACtB,IAAI,CAACZ,mBAAmB,CAACZ,KAAK,CAAC,IAAI,CAACT,GAAG,CAAC;IAC1C,CAAC,CAAC;EACJ;EAEA;;;EAGAmC,QAAQA,CAAA;IACN,IAAI,CAACX,MAAM,CAACU,IAAI,EAAE;EACpB;;;uBAnIoBd,qBAAqB,EAAAhJ,+DAAA,CAAAE,uEAAA,GAAAF,+DAAA,CAAA6E,iHAAA,GAAA7E,+DAAA,CAAA8E,8EAAA;IAAA;EAAA;;;YAArBkE,qBAAqB;MAAA9D,SAAA;MAAAC,MAAA;QAAAyC,GAAA;QAAAoC,MAAA;QAAAC,iBAAA;QAAAC,WAAA;QAAAC,aAAA;QAAAV,SAAA;QAAAW,YAAA;QAAAd,aAAA;MAAA;MAAAe,OAAA;QAAAjB,MAAA;QAAAC,OAAA;MAAA;MAAA9D,KAAA;MAAAC,IAAA;MAAAE,QAAA,WAAA4E,+BAAA1E,EAAA,EAAAC,GAAA;MAAAiB,aAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;AC9BF;AACc;AAGsC;AACf;;;;;;AAE9E;;;AAQM,MAAOyD,0BAA0B;EAcrC3O,YACS4O,oBAA0C,EAC1CnI,oBAA0C,EAC1CC,gBAAkC,EAClCE,MAAc;IAHd,KAAAgI,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAnI,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAE,MAAM,GAANA,MAAM;IAVR,KAAAiI,mBAAmB,GAAG,gCAAgC;EAa7D;EAEA3H,QAAQA,CAAA;IACN,IAAI,CAAC1H,GAAG,GAAG,IAAI,CAACoH,MAAM,CAACpH,GAAG,CAACqI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxC,IAAI,CAACiH,WAAW,GAAG,IAAI,CAACC,UAAU,EAAE;IACpC,IAAI,CAACC,eAAe,GAAG,IAAI,CAAClL,cAAc,EAAE;EAC9C;EAEA;;;;EAIAmL,OAAOA,CAAA;IACL,MAAM3L,gBAAgB,GAAG,IAAI,CAACmD,oBAAoB,CAACyI,IAAI,CAAC,IAAI,CAACC,oBAAoB,CAAC,WAAW,CAAC,EAAE,IAAI,CAACC,sBAAsB,CAAC,WAAW,CAAC,EAAE;MAAEC,OAAO,EAAE,IAAI,CAACC;IAAc,CAAE,CAAC;IAC3K,IAAI,CAACV,oBAAoB,CAACvL,mBAAmB,CAAC,IAAI,CAAC7D,GAAG,EAAE8D,gBAAgB,CAAC;EAC3E;EAEA;;;EAGAiM,SAASA,CAAA;IACP,IAAI,CAACX,oBAAoB,CAACpL,qBAAqB,CAAC,IAAI,CAAChE,GAAG,CAAC;EAC3D;EAEA;;;EAGAsE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAC8K,oBAAoB,CAAC9K,cAAc,CAAC,IAAI,CAACtE,GAAG,CAAC;EAC3D;EAEA;;;EAGAuP,UAAUA,CAAA;IACR,OAAO,IAAI,CAACH,oBAAoB,CAAC/K,UAAU,CAAC,IAAI,CAACrE,GAAG,CAAC;EACvD;EAEA;;;;EAIA2P,oBAAoBA,CAACnD,GAAW;IAC9B,OAAO,IAAI,CAACtF,gBAAgB,CAAC8I,OAAO,CAAC,IAAI,CAACX,mBAAmB,GAAG7C,GAAG,GAAG,QAAQ,CAAC;EACjF;EAEA;;;;EAIAoD,sBAAsBA,CAACpD,GAAW;IAChC,OAAO,IAAI,CAACtF,gBAAgB,CAAC8I,OAAO,CAAC,IAAI,CAACX,mBAAmB,GAAG7C,GAAG,GAAG,UAAU,CAAC;EAEnF;;;uBA1EW2C,0BAA0B,EAAAvK,+DAAA,CAAAE,kGAAA,GAAAF,+DAAA,CAAA6E,sFAAA,GAAA7E,+DAAA,CAAA8E,iEAAA,GAAA9E,+DAAA,CAAA+E,mDAAA;IAAA;EAAA;;;YAA1BwF,0BAA0B;MAAArF,SAAA;MAAAE,UAAA;MAAAC,QAAA,GAAArF,iEAAA;MAAAuF,KAAA;MAAAC,IAAA;MAAAE,QAAA,WAAA2F,oCAAAzF,EAAA,EAAAC,GAAA;MAAAiB,aAAA;IAAA;EAAA","sources":["./src/app/core/data/object-updates/object-updates.service.ts","./src/app/curation-form/curation-form.component.ts","./src/app/curation-form/curation-form.component.html","./src/app/shared/object-select/object-select.model.ts","./src/app/shared/object-select/object-select.service.ts","./src/app/shared/object-select/object-select/object-select.component.ts","./src/app/shared/trackable/abstract-trackable.component.ts"],"sourcesContent":["import {\n  Injectable,\n  Injector,\n} from '@angular/core';\nimport {\n  createSelector,\n  MemoizedSelector,\n  select,\n  Store,\n} from '@ngrx/store';\nimport { Operation } from 'fast-json-patch';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport {\n  hasNoValue,\n  hasValue,\n  hasValueOperator,\n  isEmpty,\n  isNotEmpty,\n} from '../../../shared/empty.util';\nimport { INotification } from '../../../shared/notifications/models/notification.model';\nimport { coreSelector } from '../../core.selectors';\nimport { CoreState } from '../../core-state.model';\nimport { GenericConstructor } from '../../shared/generic-constructor';\nimport { FieldChangeType } from './field-change-type.model';\nimport { FieldUpdates } from './field-updates.model';\nimport { Identifiable } from './identifiable.model';\nimport {\n  AddFieldUpdateAction,\n  DiscardObjectUpdatesAction,\n  InitializeFieldsAction,\n  ReinstateObjectUpdatesAction,\n  RemoveFieldUpdateAction,\n  SelectVirtualMetadataAction,\n  SetEditableFieldUpdateAction,\n  SetValidFieldUpdateAction,\n} from './object-updates.actions';\nimport {\n  FieldState,\n  OBJECT_UPDATES_TRASH_PATH,\n  ObjectUpdatesEntry,\n  ObjectUpdatesState,\n  VirtualMetadataSource,\n} from './object-updates.reducer';\nimport { PatchOperationService } from './patch-operation-service/patch-operation.service';\n\nfunction objectUpdatesStateSelector(): MemoizedSelector<CoreState, ObjectUpdatesState> {\n  return createSelector(coreSelector, (state: CoreState) => state['cache/object-updates']);\n}\n\nfunction filterByUrlObjectUpdatesStateSelector(url: string): MemoizedSelector<CoreState, ObjectUpdatesEntry> {\n  return createSelector(objectUpdatesStateSelector(), (state: ObjectUpdatesState) => state[url]);\n}\n\nfunction filterByUrlAndUUIDFieldStateSelector(url: string, uuid: string): MemoizedSelector<CoreState, FieldState> {\n  return createSelector(filterByUrlObjectUpdatesStateSelector(url), (state: ObjectUpdatesEntry) => state.fieldStates[uuid]);\n}\n\nfunction virtualMetadataSourceSelector(url: string, source: string): MemoizedSelector<CoreState, VirtualMetadataSource> {\n  return createSelector(filterByUrlObjectUpdatesStateSelector(url), (state: ObjectUpdatesEntry) => state.virtualMetadataSources[source]);\n}\n\n/**\n * Service that dispatches and reads from the ObjectUpdates' state in the store\n */\n@Injectable({ providedIn: 'root' })\nexport class ObjectUpdatesService {\n  constructor(private store: Store<CoreState>,\n              private injector: Injector) {\n  }\n\n  /**\n   * Method to dispatch an InitializeFieldsAction to the store\n   * @param url The page's URL for which the changes are being mapped\n   * @param fields The initial fields for the page's object\n   * @param lastModified The date the object was last modified\n   * @param patchOperationService A {@link PatchOperationService} used for creating a patch\n   */\n  initialize(url, fields: Identifiable[], lastModified: Date, patchOperationService?: GenericConstructor<PatchOperationService>): void {\n    this.store.dispatch(new InitializeFieldsAction(url, fields, lastModified, patchOperationService));\n  }\n\n  /**\n   * Method to dispatch an AddFieldUpdateAction to the store\n   * @param url The page's URL for which the changes are saved\n   * @param field An updated field for the page's object\n   * @param changeType The last type of change applied to this field\n   */\n  private saveFieldUpdate(url: string, field: Identifiable, changeType: FieldChangeType) {\n    this.store.dispatch(new AddFieldUpdateAction(url, field, changeType));\n  }\n\n  /**\n   * Request the ObjectUpdatesEntry state for a specific URL\n   * @param url The URL to filter by\n   */\n  private getObjectEntry(url: string): Observable<ObjectUpdatesEntry> {\n    return this.store.pipe(select(filterByUrlObjectUpdatesStateSelector(url)));\n  }\n\n  /**\n   * Request the getFieldState state for a specific URL and UUID\n   * @param url The URL to filter by\n   * @param uuid The field's UUID to filter by\n   */\n  private getFieldState(url: string, uuid: string): Observable<FieldState> {\n    return this.store.pipe(select(filterByUrlAndUUIDFieldStateSelector(url, uuid)));\n  }\n\n  /**\n   * Method that combines the state's updates with the initial values (when there's no update) to create\n   * a FieldUpdates object\n   * @param url The URL of the page for which the FieldUpdates should be requested\n   * @param initialFields The initial values of the fields\n   * @param ignoreStates  Ignore the fieldStates to loop over the fieldUpdates instead\n   */\n  getFieldUpdates(url: string, initialFields: Identifiable[], ignoreStates?: boolean): Observable<FieldUpdates> {\n    const objectUpdates = this.getObjectEntry(url);\n    return objectUpdates.pipe(\n      switchMap((objectEntry) => {\n        const fieldUpdates: FieldUpdates = {};\n        if (hasValue(objectEntry)) {\n          Object.keys(ignoreStates ? objectEntry.fieldUpdates : objectEntry.fieldStates).forEach((uuid) => {\n            fieldUpdates[uuid] = objectEntry.fieldUpdates[uuid];\n          });\n        }\n        return this.getFieldUpdatesExclusive(url, initialFields).pipe(\n          map((fieldUpdatesExclusive) => {\n            Object.keys(fieldUpdatesExclusive).forEach((uuid) => {\n              fieldUpdates[uuid] = fieldUpdatesExclusive[uuid];\n            });\n            return fieldUpdates;\n          }),\n        );\n      }),\n    );\n  }\n\n  /**\n   * Method that combines the state's updates (excluding updates that aren't part of the initialFields) with\n   * the initial values (when there's no update) to create a FieldUpdates object\n   * @param url The URL of the page for which the FieldUpdates should be requested\n   * @param initialFields The initial values of the fields\n   */\n  getFieldUpdatesExclusive(url: string, initialFields: Identifiable[]): Observable<FieldUpdates> {\n    const objectUpdates = this.getObjectEntry(url);\n    return objectUpdates.pipe(\n      hasValueOperator(),\n      map((objectEntry) => {\n        const fieldUpdates: FieldUpdates = {};\n        for (const object of initialFields) {\n          let fieldUpdate = objectEntry.fieldUpdates[object.uuid];\n          if (isEmpty(fieldUpdate)) {\n            fieldUpdate = { field: object, changeType: undefined };\n          }\n          fieldUpdates[object.uuid] = fieldUpdate;\n        }\n        return fieldUpdates;\n      }));\n  }\n\n  /**\n   * Method to check if a specific field is currently editable in the store\n   * @param url The URL of the page on which the field resides\n   * @param uuid The UUID of the field\n   */\n  isEditable(url: string, uuid: string): Observable<boolean> {\n    const fieldState$ = this.getFieldState(url, uuid);\n    return fieldState$.pipe(\n      filter((fieldState) => hasValue(fieldState)),\n      map((fieldState) => fieldState.editable),\n      distinctUntilChanged(),\n    );\n  }\n\n  /**\n   * Method to check if a specific field is currently valid in the store\n   * @param url The URL of the page on which the field resides\n   * @param uuid The UUID of the field\n   */\n  isValid(url: string, uuid: string): Observable<boolean> {\n    const fieldState$ = this.getFieldState(url, uuid);\n    return fieldState$.pipe(\n      filter((fieldState) => hasValue(fieldState)),\n      map((fieldState) => fieldState.isValid),\n      distinctUntilChanged(),\n    );\n  }\n\n  /**\n   * Method to check if a specific page is currently valid in the store\n   * @param url The URL of the page\n   */\n  isValidPage(url: string): Observable<boolean> {\n    const objectUpdates = this.getObjectEntry(url);\n    return objectUpdates.pipe(\n      map((entry: ObjectUpdatesEntry) => {\n        return Object.values(entry.fieldStates).findIndex((state: FieldState) => !state.isValid) < 0;\n      }),\n      distinctUntilChanged(),\n    );\n  }\n\n  /**\n   * Calls the saveFieldUpdate method with FieldChangeType.ADD\n   * @param url The page's URL for which the changes are saved\n   * @param field An updated field for the page's object\n   */\n  saveAddFieldUpdate(url: string, field: Identifiable): Observable<boolean> {\n    const update$: Observable<boolean> = this.getFieldUpdatesExclusive(url, [field]).pipe(\n      filter((fieldUpdates: FieldUpdates) => fieldUpdates[field.uuid].changeType === FieldChangeType.ADD),\n      take(1),\n      map(() => true),\n    );\n    this.saveFieldUpdate(url, field, FieldChangeType.ADD);\n    return update$;\n  }\n\n  /**\n   * Calls the saveFieldUpdate method with FieldChangeType.REMOVE\n   * @param url The page's URL for which the changes are saved\n   * @param field An updated field for the page's object\n   */\n  saveRemoveFieldUpdate(url: string, field: Identifiable): Observable<boolean> {\n    const update$: Observable<boolean> = this.getFieldUpdatesExclusive(url, [field]).pipe(\n      filter((fieldUpdates: FieldUpdates) => fieldUpdates[field.uuid].changeType === FieldChangeType.REMOVE),\n      take(1),\n      map(() => true),\n    );\n    this.saveFieldUpdate(url, field, FieldChangeType.REMOVE);\n    return update$;\n  }\n\n  /**\n   * Calls the saveFieldUpdate method with FieldChangeType.UPDATE\n   * @param url The page's URL for which the changes are saved\n   * @param field An updated field for the page's object\n   */\n  saveChangeFieldUpdate(url: string, field: Identifiable) {\n    this.saveFieldUpdate(url, field, FieldChangeType.UPDATE);\n  }\n\n  /**\n   * Check whether the virtual metadata of a given item is selected to be saved as real metadata\n   * @param url           The URL of the page on which the field resides\n   * @param relationship  The id of the relationship for which to check whether the virtual metadata is selected to be\n   *                      saved as real metadata\n   * @param item          The id of the item for which to check whether the virtual metadata is selected to be\n   *                      saved as real metadata\n   */\n  isSelectedVirtualMetadata(url: string, relationship: string, item: string): Observable<boolean> {\n\n    return this.store\n      .pipe(\n        select(virtualMetadataSourceSelector(url, relationship)),\n        map((virtualMetadataSource) => virtualMetadataSource && virtualMetadataSource[item]),\n      );\n  }\n\n  /**\n   * Method to dispatch a SelectVirtualMetadataAction to the store\n   * @param url The page's URL for which the changes are saved\n   * @param relationship the relationship for which virtual metadata is selected\n   * @param uuid the selection identifier, can either be the item uuid or the relationship type uuid\n   * @param selected whether or not to select the virtual metadata to be saved\n   */\n  setSelectedVirtualMetadata(url: string, relationship: string, uuid: string, selected: boolean) {\n    this.store.dispatch(new SelectVirtualMetadataAction(url, relationship, uuid, selected));\n  }\n\n  /**\n   * Dispatches a SetEditableFieldUpdateAction to the store to set a field's editable state\n   * @param url The URL of the page on which the field resides\n   * @param uuid The UUID of the field that should be set\n   * @param editable The new value of editable in the store for this field\n   */\n  setEditableFieldUpdate(url: string, uuid: string, editable: boolean) {\n    this.store.dispatch(new SetEditableFieldUpdateAction(url, uuid, editable));\n  }\n\n  /**\n   * Dispatches a SetValidFieldUpdateAction to the store to set a field's isValid state\n   * @param url The URL of the page on which the field resides\n   * @param uuid The UUID of the field that should be set\n   * @param valid The new value of isValid in the store for this field\n   */\n  setValidFieldUpdate(url: string, uuid: string, valid: boolean) {\n    this.store.dispatch(new SetValidFieldUpdateAction(url, uuid, valid));\n  }\n\n  /**\n   * Method to dispatch an DiscardObjectUpdatesAction to the store\n   * @param url The page's URL for which the changes should be discarded\n   * @param undoNotification The notification which is should possibly be canceled\n   */\n  discardFieldUpdates(url: string, undoNotification: INotification) {\n    this.store.dispatch(new DiscardObjectUpdatesAction(url, undoNotification));\n  }\n\n  /**\n   * Method to dispatch a DiscardObjectUpdatesAction to the store with discardAll set to true\n   * @param url The page's URL for which the changes should be discarded\n   * @param undoNotification The notification which is should possibly be canceled\n   */\n  discardAllFieldUpdates(url: string, undoNotification: INotification) {\n    this.store.dispatch(new DiscardObjectUpdatesAction(url, undoNotification, true));\n  }\n\n  /**\n   * Method to dispatch an ReinstateObjectUpdatesAction to the store\n   * @param url The page's URL for which the changes should be reinstated\n   */\n  reinstateFieldUpdates(url: string) {\n    this.store.dispatch(new ReinstateObjectUpdatesAction(url));\n  }\n\n  /**\n   * Method to dispatch an RemoveFieldUpdateAction to the store\n   * @param url The page's URL for which the changes should be removed\n   * @param uuid The UUID of the field that should be set\n   */\n  removeSingleFieldUpdate(url: string, uuid) {\n    this.store.dispatch(new RemoveFieldUpdateAction(url, uuid));\n  }\n\n  /**\n   * Method that combines the state's updates with the initial values (when there's no update) to create\n   * a list of updates fields\n   * @param url The URL of the page for which the updated fields should be requested\n   * @param initialFields The initial values of the fields\n   */\n  getUpdatedFields(url: string, initialFields: Identifiable[]): Observable<Identifiable[]> {\n    const objectUpdates = this.getObjectEntry(url);\n    return objectUpdates.pipe(map((objectEntry) => {\n      const fields: Identifiable[] = [];\n      Object.keys(objectEntry.fieldStates).forEach((uuid) => {\n        const fieldUpdate = objectEntry.fieldUpdates[uuid];\n        if (hasNoValue(fieldUpdate) || fieldUpdate.changeType !== FieldChangeType.REMOVE) {\n          let field;\n          if (isNotEmpty(fieldUpdate)) {\n            field = fieldUpdate.field;\n          } else {\n            field = initialFields.find((object: Identifiable) => object.uuid === uuid);\n          }\n          fields.push(field);\n        }\n      });\n      return fields;\n    }));\n  }\n\n  /**\n   * Checks if the page currently has updates in the store or not\n   * @param url The page's url to check for in the store\n   */\n  hasUpdates(url: string): Observable<boolean> {\n    return this.getObjectEntry(url).pipe(map((objectEntry) => hasValue(objectEntry) && isNotEmpty(objectEntry.fieldUpdates)));\n  }\n\n  /**\n   * Checks if the page currently is reinstatable in the store or not\n   * @param url The page's url to check for in the store\n   */\n  isReinstatable(url: string): Observable<boolean> {\n    return this.hasUpdates(url + OBJECT_UPDATES_TRASH_PATH);\n  }\n\n  /**\n   * Request the current lastModified date stored for the updates in the store\n   * @param url The page's url to check for in the store\n   */\n  getLastModified(url: string): Observable<Date> {\n    return this.getObjectEntry(url).pipe(map((entry: ObjectUpdatesEntry) => entry.lastModified));\n  }\n\n  /**\n   * Create a patch from the current object-updates state\n   * The {@link ObjectUpdatesEntry} should contain a patchOperationService, in order to define how a patch should\n   * be created. If it doesn't, an empty patch will be returned.\n   * @param url The URL of the page for which the patch should be created\n   */\n  createPatch(url: string): Observable<Operation[]> {\n    return this.getObjectEntry(url).pipe(\n      map((entry) => {\n        let patch = [];\n        if (hasValue(entry.patchOperationService)) {\n          patch = this.injector.get(entry.patchOperationService).fieldUpdatesToPatchOperations(entry.fieldUpdates);\n        }\n        return patch;\n      }),\n    );\n  }\n}\n","import {\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n  UntypedFormControl,\n  UntypedFormGroup,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ConfigurationDataService } from '../core/data/configuration-data.service';\nimport { ScriptDataService } from '../core/data/processes/script-data.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ConfigurationProperty } from '../core/shared/configuration-property.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload,\n} from '../core/shared/operators';\nimport { getProcessDetailRoute } from '../process-page/process-page-routing.paths';\nimport { Process } from '../process-page/processes/process.model';\nimport {\n  hasValue,\n  isEmpty,\n  isNotEmpty,\n} from '../shared/empty.util';\nimport { HandleService } from '../shared/handle.service';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\n\nexport const CURATION_CFG = 'plugin.named.org.dspace.curate.CurationTask';\n\n/**\n * Component responsible for rendering the Curation Task form\n */\n@Component({\n  selector: 'ds-curation-form',\n  templateUrl: './curation-form.component.html',\n  standalone: true,\n  imports: [FormsModule, ReactiveFormsModule, NgFor, NgIf, TranslateModule],\n})\nexport class CurationFormComponent implements OnDestroy, OnInit {\n\n  config: Observable<RemoteData<ConfigurationProperty>>;\n  tasks: string[];\n  form: UntypedFormGroup;\n\n  @Input()\n  dsoHandle: string;\n\n  subs: Subscription[] = [];\n\n  constructor(\n    private scriptDataService: ScriptDataService,\n    private configurationDataService: ConfigurationDataService,\n    private notificationsService: NotificationsService,\n    private translateService: TranslateService,\n    private handleService: HandleService,\n    private router: Router,\n    private cdr: ChangeDetectorRef,\n  ) {\n  }\n\n  ngOnDestroy(): void {\n    this.subs.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    this.form = new UntypedFormGroup({\n      task: new UntypedFormControl(''),\n      handle: new UntypedFormControl(''),\n    });\n\n    this.config = this.configurationDataService.findByPropertyName(CURATION_CFG);\n    this.subs.push(this.config.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    ).subscribe((configProperties: ConfigurationProperty) => {\n      this.tasks = configProperties.values\n        .filter((value) => isNotEmpty(value) && value.includes('='))\n        .map((value) => value.split('=')[1].trim());\n      this.form.get('task').patchValue(this.tasks[0]);\n      this.cdr.detectChanges();\n    }));\n  }\n\n  /**\n   * Determines whether the inputted dsoHandle has a value\n   */\n  hasHandleValue() {\n    return hasValue(this.dsoHandle);\n  }\n\n  /**\n   * Submit the selected taskName and handle to the script data service to run the corresponding curation script\n   * Navigate to the process page on success\n   */\n  submit() {\n    const taskName = this.form.get('task').value;\n    let handle$: Observable<string | null>;\n    if (this.hasHandleValue()) {\n      handle$ = this.handleService.normalizeHandle(this.dsoHandle).pipe(\n        map((handle: string | null) => {\n          if (isEmpty(handle)) {\n            this.notificationsService.error(this.translateService.get('curation.form.submit.error.head'),\n              this.translateService.get('curation.form.submit.error.invalid-handle'));\n          }\n          return handle;\n        }),\n      );\n    } else {\n      handle$ = this.handleService.normalizeHandle(this.form.get('handle').value).pipe(\n        map((handle: string | null) => isEmpty(handle) ? 'all' : handle),\n      );\n    }\n\n    this.subs.push(handle$.subscribe((handle: string) => {\n      if (hasValue(handle)) {\n        this.subs.push(this.scriptDataService.invoke('curate', [\n          { name: '-t', value: taskName },\n          { name: '-i', value: handle },\n        ], []).pipe(\n          getFirstCompletedRemoteData(),\n        ).subscribe((rd: RemoteData<Process>) => {\n          if (rd.hasSucceeded) {\n            this.notificationsService.success(this.translateService.get('curation.form.submit.success.head'),\n              this.translateService.get('curation.form.submit.success.content'));\n            void this.router.navigateByUrl(getProcessDetailRoute(rd.payload.processId));\n          } else {\n            this.notificationsService.error(this.translateService.get('curation.form.submit.error.head'),\n              this.translateService.get('curation.form.submit.error.content'));\n          }\n        }));\n      }\n    }));\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <div class=\"form-group\">\n        <div class=\"row mb-2\">\n            <div class=\"col-12 col-sm-6\">\n                <label class=\"font-weight-bold\" for=\"task\">{{'curation.form.task-select.label' |translate }}</label>\n                <select id=\"task\" formControlName=\"task\" class=\"form-control\">\n                    <option *ngFor=\"let task of tasks\" [value]=\"task\">\n                        {{ 'curation-task.task.' + task + '.label' | translate }}\n                    </option>\n                </select>\n            </div>\n            <div *ngIf=\"!hasHandleValue()\" class=\"col-12 col-sm-6\">\n                <label class=\"font-weight-bold\" for=\"handle\">{{'curation.form.handle.label' |translate }}</label>\n                <input id=\"handle\" class=\"form-control\" formControlName=\"handle\">\n                <small class=\"text-muted\">{{'curation.form.handle.hint' |translate }}</small>\n            </div>\n        </div>\n        <button class=\"btn btn-default btn-primary\" type=\"submit\">{{'curation.form.submit' |translate }}</button>\n    </div>\n</form>\n","import { Observable } from 'rxjs';\n\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\n\n/**\n * Class used to collect all the data that that is used by the {@link ObjectSelectComponent} in the HTML.\n */\nexport class DSpaceObjectSelect<T extends DSpaceObject> {\n\n  /**\n   * The {@link DSpaceObject} to display\n   */\n  dso: T;\n\n  /**\n   * Whether the {@link DSpaceObject} can be selected\n   */\n  canSelect$: Observable<boolean>;\n\n  /**\n   * Whether the {@link DSpaceObject} is selected\n   */\n  selected$: Observable<boolean>;\n\n  /**\n   * The {@link DSpaceObject}'s route\n   */\n  route: string;\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createSelector,\n  MemoizedSelector,\n  Store,\n} from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AppState } from '../../app.reducer';\nimport { hasValue } from '../empty.util';\nimport {\n  ObjectSelectionDeselectAction,\n  ObjectSelectionInitialDeselectAction,\n  ObjectSelectionInitialSelectAction,\n  ObjectSelectionResetAction,\n  ObjectSelectionSelectAction,\n  ObjectSelectionSwitchAction,\n} from './object-select.actions';\nimport {\n  ObjectSelectionListState,\n  ObjectSelectionsState,\n  ObjectSelectionState,\n} from './object-select.reducer';\n\nconst objectSelectionsStateSelector = (state: ObjectSelectionListState) => state.objectSelection;\nconst objectSelectionListStateSelector = (state: AppState) => state.objectSelection;\n\n/**\n * Service that takes care of selecting and deselecting objects\n */\n@Injectable({ providedIn: 'root' })\nexport class ObjectSelectService {\n\n  constructor(\n    private store: Store<ObjectSelectionListState>,\n    private appStore: Store<AppState>,\n  ) {\n  }\n\n  /**\n   * Request the current selection of a given object in a given list\n   * @param {string} key The key of the list where the selection resides in\n   * @param {string} id The UUID of the object\n   * @returns {Observable<boolean>} Emits the current selection state of the given object, if it's unavailable, return false\n   */\n  getSelected(key: string, id: string): Observable<boolean> {\n    return this.store.select(selectionByKeyAndIdSelector(key, id)).pipe(\n      map((object: ObjectSelectionState) => {\n        if (object) {\n          return object.checked;\n        } else {\n          return false;\n        }\n      }),\n    );\n  }\n\n  /**\n   * Request the current selection of all objects within a specific list\n   * @returns {Observable<boolean>} Emits the current selection state of all objects\n   */\n  getAllSelected(key: string): Observable<string[]> {\n    return this.appStore.select(objectSelectionListStateSelector).pipe(\n      map((state: ObjectSelectionListState) => {\n        if (hasValue(state[key])) {\n          return Object.keys(state[key]).filter((id) => state[key][id].checked);\n        } else {\n          return [];\n        }\n      }),\n    );\n  }\n\n  /**\n   * Dispatches an initial select action to the store for a given object in a given list\n   * @param {string} key The key of the list to select the object in\n   * @param {string} id The UUID of the object to select\n   */\n  public initialSelect(key: string, id: string): void {\n    this.store.dispatch(new ObjectSelectionInitialSelectAction(key, id));\n  }\n\n  /**\n   * Dispatches an initial deselect action to the store for a given object in a given list\n   * @param {string} key The key of the list to deselect the object in\n   * @param {string} id The UUID of the object to deselect\n   */\n  public initialDeselect(key: string, id: string): void {\n    this.store.dispatch(new ObjectSelectionInitialDeselectAction(key, id));\n  }\n\n  /**\n   * Dispatches a select action to the store for a given object in a given list\n   * @param {string} key The key of the list to select the object in\n   * @param {string} id The UUID of the object to select\n   */\n  public select(key: string, id: string): void {\n    this.store.dispatch(new ObjectSelectionSelectAction(key, id));\n  }\n\n  /**\n   * Dispatches a deselect action to the store for a given object in a given list\n   * @param {string} key The key of the list to deselect the object in\n   * @param {string} id The UUID of the object to deselect\n   */\n  public deselect(key: string, id: string): void {\n    this.store.dispatch(new ObjectSelectionDeselectAction(key, id));\n  }\n\n  /**\n   * Dispatches a switch action to the store for a given object in a given list\n   * @param {string} key The key of the list to select the object in\n   * @param {string} id The UUID of the object to select\n   */\n  public switch(key: string, id: string): void {\n    this.store.dispatch(new ObjectSelectionSwitchAction(key, id));\n  }\n\n  /**\n   * Dispatches a reset action to the store for all objects (in a list)\n   * @param {string} key The key of the list to clear all selections for\n   */\n  public reset(key?: string): void {\n    this.store.dispatch(new ObjectSelectionResetAction(key, null));\n  }\n\n}\n\nfunction selectionByKeyAndIdSelector(key: string, id: string): MemoizedSelector<ObjectSelectionListState, ObjectSelectionState> {\n  return keyAndIdSelector<ObjectSelectionState>(key, id);\n}\n\nexport function keyAndIdSelector<T>(key: string, id: string): MemoizedSelector<ObjectSelectionListState, T> {\n  return createSelector(objectSelectionsStateSelector, (state: ObjectSelectionsState) => {\n    if (hasValue(state) && hasValue(state[key])) {\n      return state[key][id];\n    } else {\n      return undefined;\n    }\n  });\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  Observable,\n  of,\n} from 'rxjs';\nimport {\n  startWith,\n  take,\n} from 'rxjs/operators';\n\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { SortOptions } from '../../../core/cache/models/sort-options.model';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { PaginationComponentOptions } from '../../pagination/pagination-component-options.model';\nimport { ObjectSelectService } from '../object-select.service';\n\n/**\n * An abstract component used to select DSpaceObjects from a specific list and returning the UUIDs of the selected DSpaceObjects\n */\n@Component({\n  selector: 'ds-object-select-abstract',\n  template: '',\n})\nexport abstract class ObjectSelectComponent<TDomain extends DSpaceObject> implements OnInit, OnDestroy {\n\n  /**\n   * A unique key used for the object select service\n   */\n  @Input()\n  key: string;\n\n  /**\n   * The list of DSpaceObjects to display\n   */\n  @Input()\n  dsoRD$: Observable<RemoteData<PaginatedList<TDomain>>>;\n\n  /**\n   * The pagination options used to display the DSpaceObjects\n   */\n  @Input()\n  paginationOptions: PaginationComponentOptions;\n\n  /**\n   * The sorting options used to display the DSpaceObjects\n   */\n  @Input()\n  sortOptions: SortOptions;\n\n  /**\n   * The message key used for the confirm button\n   * @type {string}\n   */\n  @Input()\n  confirmButton: string;\n\n  /**\n   * Authorize check to enable the selection when present.\n   */\n  @Input()\n  featureId: FeatureID;\n\n  /**\n   * The message key used for the cancel button\n   * @type {string}\n   */\n  @Input()\n  cancelButton: string;\n\n  /**\n   * An event fired when the cancel button is clicked\n   */\n  @Output()\n  cancel = new EventEmitter<any>();\n\n  /**\n   * EventEmitter to return the selected UUIDs when the confirm button is pressed\n   * @type {EventEmitter<string[]>}\n   */\n  @Output()\n  confirm: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  /**\n   * Whether or not to render the confirm button as danger (for example if confirm deletes objects)\n   * Defaults to false\n   */\n  @Input()\n  dangerConfirm = false;\n\n  /**\n   * The list of selected UUIDs\n   */\n  selectedIds$: Observable<string[]>;\n\n  constructor(\n    protected objectSelectService: ObjectSelectService,\n    protected authorizationService: AuthorizationDataService,\n    public dsoNameService: DSONameService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.selectedIds$ = this.objectSelectService.getAllSelected(this.key);\n  }\n\n  ngOnDestroy(): void {\n    this.objectSelectService.reset(this.key);\n  }\n\n  /**\n   * Switch the state of a checkbox\n   * @param {string} id\n   */\n  switch(id: string) {\n    this.objectSelectService.switch(this.key, id);\n  }\n\n  /**\n   * Get the current state of a checkbox\n   * @param {string} id   The dso's UUID\n   * @returns {Observable<boolean>}\n   */\n  getSelected(id: string): Observable<boolean> {\n    return this.objectSelectService.getSelected(this.key, id);\n  }\n\n  /**\n   * Return if the item can be selected or not due to authorization check.\n   */\n  canSelect(item: DSpaceObject): Observable<boolean> {\n    if (!this.featureId) {\n      return of(true);\n    }\n    return this.authorizationService.isAuthorized(this.featureId, item.self).pipe(startWith(false));\n  }\n\n  /**\n   * Called when the confirm button is pressed\n   * Sends the selected UUIDs to the parent component\n   */\n  confirmSelected() {\n    this.selectedIds$.pipe(\n      take(1),\n    ).subscribe((ids: string[]) => {\n      this.confirm.emit(ids);\n      this.objectSelectService.reset(this.key);\n    });\n  }\n\n  /**\n   * Fire a cancel event\n   */\n  onCancel() {\n    this.cancel.emit();\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { ObjectUpdatesService } from '../../core/data/object-updates/object-updates.service';\nimport { NotificationsService } from '../notifications/notifications.service';\n\n/**\n * Abstract Component that is able to track changes made in the inheriting component using the ObjectUpdateService\n */\n@Component({\n  selector: 'ds-abstract-trackable',\n  template: '',\n  standalone: true,\n})\nexport class AbstractTrackableComponent implements OnInit {\n\n  /**\n   * The time span for being able to undo discarding changes\n   */\n  public discardTimeOut: number;\n  public message: string;\n  public url: string;\n  public notificationsPrefix = 'static-pages.form.notification';\n\n  hasChanges$: Observable<boolean>;\n\n  isReinstatable$: Observable<boolean>;\n\n  constructor(\n    public objectUpdatesService: ObjectUpdatesService,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public router: Router,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.url = this.router.url.split('?')[0];\n    this.hasChanges$ = this.hasChanges();\n    this.isReinstatable$ = this.isReinstatable();\n  }\n\n  /**\n   * Request the object updates service to discard all current changes to this item\n   * Shows a notification to remind the user that they can undo this\n   */\n  discard() {\n    const undoNotification = this.notificationsService.info(this.getNotificationTitle('discarded'), this.getNotificationContent('discarded'), { timeOut: this.discardTimeOut });\n    this.objectUpdatesService.discardFieldUpdates(this.url, undoNotification);\n  }\n\n  /**\n   * Request the object updates service to undo discarding all changes to this item\n   */\n  reinstate() {\n    this.objectUpdatesService.reinstateFieldUpdates(this.url);\n  }\n\n  /**\n   * Checks whether or not the object is currently reinstatable\n   */\n  isReinstatable(): Observable<boolean> {\n    return this.objectUpdatesService.isReinstatable(this.url);\n  }\n\n  /**\n   * Checks whether or not there are currently updates for this object\n   */\n  hasChanges(): Observable<boolean> {\n    return this.objectUpdatesService.hasUpdates(this.url);\n  }\n\n  /**\n   * Get translated notification title\n   * @param key\n   */\n  getNotificationTitle(key: string) {\n    return this.translateService.instant(this.notificationsPrefix + key + '.title');\n  }\n\n  /**\n   * Get translated notification content\n   * @param key\n   */\n  getNotificationContent(key: string) {\n    return this.translateService.instant(this.notificationsPrefix + key + '.content');\n\n  }\n}\n"],"names":["Injector","createSelector","select","Store","distinctUntilChanged","filter","map","switchMap","take","hasNoValue","hasValue","hasValueOperator","isEmpty","isNotEmpty","coreSelector","FieldChangeType","AddFieldUpdateAction","DiscardObjectUpdatesAction","InitializeFieldsAction","ReinstateObjectUpdatesAction","RemoveFieldUpdateAction","SelectVirtualMetadataAction","SetEditableFieldUpdateAction","SetValidFieldUpdateAction","OBJECT_UPDATES_TRASH_PATH","objectUpdatesStateSelector","state","filterByUrlObjectUpdatesStateSelector","url","filterByUrlAndUUIDFieldStateSelector","uuid","fieldStates","virtualMetadataSourceSelector","source","virtualMetadataSources","ObjectUpdatesService","constructor","store","injector","initialize","fields","lastModified","patchOperationService","dispatch","saveFieldUpdate","field","changeType","getObjectEntry","pipe","getFieldState","getFieldUpdates","initialFields","ignoreStates","objectUpdates","objectEntry","fieldUpdates","Object","keys","forEach","getFieldUpdatesExclusive","fieldUpdatesExclusive","object","fieldUpdate","undefined","isEditable","fieldState$","fieldState","editable","isValid","isValidPage","entry","values","findIndex","saveAddFieldUpdate","update$","ADD","saveRemoveFieldUpdate","REMOVE","saveChangeFieldUpdate","UPDATE","isSelectedVirtualMetadata","relationship","item","virtualMetadataSource","setSelectedVirtualMetadata","selected","setEditableFieldUpdate","setValidFieldUpdate","valid","discardFieldUpdates","undoNotification","discardAllFieldUpdates","reinstateFieldUpdates","removeSingleFieldUpdate","getUpdatedFields","find","push","hasUpdates","isReinstatable","getLastModified","createPatch","patch","get","fieldUpdatesToPatchOperations","i0","ɵɵinject","i1","factory","ɵfac","providedIn","NgFor","NgIf","ChangeDetectorRef","FormsModule","ReactiveFormsModule","UntypedFormControl","UntypedFormGroup","Router","TranslateModule","TranslateService","ConfigurationDataService","ScriptDataService","getFirstCompletedRemoteData","getFirstSucceededRemoteDataPayload","getProcessDetailRoute","HandleService","NotificationsService","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","task_r1","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","ɵɵelement","ɵɵtextInterpolate","CURATION_CFG","CurationFormComponent","scriptDataService","configurationDataService","notificationsService","translateService","handleService","router","cdr","subs","ngOnDestroy","sub","unsubscribe","ngOnInit","form","task","handle","config","findByPropertyName","subscribe","configProperties","tasks","value","includes","split","trim","patchValue","detectChanges","hasHandleValue","dsoHandle","submit","taskName","handle$","normalizeHandle","error","invoke","name","rd","hasSucceeded","success","navigateByUrl","payload","processId","ɵɵdirectiveInject","i2","i3","i4","i5","i6","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","CurationFormComponent_Template","rf","ctx","ɵɵlistener","CurationFormComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","CurationFormComponent_option_8_Template","CurationFormComponent_div_9_Template","i7","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","TranslatePipe","encapsulation","DSpaceObjectSelect","ObjectSelectionDeselectAction","ObjectSelectionInitialDeselectAction","ObjectSelectionInitialSelectAction","ObjectSelectionResetAction","ObjectSelectionSelectAction","ObjectSelectionSwitchAction","objectSelectionsStateSelector","objectSelection","objectSelectionListStateSelector","ObjectSelectService","appStore","getSelected","key","id","selectionByKeyAndIdSelector","checked","getAllSelected","initialSelect","initialDeselect","deselect","switch","reset","keyAndIdSelector","EventEmitter","Observable","of","startWith","DSONameService","SortOptions","AuthorizationDataService","FeatureID","PaginationComponentOptions","ObjectSelectComponent","objectSelectService","authorizationService","dsoNameService","cancel","confirm","dangerConfirm","selectedIds$","canSelect","featureId","isAuthorized","self","confirmSelected","ids","emit","onCancel","dsoRD$","paginationOptions","sortOptions","confirmButton","cancelButton","outputs","ObjectSelectComponent_Template","AbstractTrackableComponent","objectUpdatesService","notificationsPrefix","hasChanges$","hasChanges","isReinstatable$","discard","info","getNotificationTitle","getNotificationContent","timeOut","discardTimeOut","reinstate","instant","AbstractTrackableComponent_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}