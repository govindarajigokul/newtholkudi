{"version":3,"file":"default-src_app_shared_subscriptions_subscription-modal_subscription-modal_component_ts.js","mappings":"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","sources":["./src/app/shared/subscriptions/subscription-modal/subscription-modal.component.ts","./src/app/shared/subscriptions/subscription-modal/subscription-modal.component.html","./src/app/shared/subscriptions/subscriptions-data.service.ts"],"sourcesContent":["import {\n  AsyncPipe,\n  KeyValuePipe,\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  NgbActiveModal,\n  NgbModal,\n} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport findIndex from 'lodash/findIndex';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  from,\n  shareReplay,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  take,\n  tap,\n} from 'rxjs/operators';\n\nimport { AuthService } from '../../../core/auth/auth.service';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload,\n} from '../../../core/shared/operators';\nimport { AlertComponent } from '../../alert/alert.component';\nimport { BtnDisabledDirective } from '../../btn-disabled.directive';\nimport { isNotEmpty } from '../../empty.util';\nimport { NotificationsService } from '../../notifications/notifications.service';\nimport { ThemedTypeBadgeComponent } from '../../object-collection/shared/badges/type-badge/themed-type-badge.component';\nimport { Subscription } from '../models/subscription.model';\nimport { SubscriptionsDataService } from '../subscriptions-data.service';\n\n@Component({\n  selector: 'ds-subscription-modal',\n  templateUrl: './subscription-modal.component.html',\n  styleUrls: ['./subscription-modal.component.scss'],\n  standalone: true,\n  imports: [NgIf, FormsModule, ReactiveFormsModule, ThemedTypeBadgeComponent, NgFor, AlertComponent, AsyncPipe, KeyValuePipe, TranslateModule, BtnDisabledDirective],\n})\n/**\n * Modal that allows to manage the subscriptions for the selected item\n */\nexport class SubscriptionModalComponent implements OnInit {\n\n  /**\n   * DSpaceObject of which to get the subscriptions\n   */\n  @Input() dso: DSpaceObject;\n\n  /**\n   * If given the subscription to edit by the form\n   */\n  @Input() subscription: Subscription;\n\n  /**\n   * The eperson related to the subscription\n   */\n  ePersonId: string;\n\n  /**\n   * A boolean representing if a request operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  public processing$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * If true, show a message explaining how to delete a subscription\n   */\n  public showDeleteInfo$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Reactive form group that will be used to add/edit subscriptions\n   */\n  subscriptionForm: UntypedFormGroup;\n\n  /**\n   * Used to show validation errors when user submits\n   */\n  submitted = false;\n\n  /**\n   * Types of subscription to be shown on select\n   */\n  subscriptionDefaultTypes = ['content'];\n\n  /**\n   * Frequencies to be shown as checkboxes\n   */\n  frequencyDefaultValues = ['D', 'W', 'M'];\n\n  /**\n   * True if form status has changed and at least one frequency is checked\n   */\n  isValid = false;\n  /**\n   * Event emitted when a given subscription has been updated\n   */\n  @Output() updateSubscription: EventEmitter<Subscription> = new EventEmitter<Subscription>();\n\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private modalService: NgbModal,\n    private notificationsService: NotificationsService,\n    private subscriptionService: SubscriptionsDataService,\n    public activeModal: NgbActiveModal,\n    private authService: AuthService,\n    private translate: TranslateService,\n    public dsoNameService: DSONameService,\n  ) {\n  }\n\n  /**\n   * When component starts initialize starting functionality\n   */\n  ngOnInit(): void {\n    this.authService.getAuthenticatedUserFromStore().pipe(\n      take(1),\n      map((ePerson) => ePerson.uuid),\n      shareReplay({ refCount: false }),  // todo: check if this is ok\n    ).subscribe((ePersonId: string) => {\n      this.ePersonId = ePersonId;\n      if (isNotEmpty(this.subscription)) {\n        this.initFormByGivenSubscription();\n      } else {\n        this.initFormByAllSubscriptions();\n      }\n    });\n\n    this.subscriptionForm.valueChanges.subscribe((newValue) => {\n      let anyFrequencySelected = false;\n      for (const f of this.frequencyDefaultValues) {\n        anyFrequencySelected = anyFrequencySelected || newValue.content.frequencies[f];\n      }\n      this.isValid = anyFrequencySelected;\n    });\n  }\n\n  initFormByAllSubscriptions(): void {\n    this.subscriptionForm = new UntypedFormGroup({});\n    for (const t of this.subscriptionDefaultTypes) {\n      const formGroup = new UntypedFormGroup({});\n      formGroup.addControl('subscriptionId', this.formBuilder.control(''));\n      formGroup.addControl('frequencies', this.formBuilder.group({}));\n      for (const f of this.frequencyDefaultValues) {\n        (formGroup.controls.frequencies as UntypedFormGroup).addControl(f, this.formBuilder.control(false));\n      }\n      this.subscriptionForm.addControl(t, formGroup);\n    }\n\n    this.initFormDataBySubscriptions();\n  }\n\n  /**\n   * If the subscription is passed start the form with the information of subscription\n   */\n  initFormByGivenSubscription(): void {\n    const formGroup = new UntypedFormGroup({});\n    formGroup.addControl('subscriptionId', this.formBuilder.control(this.subscription.id));\n    formGroup.addControl('frequencies', this.formBuilder.group({}));\n    (formGroup.get('frequencies') as UntypedFormGroup).addValidators(Validators.required);\n    for (const f of this.frequencyDefaultValues) {\n      const value = findIndex(this.subscription.subscriptionParameterList, ['value', f]) !== -1;\n      (formGroup.controls.frequencies as UntypedFormGroup).addControl(f, this.formBuilder.control(value));\n    }\n\n    this.subscriptionForm = this.formBuilder.group({\n      [this.subscription.subscriptionType]: formGroup,\n    });\n  }\n\n  /**\n   * Get subscriptions for the current ePerson & dso object relation.\n   * If there are no subscriptions then start with an empty form.\n   */\n  initFormDataBySubscriptions(): void {\n    this.processing$.next(true);\n    this.subscriptionService.getSubscriptionsByPersonDSO(this.ePersonId, this.dso?.uuid).pipe(\n      getFirstSucceededRemoteDataPayload(),\n    ).subscribe({\n      next: (res: PaginatedList<Subscription>) => {\n        if (res.pageInfo.totalElements > 0) {\n          this.showDeleteInfo$.next(true);\n          for (const subscription of res.page) {\n            const type = subscription.subscriptionType;\n            const subscriptionGroup: UntypedFormGroup = this.subscriptionForm.get(type) as UntypedFormGroup;\n            if (isNotEmpty(subscriptionGroup)) {\n              subscriptionGroup.controls.subscriptionId.setValue(subscription.id);\n              for (const parameter of subscription.subscriptionParameterList.filter((p) => p.name === 'frequency')) {\n                (subscriptionGroup.controls.frequencies as UntypedFormGroup).controls[parameter.value]?.setValue(true);\n              }\n            }\n          }\n        }\n        this.processing$.next(false);\n      },\n      error: (err: unknown) => {\n        this.processing$.next(false);\n      },\n    });\n  }\n\n  /**\n   * Create/update subscriptions if needed\n   */\n  submit() {\n    this.submitted = true;\n    const subscriptionTypes: string[] = Object.keys(this.subscriptionForm.controls);\n    const subscriptionsToBeCreated = [];\n    const subscriptionsToBeUpdated = [];\n\n    subscriptionTypes.forEach((subscriptionType: string) => {\n      const subscriptionGroup: UntypedFormGroup = this.subscriptionForm.controls[subscriptionType] as UntypedFormGroup;\n      if (subscriptionGroup.touched && subscriptionGroup.dirty) {\n        const body = this.createBody(\n          subscriptionGroup.controls.subscriptionId.value,\n          subscriptionType,\n          subscriptionGroup.controls.frequencies as UntypedFormGroup,\n        );\n\n        if (isNotEmpty(body.id)) {\n          subscriptionsToBeUpdated.push(body);\n        } else if (isNotEmpty(body.subscriptionParameterList)) {\n          subscriptionsToBeCreated.push(body);\n        }\n      }\n\n    });\n\n    const toBeProcessed = [];\n    if (isNotEmpty(subscriptionsToBeCreated)) {\n      toBeProcessed.push(from(subscriptionsToBeCreated).pipe(\n        mergeMap((subscriptionBody) => {\n          return this.subscriptionService.createSubscription(subscriptionBody, this.ePersonId, this.dso.uuid).pipe(\n            getFirstCompletedRemoteData(),\n          );\n        }),\n        tap((res: RemoteData<Subscription>) => {\n          if (res.hasSucceeded) {\n            const msg = this.translate.instant('subscriptions.modal.create.success', { type: res.payload.subscriptionType });\n            this.notificationsService.success(null, msg);\n          } else {\n            this.notificationsService.error(null, this.translate.instant('subscriptions.modal.create.error'));\n          }\n        }),\n      ));\n    }\n\n    if (isNotEmpty(subscriptionsToBeUpdated)) {\n      toBeProcessed.push(from(subscriptionsToBeUpdated).pipe(\n        mergeMap((subscriptionBody) => {\n          return this.subscriptionService.updateSubscription(subscriptionBody, this.ePersonId, this.dso.uuid).pipe(\n            getFirstCompletedRemoteData(),\n          );\n        }),\n        tap((res: RemoteData<Subscription>) => {\n          if (res.hasSucceeded) {\n            const msg = this.translate.instant('subscriptions.modal.update.success', { type: res.payload.subscriptionType });\n            this.notificationsService.success(null, msg);\n            if (isNotEmpty(this.subscription)) {\n              this.updateSubscription.emit(res.payload);\n            }\n          } else {\n            this.notificationsService.error(null, this.translate.instant('subscriptions.modal.update.error'));\n          }\n        }),\n      ));\n    }\n\n    combineLatest([...toBeProcessed]).subscribe((res) => {\n      this.activeModal.close();\n    });\n\n  }\n\n  private createBody(subscriptionId: string, subscriptionType: string, frequencies: UntypedFormGroup): Partial<any> {\n    const body = {\n      id: (isNotEmpty(subscriptionId) ? subscriptionId : null),\n      subscriptionType: subscriptionType,\n      subscriptionParameterList: [],\n    };\n\n    for (const frequency of this.frequencyDefaultValues) {\n      if (frequencies.value[frequency]) {\n        body.subscriptionParameterList.push(\n          {\n            name: 'frequency',\n            value: frequency,\n          },\n        );\n      }\n    }\n\n    return body;\n  }\n\n}\n","<form *ngIf=\"subscriptionForm\" [formGroup]=\"subscriptionForm\" (ngSubmit)=\"submit()\" data-test=\"subscription-form\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\">{{'subscriptions.modal.title' | translate}}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.close()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p class=\"mb-3\"><strong>{{ dsoNameService.getName(dso) }}</strong>\n      <span *ngIf=\"!!dso\" class=\"float-right\"><ds-type-badge *ngIf=\"!!dso\" [object]=\"dso\"></ds-type-badge></span>\n    </p>\n    <div>\n      <fieldset *ngFor=\"let subscriptionType of subscriptionForm?.controls | keyvalue\" formGroupName=\"{{subscriptionType.key}}\" class=\"form-group form-row\">\n        <legend class=\"col-md-4 col-form-label float-md-left pt-0\">\n          {{ 'subscriptions.modal.new-subscription-form.type.' + subscriptionType.key | translate }}:\n        </legend>\n        <div class=\"col-md-8\">\n          <input type=\"hidden\" formControlName=\"subscriptionId\" [value]=\"subscriptionType?.value?.controls['subscriptionId'].value\" >\n          <div class=\"form-check\" formGroupName=\"frequencies\" *ngFor=\"let frequency of frequencyDefaultValues\">\n            <input type=\"checkbox\" [id]=\"'checkbox-' + frequency\" class=\"form-check-input\" [formControlName]=\"frequency\"/>\n            <label class=\"form-check-label\"\n                   [for]=\"'checkbox-' + frequency\">{{ 'subscriptions.modal.new-subscription-form.frequency.' + frequency | translate }}</label>\n          </div>\n        </div>\n        <ds-alert *ngIf=\"!!submitted && subscriptionType?.value?.controls['frequencies'].errors?.required\" [type]=\"'alert-danger'\">\n          {{ 'context-menu.actions.subscription.frequency.required' | translate }}\n        </ds-alert>\n      </fieldset>\n    </div>\n    <p class=\"text-muted\" *ngIf=\"(showDeleteInfo$ | async)\">{{'subscriptions.modal.delete-info' | translate}}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-outline-secondary\"\n            (click)=\"activeModal.close()\">\n      {{'subscriptions.modal.close' | translate}}\n    </button>\n    <button type=\"submit\" class=\"btn btn-success\" [dsBtnDisabled]=\"(processing$ | async) || !isValid\">\n        <span *ngIf=\"(processing$ | async)\">\n          <i class='fas fa-circle-notch fa-spin'></i> {{'subscriptions.modal.new-subscription-form.processing' | translate}}\n        </span>\n      <span *ngIf=\"(processing$ | async) !== true\">\n        {{'subscriptions.modal.new-subscription-form.submit' | translate}}\n      </span>\n    </button>\n  </div>\n</form>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { sendRequest } from 'src/app/core/shared/request.operators';\n\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { RemoteDataBuildService } from '../../core/cache/builders/remote-data-build.service';\nimport { RequestParam } from '../../core/cache/models/request-param.model';\nimport { ObjectCacheService } from '../../core/cache/object-cache.service';\nimport { DeleteDataImpl } from '../../core/data/base/delete-data';\nimport { FindAllData } from '../../core/data/base/find-all-data';\nimport { IdentifiableDataService } from '../../core/data/base/identifiable-data.service';\nimport { SearchDataImpl } from '../../core/data/base/search-data';\nimport { DSOChangeAnalyzer } from '../../core/data/dso-change-analyzer.service';\nimport { FindListOptions } from '../../core/data/find-list-options.model';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport {\n  CreateRequest,\n  PutRequest,\n} from '../../core/data/request.models';\nimport { RequestService } from '../../core/data/request.service';\nimport { RestRequest } from '../../core/data/rest-request.model';\nimport { HALEndpointService } from '../../core/shared/hal-endpoint.service';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport {\n  isNotEmpty,\n  isNotEmptyOperator,\n} from '../empty.util';\nimport { NotificationsService } from '../notifications/notifications.service';\nimport { followLink } from '../utils/follow-link-config.model';\nimport { Subscription } from './models/subscription.model';\n\n/**\n * Provides methods to retrieve subscription resources from the REST API related CRUD actions.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SubscriptionsDataService extends IdentifiableDataService<Subscription> {\n  protected findByEpersonLinkPath = 'findByEPerson';\n\n  private deleteData: DeleteDataImpl<Subscription>;\n  private findAllData: FindAllData<Subscription>;\n  private searchData: SearchDataImpl<Subscription>;\n\n  constructor(\n    protected comparator: DSOChangeAnalyzer<Subscription>,\n    protected http: HttpClient,\n    protected notificationsService: NotificationsService,\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<any>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected nameService: DSONameService,\n  ) {\n    super('subscriptions', requestService, rdbService, objectCache, halService);\n\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n  }\n  /**\n   * Get subscriptions for a given item or community or collection & eperson.\n   *\n   * @param eperson The eperson to search for\n   * @param uuid The uuid of the dsobjcet to search for\n   */\n  getSubscriptionsByPersonDSO(eperson: string, uuid: string): Observable<RemoteData<PaginatedList<Subscription>>> {\n\n    const optionsWithObject = Object.assign(new FindListOptions(), {\n      searchParams: [\n        new RequestParam('resource', uuid),\n        new RequestParam('eperson_id', eperson),\n      ],\n    });\n\n    return this.searchData.searchBy('findByEPersonAndDso', optionsWithObject, false, true);\n  }\n\n  /**\n   * Create a subscription for a given item or community or collection.\n   *\n   * @param subscription The subscription to create\n   * @param ePerson The ePerson to create for\n   * @param uuid The uuid of the dsobjcet to create for\n   */\n  createSubscription(subscription: Subscription, ePerson: string, uuid: string): Observable<RemoteData<Subscription>> {\n\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      isNotEmptyOperator(),\n      take(1),\n      map((endpointUrl: string) => `${endpointUrl}?resource=${uuid}&eperson_id=${ePerson}`),\n      map((endpointURL: string) => new CreateRequest(this.requestService.generateRequestId(), endpointURL, JSON.stringify(subscription))),\n      sendRequest(this.requestService),\n      switchMap((restRequest: RestRequest) => this.rdbService.buildFromRequestUUID(restRequest.uuid)),\n      getFirstCompletedRemoteData(),\n    ) as Observable<RemoteData<Subscription>>;\n  }\n\n  /**\n   * Update a subscription for a given item or community or collection.\n   *\n   * @param subscription The subscription to update\n   * @param ePerson The ePerson to update for\n   * @param uuid The uuid of the dsobjcet to update for\n   */\n  updateSubscription(subscription, ePerson: string, uuid: string) {\n\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      isNotEmptyOperator(),\n      take(1),\n      map((endpointUrl: string) => `${endpointUrl}/${subscription.id}?resource=${uuid}&eperson_id=${ePerson}`),\n      map((endpointURL: string) => new PutRequest(this.requestService.generateRequestId(), endpointURL, JSON.stringify(subscription))),\n      sendRequest(this.requestService),\n      switchMap((restRequest: RestRequest) => this.rdbService.buildFromRequestUUID(restRequest.uuid)),\n      getFirstCompletedRemoteData(),\n    ) as Observable<RemoteData<Subscription>>;\n  }\n\n\n  /**\n   * Deletes the subscription with a give id\n   *\n   * @param id  the id of Subscription to delete\n   */\n  deleteSubscription(id: string): Observable<RemoteData<NoContent>> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      distinctUntilChanged(),\n      switchMap((endpointUrl) => this.deleteData.delete(id)),\n      getFirstCompletedRemoteData(),\n    );\n  }\n\n  /**\n   * Retrieves the list of subscription with {@link dSpaceObject} and {@link ePerson}\n   *\n   * @param options                     options for the find all request\n   */\n  findAllSubscriptions(options?): Observable<RemoteData<PaginatedList<Subscription>>> {\n    return this.findAllData.findAll(options, true, true, followLink('resource'), followLink('eperson'));\n  }\n\n\n  /**\n   * Retrieves the list of subscription with {@link dSpaceObject} and {@link ePerson}\n   *\n   * @param ePersonId  The eperson id\n   * @param options    The options for the find all request\n   */\n  findByEPerson(ePersonId: string, options?: FindListOptions): Observable<RemoteData<PaginatedList<Subscription>>> {\n    const optionsWithObject = Object.assign(new FindListOptions(), options, {\n      searchParams: [\n        new RequestParam('uuid', ePersonId),\n      ],\n    });\n\n    // return this.searchData.searchBy(this.findByEpersonLinkPath, optionsWithObject, true, true, followLink('dSpaceObject'), followLink('ePerson'));\n\n    return this.getEndpoint().pipe(\n      map(href => `${href}/search/${this.findByEpersonLinkPath}`),\n      switchMap(href => this.findListByHref(href, optionsWithObject, false, true, followLink('resource'), followLink('eperson'))),\n    );\n\n\n  }\n\n}\n"],"names":["AsyncPipe","KeyValuePipe","NgFor","NgIf","EventEmitter","FormsModule","ReactiveFormsModule","UntypedFormBuilder","UntypedFormGroup","Validators","NgbActiveModal","NgbModal","TranslateModule","TranslateService","findIndex","BehaviorSubject","combineLatest","from","shareReplay","map","mergeMap","take","tap","AuthService","DSONameService","DSpaceObject","getFirstCompletedRemoteData","getFirstSucceededRemoteDataPayload","AlertComponent","BtnDisabledDirective","isNotEmpty","NotificationsService","ThemedTypeBadgeComponent","Subscription","SubscriptionsDataService","i0","ɵɵelement","ɵɵproperty","ctx_r1","dso","ɵɵelementStart","ɵɵtemplate","SubscriptionModalComponent_form_0_span_12_ds_type_badge_1_Template","ɵɵelementEnd","ɵɵadvance","ɵɵtext","frequency_r3","ɵɵtextInterpolate","ɵɵpipeBind1","ɵɵtextInterpolate1","SubscriptionModalComponent_form_0_fieldset_14_div_6_Template","SubscriptionModalComponent_form_0_fieldset_14_ds_alert_7_Template","ɵɵpropertyInterpolate","subscriptionType_r4","key","value","controls","frequencyDefaultValues","submitted","errors","required","ɵɵlistener","SubscriptionModalComponent_form_0_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","submit","SubscriptionModalComponent_form_0_Template_button_click_5_listener","activeModal","close","SubscriptionModalComponent_form_0_span_12_Template","SubscriptionModalComponent_form_0_fieldset_14_Template","SubscriptionModalComponent_form_0_p_16_Template","SubscriptionModalComponent_form_0_Template_button_click_19_listener","SubscriptionModalComponent_form_0_span_24_Template","SubscriptionModalComponent_form_0_span_26_Template","subscriptionForm","dsoNameService","getName","showDeleteInfo$","processing$","isValid","SubscriptionModalComponent","constructor","formBuilder","modalService","notificationsService","subscriptionService","authService","translate","subscriptionDefaultTypes","updateSubscription","ngOnInit","getAuthenticatedUserFromStore","pipe","ePerson","uuid","refCount","subscribe","ePersonId","subscription","initFormByGivenSubscription","initFormByAllSubscriptions","valueChanges","newValue","anyFrequencySelected","f","content","frequencies","t","formGroup","addControl","control","group","initFormDataBySubscriptions","id","get","addValidators","subscriptionParameterList","subscriptionType","next","getSubscriptionsByPersonDSO","res","pageInfo","totalElements","page","type","subscriptionGroup","subscriptionId","setValue","parameter","filter","p","name","error","err","subscriptionTypes","Object","keys","subscriptionsToBeCreated","subscriptionsToBeUpdated","forEach","touched","dirty","body","createBody","push","toBeProcessed","subscriptionBody","createSubscription","hasSucceeded","msg","instant","payload","success","emit","frequency","ɵɵdirectiveInject","i1","i2","i3","i4","i5","i6","i7","selectors","inputs","outputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","SubscriptionModalComponent_Template","rf","ctx","SubscriptionModalComponent_form_0_Template","ɵNgNoValidate","DefaultValueAccessor","CheckboxControlValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","FormGroupName","TranslatePipe","styles","HttpClient","Store","distinctUntilChanged","switchMap","sendRequest","RemoteDataBuildService","RequestParam","ObjectCacheService","DeleteDataImpl","IdentifiableDataService","SearchDataImpl","DSOChangeAnalyzer","FindListOptions","CreateRequest","PutRequest","RequestService","HALEndpointService","isNotEmptyOperator","followLink","comparator","http","requestService","rdbService","store","objectCache","halService","nameService","findByEpersonLinkPath","searchData","linkPath","responseMsToLive","deleteData","constructIdEndpoint","eperson","optionsWithObject","assign","searchParams","searchBy","getEndpoint","endpointUrl","endpointURL","generateRequestId","JSON","stringify","restRequest","buildFromRequestUUID","deleteSubscription","href","delete","findAllSubscriptions","options","findAllData","findAll","findByEPerson","findListByHref","ɵɵinject","i8","i9","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}