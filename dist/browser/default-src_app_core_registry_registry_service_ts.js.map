{"version":3,"file":"default-src_app_core_registry_registry_service_ts.js","mappings":"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","sources":["./src/app/core/data/metadata-schema-data.service.ts","./src/app/core/registry/registry.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { hasValue } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { MetadataSchema } from '../metadata/metadata-schema.model';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { NoContent } from '../shared/NoContent.model';\nimport {\n  CreateData,\n  CreateDataImpl,\n} from './base/create-data';\nimport {\n  DeleteData,\n  DeleteDataImpl,\n} from './base/delete-data';\nimport {\n  FindAllData,\n  FindAllDataImpl,\n} from './base/find-all-data';\nimport { IdentifiableDataService } from './base/identifiable-data.service';\nimport {\n  PutData,\n  PutDataImpl,\n} from './base/put-data';\nimport { FindListOptions } from './find-list-options.model';\nimport { PaginatedList } from './paginated-list.model';\nimport { RemoteData } from './remote-data';\nimport { RequestService } from './request.service';\n\n/**\n * A service responsible for fetching/sending data from/to the REST API on the metadataschemas endpoint\n */\n@Injectable({ providedIn: 'root' })\nexport class MetadataSchemaDataService extends IdentifiableDataService<MetadataSchema> implements FindAllData<MetadataSchema>, DeleteData<MetadataSchema> {\n  private createData: CreateData<MetadataSchema>;\n  private findAllData: FindAllData<MetadataSchema>;\n  private putData: PutData<MetadataSchema>;\n  private deleteData: DeleteData<MetadataSchema>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n  ) {\n    super('metadataschemas', requestService, rdbService, objectCache, halService);\n\n    this.createData = new CreateDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive);\n    this.putData = new PutDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n    this.findAllData = new FindAllDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  /**\n   * Create or Update a MetadataSchema\n   *  If the MetadataSchema contains an id, it is assumed the schema already exists and is updated instead\n   *  Since creating or updating is nearly identical, the only real difference is the request (and slight difference in endpoint):\n   *  - On creation, a CreateRequest is used\n   *  - On update, a PutRequest is used\n   * @param schema    The MetadataSchema to create or update\n   */\n  createOrUpdateMetadataSchema(schema: MetadataSchema): Observable<RemoteData<MetadataSchema>> {\n    const isUpdate = hasValue(schema.id);\n\n    if (isUpdate) {\n      return this.putData.put(schema);\n    } else {\n      return this.createData.create(schema);\n    }\n  }\n\n  /**\n   * Clear all metadata schema requests\n   * Used for refreshing lists after adding/updating/removing a metadata schema in the registry\n   */\n  clearRequests(): Observable<string> {\n    return this.getBrowseEndpoint().pipe(\n      tap((href: string) => this.requestService.removeByHrefSubstring(href)),\n    );\n  }\n\n  /**\n   * Returns {@link RemoteData} of all object with a list of {@link FollowLinkConfig}, to indicate which embedded\n   * info should be added to the objects\n   *\n   * @param options                     Find list options object\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   * @return {Observable<RemoteData<PaginatedList<T>>>}\n   *    Return an observable that emits object list\n   */\n  public findAll(options?: FindListOptions, useCachedVersionIfAvailable?: boolean, reRequestOnStale?: boolean, ...linksToFollow: FollowLinkConfig<MetadataSchema>[]): Observable<RemoteData<PaginatedList<MetadataSchema>>> {\n    return this.findAllData.findAll(options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Delete an existing object on the server\n   * @param   objectId The id of the object to be removed\n   * @param   copyVirtualMetadata (optional parameter) the identifiers of the relationship types for which the virtual\n   *                            metadata should be saved as real metadata\n   * @return  A RemoteData observable with an empty payload, but still representing the state of the request: statusCode,\n   *          errorMessage, timeCompleted, etc\n   */\n  public delete(objectId: string, copyVirtualMetadata?: string[]): Observable<RemoteData<NoContent>> {\n    return this.deleteData.delete(objectId, copyVirtualMetadata);\n  }\n\n  /**\n   * Delete an existing object on the server\n   * @param   href The self link of the object to be removed\n   * @param   copyVirtualMetadata (optional parameter) the identifiers of the relationship types for which the virtual\n   *                            metadata should be saved as real metadata\n   * @return  A RemoteData observable with an empty payload, but still representing the state of the request: statusCode,\n   *          errorMessage, timeCompleted, etc\n   *          Only emits once all request related to the DSO has been invalidated.\n   */\n  public deleteByHref(href: string, copyVirtualMetadata?: string[]): Observable<RemoteData<NoContent>> {\n    return this.deleteData.deleteByHref(href, copyVirtualMetadata);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createSelector,\n  select,\n  Store,\n} from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  combineLatest as observableCombineLatest,\n  Observable,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  tap,\n} from 'rxjs/operators';\n\nimport {\n  MetadataRegistryCancelFieldAction,\n  MetadataRegistryCancelSchemaAction,\n  MetadataRegistryDeselectAllFieldAction,\n  MetadataRegistryDeselectAllSchemaAction,\n  MetadataRegistryDeselectFieldAction,\n  MetadataRegistryDeselectSchemaAction,\n  MetadataRegistryEditFieldAction,\n  MetadataRegistryEditSchemaAction,\n  MetadataRegistrySelectFieldAction,\n  MetadataRegistrySelectSchemaAction,\n} from '../../admin/admin-registries/metadata-registry/metadata-registry.actions';\nimport { MetadataRegistryState } from '../../admin/admin-registries/metadata-registry/metadata-registry.reducers';\nimport { AppState } from '../../app.reducer';\nimport {\n  hasValue,\n  hasValueOperator,\n  isNotEmptyOperator,\n} from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { FindListOptions } from '../data/find-list-options.model';\nimport { MetadataFieldDataService } from '../data/metadata-field-data.service';\nimport { MetadataSchemaDataService } from '../data/metadata-schema-data.service';\nimport { PaginatedList } from '../data/paginated-list.model';\nimport { RemoteData } from '../data/remote-data';\nimport { MetadataField } from '../metadata/metadata-field.model';\nimport { MetadataSchema } from '../metadata/metadata-schema.model';\nimport { NoContent } from '../shared/NoContent.model';\nimport { getFirstSucceededRemoteDataPayload } from '../shared/operators';\n\nconst metadataRegistryStateSelector = (state: AppState) => state.metadataRegistry;\nconst editMetadataSchemaSelector = createSelector(metadataRegistryStateSelector, (metadataState: MetadataRegistryState) => metadataState.editSchema);\nconst selectedMetadataSchemasSelector = createSelector(metadataRegistryStateSelector, (metadataState: MetadataRegistryState) => metadataState.selectedSchemas);\nconst editMetadataFieldSelector = createSelector(metadataRegistryStateSelector, (metadataState: MetadataRegistryState) => metadataState.editField);\nconst selectedMetadataFieldsSelector = createSelector(metadataRegistryStateSelector, (metadataState: MetadataRegistryState) => metadataState.selectedFields);\n\n/**\n * Service for registry related CRUD actions such as metadata schema, metadata field and bitstream format\n */\n@Injectable({ providedIn: 'root' })\nexport class RegistryService {\n\n  constructor(private store: Store<AppState>,\n              private notificationsService: NotificationsService,\n              private translateService: TranslateService,\n              private metadataSchemaService: MetadataSchemaDataService,\n              private metadataFieldService: MetadataFieldDataService) {\n\n  }\n\n  /**\n   * Retrieves all metadata schemas\n   * @param options           The options used to retrieve the schemas\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  public getMetadataSchemas(options: FindListOptions = {}, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<MetadataSchema>[]): Observable<RemoteData<PaginatedList<MetadataSchema>>> {\n    return this.metadataSchemaService.findAll(options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Retrieves a metadata schema by its prefix\n   * @param prefix                      The prefux of the schema to find\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  public getMetadataSchemaByPrefix(prefix: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<MetadataSchema>[]): Observable<RemoteData<MetadataSchema>> {\n    // Temporary options to get ALL metadataschemas until there's a rest api endpoint for fetching a specific schema\n    const options: FindListOptions = Object.assign(new FindListOptions(), {\n      elementsPerPage: 10000,\n    });\n    return this.getMetadataSchemas(options).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((schemas: PaginatedList<MetadataSchema>) => schemas.page),\n      isNotEmptyOperator(),\n      map((schemas: MetadataSchema[]) => schemas.filter((schema) => schema.prefix === prefix)[0]),\n      mergeMap((schema: MetadataSchema) => this.metadataSchemaService.findById(`${schema.id}`, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow)),\n    );\n  }\n\n  /**\n   * retrieves all metadata fields that belong to a certain metadata schema\n   * @param schema                      The schema to filter by\n   * @param options                     The options info used to retrieve the fields\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  public getMetadataFieldsBySchema(schema: MetadataSchema, options: FindListOptions = {}, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<MetadataField>[]): Observable<RemoteData<PaginatedList<MetadataField>>> {\n    return this.metadataFieldService.findBySchema(schema, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  public editMetadataSchema(schema: MetadataSchema) {\n    this.store.dispatch(new MetadataRegistryEditSchemaAction(schema));\n  }\n\n  /**\n   * Method to cancel editing a metadata schema, dispatches a cancel schema action\n   */\n  public cancelEditMetadataSchema() {\n    this.store.dispatch(new MetadataRegistryCancelSchemaAction());\n  }\n\n  /**\n   * Method to retrieve the metadata schema that are currently being edited\n   */\n  public getActiveMetadataSchema(): Observable<MetadataSchema> {\n    return this.store.pipe(select(editMetadataSchemaSelector));\n  }\n\n  /**\n   * Method to select a metadata schema, dispatches a select schema action\n   * @param schema The schema that's being selected\n   */\n  public selectMetadataSchema(schema: MetadataSchema) {\n    this.store.dispatch(new MetadataRegistrySelectSchemaAction(schema));\n  }\n\n  /**\n   * Method to deselect a metadata schema, dispatches a deselect schema action\n   * @param schema The schema that's it being deselected\n   */\n  public deselectMetadataSchema(schema: MetadataSchema) {\n    this.store.dispatch(new MetadataRegistryDeselectSchemaAction(schema));\n  }\n\n  /**\n   * Method to deselect all currently selected metadata schema, dispatches a deselect all schema action\n   */\n  public deselectAllMetadataSchema() {\n    this.store.dispatch(new MetadataRegistryDeselectAllSchemaAction());\n  }\n\n  /**\n   * Method to retrieve the metadata schemas that are currently selected\n   */\n  public getSelectedMetadataSchemas(): Observable<MetadataSchema[]> {\n    return this.store.pipe(select(selectedMetadataSchemasSelector));\n  }\n\n  /**\n   * Method to start editing a metadata field, dispatches an edit field action\n   * @param field The field that's being edited\n   */\n  public editMetadataField(field: MetadataField) {\n    this.store.dispatch(new MetadataRegistryEditFieldAction(field));\n  }\n\n  /**\n   * Method to cancel editing a metadata field, dispatches a cancel field action\n   */\n  public cancelEditMetadataField() {\n    this.store.dispatch(new MetadataRegistryCancelFieldAction());\n  }\n\n  /**\n   * Method to retrieve the metadata field that are currently being edited\n   */\n  public getActiveMetadataField(): Observable<MetadataField> {\n    return this.store.pipe(select(editMetadataFieldSelector));\n  }\n\n  /**\n   * Method to select a metadata field, dispatches a select field action\n   * @param field The field that's being selected\n   */\n  public selectMetadataField(field: MetadataField) {\n    this.store.dispatch(new MetadataRegistrySelectFieldAction(field));\n  }\n\n  /**\n   * Method to deselect a metadata field, dispatches a deselect field action\n   * @param field The field that's it being deselected\n   */\n  public deselectMetadataField(field: MetadataField) {\n    this.store.dispatch(new MetadataRegistryDeselectFieldAction(field));\n  }\n\n  /**\n   * Method to deselect all currently selected metadata fields, dispatches a deselect all field action\n   */\n  public deselectAllMetadataField() {\n    this.store.dispatch(new MetadataRegistryDeselectAllFieldAction());\n  }\n\n  /**\n   * Method to retrieve the metadata fields that are currently selected\n   */\n  public getSelectedMetadataFields(): Observable<MetadataField[]> {\n    return this.store.pipe(select(selectedMetadataFieldsSelector));\n  }\n\n  /**\n   * Create or Update a MetadataSchema\n   *  If the MetadataSchema contains an id, it is assumed the schema already exists and is updated instead\n   *  Since creating or updating is nearly identical, the only real difference is the request (and slight difference in endpoint):\n   *  - On creation, a CreateRequest is used\n   *  - On update, a PutRequest is used\n   * @param schema    The MetadataSchema to create or update\n   */\n  public createOrUpdateMetadataSchema(schema: MetadataSchema): Observable<MetadataSchema> {\n    const isUpdate = hasValue(schema.id);\n    return this.metadataSchemaService.createOrUpdateMetadataSchema(schema).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      hasValueOperator(),\n      tap(() => {\n        this.showNotifications(true, isUpdate, false, { prefix: schema.prefix });\n      }),\n    );\n  }\n\n  /**\n   * Method to delete a metadata schema\n   * @param id The id of the metadata schema to delete\n   */\n  public deleteMetadataSchema(id: number): Observable<RemoteData<NoContent>> {\n    return this.metadataSchemaService.delete(`${id}`);\n  }\n\n  /**\n   * Method that clears a cached metadata schema request and returns its REST url\n   */\n  public clearMetadataSchemaRequests(): Observable<string> {\n    return this.metadataSchemaService.clearRequests();\n  }\n\n  /**\n   * Create a MetadataField\n   *\n   * @param field    The MetadataField to create\n   * @param schema   The MetadataSchema to create the field in\n   */\n  public createMetadataField(field: MetadataField, schema: MetadataSchema): Observable<MetadataField> {\n    if (!field.qualifier) {\n      field.qualifier = null;\n    }\n    return this.metadataFieldService.create(field, new RequestParam('schemaId', schema.id)).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      hasValueOperator(),\n      tap(() => {\n        this.showNotifications(true, false, true, { field: field.toString() });\n      }),\n    );\n  }\n\n  /**\n   * Update a MetadataField\n   *\n   * @param field    The MetadataField to update\n   */\n  public updateMetadataField(field: MetadataField): Observable<MetadataField> {\n    if (!field.qualifier) {\n      field.qualifier = null;\n    }\n    return this.metadataFieldService.put(field).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      hasValueOperator(),\n      tap(() => {\n        this.showNotifications(true, true, true, { field: field.toString() });\n      }),\n    );\n  }\n\n  /**\n   * Method to delete a metadata field\n   * @param id The id of the metadata field to delete\n   */\n  public deleteMetadataField(id: number): Observable<RemoteData<NoContent>> {\n    return this.metadataFieldService.delete(`${id}`);\n  }\n\n  /**\n   * Method that clears a cached metadata field request and returns its REST url\n   */\n  public clearMetadataFieldRequests(): void {\n    this.metadataFieldService.clearRequests();\n  }\n\n  private showNotifications(success: boolean, edited: boolean, isField: boolean, options: any) {\n    const prefix = 'admin.registries.schema.notification';\n    const suffix = success ? 'success' : 'failure';\n    const editedString = edited ? 'edited' : 'created';\n    const messages = observableCombineLatest(\n      this.translateService.get(success ? `${prefix}.${suffix}` : `${prefix}.${suffix}`),\n      this.translateService.get(`${prefix}${isField ? '.field' : ''}.${editedString}`, options),\n    );\n    messages.subscribe(([head, content]) => {\n      if (success) {\n        this.notificationsService.success(head, content);\n      } else {\n        this.notificationsService.error(head, content);\n      }\n    });\n  }\n\n  /**\n   * Retrieve a filtered paginated list of metadata fields\n   * @param query {string}              The query to use for the metadata field name, can be part of\n   *                                    the fully qualified field, should start with the start of\n   *                                    the schema, element or qualifier (e.g. “dc.ti”,\n   *                                    “contributor”, “auth”, “contributor.ot”)\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   * @returns an observable that emits a remote data object with a page of metadata fields that match the query\n   */\n  queryMetadataFields(query: string, options: FindListOptions = {}, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<MetadataField>[]): Observable<RemoteData<PaginatedList<MetadataField>>> {\n    return this.metadataFieldService.searchByFieldNameParams(null, null, null, query, null, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n}\n"],"names":["tap","hasValue","NotificationsService","RemoteDataBuildService","ObjectCacheService","HALEndpointService","CreateDataImpl","DeleteDataImpl","FindAllDataImpl","IdentifiableDataService","PutDataImpl","RequestService","MetadataSchemaDataService","constructor","requestService","rdbService","objectCache","halService","notificationsService","createData","linkPath","responseMsToLive","putData","deleteData","constructIdEndpoint","findAllData","createOrUpdateMetadataSchema","schema","isUpdate","id","put","create","clearRequests","getBrowseEndpoint","pipe","href","removeByHrefSubstring","findAll","options","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","delete","objectId","copyVirtualMetadata","deleteByHref","i0","ɵɵinject","i1","i2","i3","i4","i5","factory","ɵfac","providedIn","createSelector","select","Store","TranslateService","combineLatest","observableCombineLatest","map","mergeMap","MetadataRegistryCancelFieldAction","MetadataRegistryCancelSchemaAction","MetadataRegistryDeselectAllFieldAction","MetadataRegistryDeselectAllSchemaAction","MetadataRegistryDeselectFieldAction","MetadataRegistryDeselectSchemaAction","MetadataRegistryEditFieldAction","MetadataRegistryEditSchemaAction","MetadataRegistrySelectFieldAction","MetadataRegistrySelectSchemaAction","hasValueOperator","isNotEmptyOperator","RequestParam","FindListOptions","MetadataFieldDataService","getFirstSucceededRemoteDataPayload","metadataRegistryStateSelector","state","metadataRegistry","editMetadataSchemaSelector","metadataState","editSchema","selectedMetadataSchemasSelector","selectedSchemas","editMetadataFieldSelector","editField","selectedMetadataFieldsSelector","selectedFields","RegistryService","store","translateService","metadataSchemaService","metadataFieldService","getMetadataSchemas","getMetadataSchemaByPrefix","prefix","Object","assign","elementsPerPage","schemas","page","filter","findById","getMetadataFieldsBySchema","findBySchema","editMetadataSchema","dispatch","cancelEditMetadataSchema","getActiveMetadataSchema","selectMetadataSchema","deselectMetadataSchema","deselectAllMetadataSchema","getSelectedMetadataSchemas","editMetadataField","field","cancelEditMetadataField","getActiveMetadataField","selectMetadataField","deselectMetadataField","deselectAllMetadataField","getSelectedMetadataFields","showNotifications","deleteMetadataSchema","clearMetadataSchemaRequests","createMetadataField","qualifier","toString","updateMetadataField","deleteMetadataField","clearMetadataFieldRequests","success","edited","isField","suffix","editedString","messages","get","subscribe","head","content","error","queryMetadataFields","query","searchByFieldNameParams"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}