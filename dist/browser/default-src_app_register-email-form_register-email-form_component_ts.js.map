{"version":3,"file":"default-src_app_register-email-form_register-email-form_component_ts.js","mappings":"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","sources":["./src/app/core/data/eperson-registration.service.ts","./src/app/core/data/registration-response-parsing.service.ts","./src/app/register-email-form/register-email-form.component.ts","./src/app/register-email-form/register-email-form.component.html","./src/app/shared/google-recaptcha/google-recaptcha.component.ts","./src/app/shared/google-recaptcha/google-recaptcha.component.html"],"sourcesContent":["import {\n  HttpHeaders,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  find,\n  map,\n} from 'rxjs/operators';\n\nimport {\n  hasValue,\n  isNotEmpty,\n} from '../../shared/empty.util';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { HttpOptions } from '../dspace-rest/dspace-rest.service';\nimport { GenericConstructor } from '../shared/generic-constructor';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { getFirstCompletedRemoteData } from '../shared/operators';\nimport { Registration } from '../shared/registration.model';\nimport { ResponseParsingService } from './parsing.service';\nimport { RegistrationResponseParsingService } from './registration-response-parsing.service';\nimport { RemoteData } from './remote-data';\nimport {\n  GetRequest,\n  PostRequest,\n} from './request.models';\nimport { RequestService } from './request.service';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Service that will register a new email address and request a token\n */\nexport class EpersonRegistrationService {\n\n  protected linkPath = 'registrations';\n  protected searchByTokenPath = '/search/findByToken?token=';\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected halService: HALEndpointService,\n  ) {\n\n  }\n\n  /**\n   * Retrieves the Registration endpoint\n   */\n  getRegistrationEndpoint(): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Retrieves the endpoint to search by registration token\n   */\n  getTokenSearchEndpoint(token: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      map((href: string) => `${href}${this.searchByTokenPath}${token}`));\n  }\n\n  /**\n   * Register a new email address\n   * @param email\n   * @param captchaToken the value of x-recaptcha-token header\n   */\n  registerEmail(email: string, captchaToken: string = null, type?: string): Observable<RemoteData<Registration>> {\n    const registration = new Registration();\n    registration.email = email;\n\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getRegistrationEndpoint();\n\n    const options: HttpOptions = Object.create({});\n    let headers = new HttpHeaders();\n    if (captchaToken) {\n      headers = headers.append('x-recaptcha-token', captchaToken);\n    }\n    options.headers = headers;\n\n    if (hasValue(type)) {\n      options.params = type ?\n        new HttpParams({ fromString: 'accountRequestType=' + type }) : new HttpParams();\n    }\n\n    href$.pipe(\n      find((href: string) => hasValue(href)),\n      map((href: string) => {\n        const request = new PostRequest(requestId, href, registration, options);\n        this.requestService.send(request);\n      }),\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID<Registration>(requestId).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n\n  /**\n   * Search a registration based on the provided token\n   * @param token\n   */\n  searchByToken(token: string): Observable<RemoteData<Registration>> {\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getTokenSearchEndpoint(token).pipe(\n      find((href: string) => hasValue(href)),\n    );\n\n    href$.subscribe((href: string) => {\n      const request = new GetRequest(requestId, href);\n      Object.assign(request, {\n        getResponseParser(): GenericConstructor<ResponseParsingService> {\n          return RegistrationResponseParsingService;\n        },\n      });\n      this.requestService.send(request, true);\n    });\n\n    return this.rdbService.buildSingle<Registration>(href$).pipe(\n      map((rd) => {\n        if (rd.hasSucceeded && hasValue(rd.payload)) {\n          return Object.assign(rd, { payload: Object.assign(rd.payload, { token }) });\n        } else {\n          return rd;\n        }\n      }),\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ParsedResponse } from '../cache/response.models';\nimport { RawRestResponse } from '../dspace-rest/raw-rest-response.model';\nimport { Registration } from '../shared/registration.model';\nimport { ResponseParsingService } from './parsing.service';\nimport { RestRequest } from './rest-request.model';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Parsing service responsible for parsing a Registration response\n */\nexport class RegistrationResponseParsingService implements ResponseParsingService {\n\n  parse(request: RestRequest, data: RawRestResponse): ParsedResponse {\n    const payload = data.payload;\n\n    const registration = Object.assign(new Registration(), payload);\n\n    return new ParsedResponse(data.statusCode, undefined, registration);\n  }\n\n}\n","import {\n  AsyncPipe,\n  NgIf,\n} from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n  UntypedFormBuilder,\n  UntypedFormControl,\n  UntypedFormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  Observable,\n  of,\n  Subscription,\n  switchMap,\n} from 'rxjs';\nimport {\n  map,\n  startWith,\n  take,\n} from 'rxjs/operators';\n\nimport { ConfigurationDataService } from '../core/data/configuration-data.service';\nimport { EpersonRegistrationService } from '../core/data/eperson-registration.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport {\n  CAPTCHA_NAME,\n  GoogleRecaptchaService,\n} from '../core/google-recaptcha/google-recaptcha.service';\nimport { CookieService } from '../core/services/cookie.service';\nimport { ConfigurationProperty } from '../core/shared/configuration-property.model';\nimport {\n  getAllSucceededRemoteDataPayload,\n  getFirstSucceededRemoteDataPayload,\n} from '../core/shared/operators';\nimport { Registration } from '../core/shared/registration.model';\nimport { AlertComponent } from '../shared/alert/alert.component';\nimport { AlertType } from '../shared/alert/alert-type';\nimport { BtnDisabledDirective } from '../shared/btn-disabled.directive';\nimport { KlaroService } from '../shared/cookies/klaro.service';\nimport { isNotEmpty } from '../shared/empty.util';\nimport { GoogleRecaptchaComponent } from '../shared/google-recaptcha/google-recaptcha.component';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\n\nexport const TYPE_REQUEST_FORGOT = 'forgot';\nexport const TYPE_REQUEST_REGISTER = 'register';\n\n@Component({\n  selector: 'ds-base-register-email-form',\n  templateUrl: './register-email-form.component.html',\n  standalone: true,\n  imports: [NgIf, FormsModule, ReactiveFormsModule, AlertComponent, GoogleRecaptchaComponent, AsyncPipe, TranslateModule, BtnDisabledDirective],\n})\n/**\n * Component responsible to render an email registration form.\n */\nexport class RegisterEmailFormComponent implements OnDestroy, OnInit {\n\n  /**\n   * The form containing the mail address\n   */\n  form: UntypedFormGroup;\n\n  /**\n   * The message prefix\n   */\n  @Input()\n  MESSAGE_PREFIX: string;\n\n  /**\n   * Type of register request to be done, register new email or forgot password (same endpoint)\n   */\n  @Input()\n  typeRequest: string = null;\n\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * registration verification configuration\n   */\n  registrationVerification = false;\n\n  /**\n   * Return true if the user completed the reCaptcha verification (checkbox mode)\n   */\n  checkboxCheckedSubject$ = new BehaviorSubject<boolean>(false);\n\n  disableUntilChecked = true;\n\n  validMailDomains: string[];\n  TYPE_REQUEST_REGISTER = TYPE_REQUEST_REGISTER;\n\n  subscriptions: Subscription[] = [];\n\n  captchaVersion(): Observable<string> {\n    return this.googleRecaptchaService.captchaVersion();\n  }\n\n  captchaMode(): Observable<string> {\n    return this.googleRecaptchaService.captchaMode();\n  }\n\n  constructor(\n    private epersonRegistrationService: EpersonRegistrationService,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private router: Router,\n    private formBuilder: UntypedFormBuilder,\n    private configService: ConfigurationDataService,\n    public googleRecaptchaService: GoogleRecaptchaService,\n    public cookieService: CookieService,\n    @Optional() public klaroService: KlaroService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private notificationsService: NotificationsService,\n  ) {\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const validators: ValidatorFn[] = [\n      Validators.required,\n      Validators.email,\n      // Regex pattern borrowed from HTML5 specs for a valid email address:\n      // https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\n      Validators.pattern('^[a-zA-Z0-9.!#$%&\\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'),\n    ];\n    this.form = this.formBuilder.group({\n      email: new UntypedFormControl('', {\n        validators: validators,\n      }),\n    });\n    this.validMailDomains = [];\n    if (this.typeRequest === TYPE_REQUEST_REGISTER) {\n      this.subscriptions.push(this.configService.findByPropertyName('authentication-password.domain.valid')\n        .pipe(getAllSucceededRemoteDataPayload())\n        .subscribe((remoteData: ConfigurationProperty) => {\n          this.validMailDomains = remoteData.values;\n          for (const remoteValue of remoteData.values) {\n            if (this.validMailDomains.length !== 0) {\n              this.form.get('email').setValidators([\n                ...validators,\n                Validators.pattern(this.validMailDomains.map((domain: string) => '(^.*' + domain.replace(new RegExp('\\\\.', 'g'), '\\\\.') + '$)').join('|')),\n              ]);\n              this.form.updateValueAndValidity();\n            }\n          }\n          this.changeDetectorRef.detectChanges();\n        }));\n    }\n    this.subscriptions.push(this.configService.findByPropertyName('registration.verification.enabled').pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((res: ConfigurationProperty) => res?.values[0].toLowerCase() === 'true'),\n    ).subscribe((res: boolean) => {\n      this.registrationVerification = res;\n    }));\n\n    this.subscriptions.push(this.disableUntilCheckedFcn().subscribe((res) => {\n      this.disableUntilChecked = res;\n      this.changeDetectorRef.detectChanges();\n    }));\n  }\n\n  /**\n   * execute the captcha function for v2 invisible\n   */\n  executeRecaptcha() {\n    this.googleRecaptchaService.executeRecaptcha();\n  }\n\n  /**\n   * Register an email address\n   */\n  register(tokenV2?) {\n    if (!this.form.invalid) {\n      if (this.registrationVerification) {\n        this.subscriptions.push(combineLatest([this.captchaVersion(), this.captchaMode()]).pipe(\n          switchMap(([captchaVersion, captchaMode])  => {\n            if (captchaVersion === 'v3') {\n              return this.googleRecaptchaService.getRecaptchaToken('register_email');\n            } else if (captchaVersion === 'v2' && captchaMode === 'checkbox') {\n              return of(this.googleRecaptchaService.getRecaptchaTokenResponse());\n            } else if (captchaVersion === 'v2' && captchaMode === 'invisible') {\n              return of(tokenV2);\n            } else {\n              console.error(`Invalid reCaptcha configuration: version = ${captchaVersion}, mode = ${captchaMode}`);\n              this.showNotification('error');\n            }\n          }),\n          take(1),\n        ).subscribe((token) => {\n          if (isNotEmpty(token)) {\n            this.registration(token);\n          } else {\n            console.error('reCaptcha error');\n            this.showNotification('error');\n          }\n        },\n        ));\n      } else {\n        this.registration();\n      }\n    }\n  }\n\n  /**\n   * Registration of an email address\n   */\n  registration(captchaToken = null) {\n    const registerEmail$ = captchaToken ?\n      this.epersonRegistrationService.registerEmail(this.email.value, captchaToken, this.typeRequest) :\n      this.epersonRegistrationService.registerEmail(this.email.value, null, this.typeRequest);\n    this.subscriptions.push(registerEmail$.subscribe((response: RemoteData<Registration>) => {\n      if (response.hasSucceeded) {\n        this.notificationService.success(this.translateService.get(`${this.MESSAGE_PREFIX}.success.head`),\n          this.translateService.get(`${this.MESSAGE_PREFIX}.success.content`, { email: this.email.value }));\n        this.router.navigate(['/home']);\n      } else if (response.statusCode === 422) {\n        this.notificationService.error(this.translateService.get(`${this.MESSAGE_PREFIX}.error.head`), this.translateService.get(`${this.MESSAGE_PREFIX}.error.maildomain`, { domains: this.validMailDomains.join(', ') }));\n      } else {\n        this.notificationService.error(this.translateService.get(`${this.MESSAGE_PREFIX}.error.head`),\n          this.translateService.get(`${this.MESSAGE_PREFIX}.error.content`, { email: this.email.value }));\n      }\n    }));\n  }\n\n  /**\n   * Return true if the user has accepted the required cookies for reCaptcha\n   */\n  isRecaptchaCookieAccepted(): boolean {\n    const klaroAnonymousCookie = this.cookieService.get('klaro-anonymous');\n    return isNotEmpty(klaroAnonymousCookie) ? klaroAnonymousCookie[CAPTCHA_NAME] : false;\n  }\n\n  /**\n   * Return true if the user has not completed the reCaptcha verification (checkbox mode)\n   */\n  disableUntilCheckedFcn(): Observable<boolean> {\n    const checked$ = this.checkboxCheckedSubject$.asObservable();\n    return combineLatest([this.captchaVersion(), this.captchaMode(), checked$]).pipe(\n      // disable if checkbox is not checked or if reCaptcha is not in v2 checkbox mode\n      switchMap(([captchaVersion, captchaMode, checked])  => captchaVersion === 'v2' && captchaMode === 'checkbox' ? of(!checked) : of(false)),\n      startWith(true),\n    );\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n\n  onCheckboxChecked(checked: boolean) {\n    this.checkboxCheckedSubject$.next(checked);\n  }\n\n  /**\n   * Show a notification to the user\n   * @param key\n   */\n  showNotification(key) {\n    const notificationTitle = this.translateService.get(this.MESSAGE_PREFIX + '.google-recaptcha.notification.title');\n    const notificationErrorMsg = this.translateService.get(this.MESSAGE_PREFIX + '.google-recaptcha.notification.message.error');\n    const notificationExpiredMsg = this.translateService.get(this.MESSAGE_PREFIX + '.google-recaptcha.notification.message.expired');\n    switch (key) {\n      case 'expired':\n        this.notificationsService.warning(notificationTitle, notificationExpiredMsg);\n        break;\n      case 'error':\n        this.notificationsService.error(notificationTitle, notificationErrorMsg);\n        break;\n      default:\n        console.warn(`Unimplemented notification '${key}' from reCaptcha service`);\n    }\n  }\n}\n","<div class=\"container\">\n    <h1>{{MESSAGE_PREFIX + '.header'|translate}}</h1>\n    <p>{{MESSAGE_PREFIX + '.info' | translate}}</p>\n\n    <p *ngIf=\"validMailDomains.length !== 0 && typeRequest === TYPE_REQUEST_REGISTER\">\n      {{ MESSAGE_PREFIX + '.info.maildomain' | translate}} {{ validMailDomains.join(', ')}}\n    </p>\n\n    <form [class]=\"'ng-invalid'\" [formGroup]=\"form\">\n\n        <div class=\"form-group\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{MESSAGE_PREFIX + '.email' | translate}}</label>\n                    <input [className]=\"(email.invalid) && (email.dirty || email.touched) ? 'form-control is-invalid' :'form-control'\"\n                           type=\"text\" id=\"email\" formControlName=\"email\"\n                           [attr.aria-label]=\"MESSAGE_PREFIX + '.aria.label' | translate\"\n                           [attr.aria-describedby]=\"(!email.errors) ? '' : (email.errors.required ? 'email-errors-required' : 'email-error-not-valid')\"\n                           [attr.aria-invalid]=\"email.invalid\"/>\n                    <div *ngIf=\"email.invalid && (email.dirty || email.touched)\"\n                         class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"email.errors && email.errors.required\" id=\"email-errors-required\">\n                        {{ MESSAGE_PREFIX + '.email.error.required' | translate }}\n                    </span>\n                    <span *ngIf=\"email.errors && ((email.errors.pattern && this.typeRequest === TYPE_REQUEST_REGISTER) || email.errors.email)\" id=\"email-error-not-valid\">\n                        {{ MESSAGE_PREFIX + '.email.error.not-email-form' | translate }}\n                        <ng-container *ngIf=\"validMailDomains.length > 0\">\n                          {{ MESSAGE_PREFIX + '.email.error.not-valid-domain' | translate: { domains: validMailDomains.join(', ') } }}\n                        </ng-container>\n                    </span>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    {{MESSAGE_PREFIX + '.email.hint' |translate}}\n                </div>\n\n            </div>\n\n        </div>\n\n    <ds-alert [type]=\"AlertTypeEnum.Warning\" *ngIf=\"registrationVerification && !isRecaptchaCookieAccepted()\">\n      <p class=\"m-0\" [innerHTML]=\"MESSAGE_PREFIX + '.google-recaptcha.must-accept-cookies' | translate\"></p>\n      <p class=\"m-0\"><a href=\"javascript:void(0);\" (click)=\"this.klaroService.showSettings()\">{{ MESSAGE_PREFIX + '.google-recaptcha.open-cookie-settings' | translate }}</a></p>\n    </ds-alert>\n\n    <div class=\"my-3\" *ngIf=\"isRecaptchaCookieAccepted() && (googleRecaptchaService.captchaVersion() | async) === 'v2'\">\n      <ds-google-recaptcha [captchaMode]=\"(googleRecaptchaService.captchaMode() | async)\"\n                           (executeRecaptcha)=\"register($event)\" (checkboxChecked)=\"onCheckboxChecked($event)\"\n                           (showNotification)=\"showNotification($event)\"></ds-google-recaptcha>\n    </div>\n\n    <ng-container *ngIf=\"(!registrationVerification  || ((googleRecaptchaService.captchaVersion() | async) !== 'v2' && (googleRecaptchaService.captchaMode() | async) === 'invisible')); else v2Invisible\">\n      <button class=\"btn btn-primary\" [dsBtnDisabled]=\"form.invalid || registrationVerification && !isRecaptchaCookieAccepted() || disableUntilChecked\" (click)=\"register()\">\n        {{ MESSAGE_PREFIX + '.submit' | translate }}\n      </button>\n    </ng-container>\n\n    <ng-template #v2Invisible>\n      <button class=\"btn btn-primary\" [dsBtnDisabled]=\"form.invalid\" (click)=\"executeRecaptcha()\">\n        {{ MESSAGE_PREFIX + '.submit' | translate }}\n      </button>\n    </ng-template>\n    </form>\n\n</div>\n","import { AsyncPipe } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  NativeWindowRef,\n  NativeWindowService,\n} from 'src/app/core/services/window.service';\n\nimport { ConfigurationDataService } from '../../core/data/configuration-data.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { isNotEmpty } from '../empty.util';\n\n@Component({\n  selector: 'ds-google-recaptcha',\n  templateUrl: './google-recaptcha.component.html',\n  styleUrls: ['./google-recaptcha.component.scss'],\n  standalone: true,\n  imports: [AsyncPipe],\n})\nexport class GoogleRecaptchaComponent implements OnInit {\n\n  @Input() captchaMode: string;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() executeRecaptcha: EventEmitter<any> = new EventEmitter();\n\n  @Output() checkboxChecked: EventEmitter<boolean> = new EventEmitter();\n\n  @Output() showNotification: EventEmitter<any> = new EventEmitter();\n\n  recaptchaKey$: Observable<any>;\n\n  constructor(\n    @Inject(NativeWindowService) private _window: NativeWindowRef,\n    private configService: ConfigurationDataService,\n  ) {\n  }\n\n  /**\n   * Retrieve the google recaptcha site key\n   */\n  ngOnInit() {\n    this.recaptchaKey$ = this.configService.findByPropertyName('google.recaptcha.key.site').pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    this._window.nativeWindow.dataCallback = this.dataCallbackFcn;\n    this._window.nativeWindow.expiredCallback = this.expiredCallbackFcn;\n    this._window.nativeWindow.errorCallback = this.errorCallbackFcn;\n  }\n\n  dataCallbackFcn = ($event) => {\n    switch (this.captchaMode) {\n      case 'invisible':\n        this.executeRecaptcha.emit($event);\n        break;\n      case 'checkbox':\n        this.checkboxChecked.emit(isNotEmpty($event));\n        break;\n      default:\n        console.error(`Invalid reCaptcha mode '${this.captchaMode}`);\n        this.showNotification.emit('error');\n    }\n  };\n\n  expiredCallbackFcn = () => {\n    this.checkboxChecked.emit(false);\n    this.showNotification.emit('expired');\n  };\n\n  errorCallbackFcn = () => {\n    this.showNotification.emit('error');\n  };\n\n}\n","<div class=\"g-recaptcha\"\n     [attr.data-callback]=\"'dataCallback'\"\n     [attr.data-expired-callback]=\"'expiredCallback'\"\n     [attr.data-error-callback]=\"'errorCallback'\"\n     [attr.data-sitekey]=\"(recaptchaKey$ | async)?.values[0]\"\n     [attr.data-size]=\"captchaMode === 'invisible' ? 'invisible' : null\"></div>\n"],"names":["HttpHeaders","HttpParams","filter","find","map","hasValue","isNotEmpty","RemoteDataBuildService","HALEndpointService","getFirstCompletedRemoteData","Registration","RegistrationResponseParsingService","GetRequest","PostRequest","RequestService","EpersonRegistrationService","constructor","requestService","rdbService","halService","linkPath","searchByTokenPath","getRegistrationEndpoint","getEndpoint","getTokenSearchEndpoint","token","pipe","href","registerEmail","email","captchaToken","type","registration","requestId","generateRequestId","href$","options","Object","create","headers","append","params","fromString","request","send","subscribe","buildFromRequestUUID","searchByToken","assign","getResponseParser","buildSingle","rd","hasSucceeded","payload","i0","ɵɵinject","i1","i2","i3","factory","ɵfac","providedIn","ParsedResponse","parse","data","statusCode","undefined","AsyncPipe","NgIf","ChangeDetectorRef","FormsModule","ReactiveFormsModule","UntypedFormBuilder","UntypedFormControl","Validators","Router","TranslateModule","TranslateService","BehaviorSubject","combineLatest","of","switchMap","startWith","take","ConfigurationDataService","CAPTCHA_NAME","GoogleRecaptchaService","CookieService","getAllSucceededRemoteDataPayload","getFirstSucceededRemoteDataPayload","AlertComponent","AlertType","BtnDisabledDirective","KlaroService","GoogleRecaptchaComponent","NotificationsService","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","ɵɵpipeBind1","ctx_r0","MESSAGE_PREFIX","validMailDomains","join","ɵɵtextInterpolate1","ɵɵelementContainerStart","ɵɵpipeBind2","ɵɵpureFunction1","_c0","ɵɵtemplate","RegisterEmailFormComponent_div_17_span_2_ng_container_3_Template","ɵɵproperty","length","RegisterEmailFormComponent_div_17_span_1_Template","RegisterEmailFormComponent_div_17_span_2_Template","errors","required","pattern","typeRequest","TYPE_REQUEST_REGISTER","ɵɵelement","ɵɵlistener","RegisterEmailFormComponent_ds_alert_21_Template_a_click_4_listener","ɵɵrestoreView","_r2","ɵɵnextContext","ɵɵresetView","klaroService","showSettings","AlertTypeEnum","Warning","ɵɵsanitizeHtml","ɵɵtextInterpolate","RegisterEmailFormComponent_div_22_Template_ds_google_recaptcha_executeRecaptcha_1_listener","$event","_r3","register","RegisterEmailFormComponent_div_22_Template_ds_google_recaptcha_checkboxChecked_1_listener","onCheckboxChecked","RegisterEmailFormComponent_div_22_Template_ds_google_recaptcha_showNotification_1_listener","showNotification","googleRecaptchaService","captchaMode","RegisterEmailFormComponent_ng_container_24_Template_button_click_1_listener","_r4","form","invalid","registrationVerification","isRecaptchaCookieAccepted","disableUntilChecked","RegisterEmailFormComponent_ng_template_27_Template_button_click_0_listener","_r5","executeRecaptcha","TYPE_REQUEST_FORGOT","RegisterEmailFormComponent","captchaVersion","epersonRegistrationService","notificationService","translateService","router","formBuilder","configService","cookieService","changeDetectorRef","notificationsService","checkboxCheckedSubject$","subscriptions","ngOnDestroy","forEach","sub","unsubscribe","ngOnInit","validators","group","push","findByPropertyName","remoteData","values","remoteValue","get","setValidators","domain","replace","RegExp","updateValueAndValidity","detectChanges","res","toLowerCase","disableUntilCheckedFcn","tokenV2","getRecaptchaToken","getRecaptchaTokenResponse","console","error","registerEmail$","value","response","success","navigate","domains","klaroAnonymousCookie","checked$","asObservable","checked","next","key","notificationTitle","notificationErrorMsg","notificationExpiredMsg","warning","warn","ɵɵdirectiveInject","i4","i5","i6","i7","i8","i9","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","RegisterEmailFormComponent_Template","rf","ctx","RegisterEmailFormComponent_p_7_Template","RegisterEmailFormComponent_div_17_Template","RegisterEmailFormComponent_ds_alert_21_Template","RegisterEmailFormComponent_div_22_Template","RegisterEmailFormComponent_ng_container_24_Template","RegisterEmailFormComponent_ng_template_27_Template","ɵɵtemplateRefExtractor","ɵɵclassMap","dirty","touched","v2Invisible_r6","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","TranslatePipe","encapsulation","EventEmitter","NativeWindowRef","NativeWindowService","_window","checkboxChecked","dataCallbackFcn","emit","expiredCallbackFcn","errorCallbackFcn","recaptchaKey$","nativeWindow","dataCallback","expiredCallback","errorCallback","outputs","GoogleRecaptchaComponent_Template","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}