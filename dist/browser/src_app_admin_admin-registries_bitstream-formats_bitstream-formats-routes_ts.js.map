{"version":3,"file":"src_app_admin_admin-registries_bitstream-formats_bitstream-formats-routes_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;AACyC;AAIZ;AAEoE;AAGjB;AACc;AACR;AACX;;;;;;AAE3E;;;AAYM,MAAOQ,2BAA2B;EAEtCC,YACUC,MAAc,EACdC,mBAAyC,EACzCC,gBAAkC,EAClCC,0BAAsD;IAHtD,KAAAH,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,0BAA0B,GAA1BA,0BAA0B;EAEpC;EAEA;;;;;;EAMAC,qBAAqBA,CAACC,eAAgC;IACpD,IAAI,CAACF,0BAA0B,CAACC,qBAAqB,CAACC,eAAe,CAAC,CAACC,IAAI,CACzEZ,mFAA2B,EAAE,CAC9B,CAACa,SAAS,CAAEC,QAAqC,IAAI;MACpD,IAAIA,QAAQ,CAACC,YAAY,EAAE;QACzB,IAAI,CAACR,mBAAmB,CAACS,OAAO,CAAC,IAAI,CAACR,gBAAgB,CAACS,GAAG,CAAC,wDAAwD,CAAC,EAClH,IAAI,CAACT,gBAAgB,CAACS,GAAG,CAAC,2DAA2D,CAAC,CAAC;QACzF,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAChB,+FAA8B,EAAE,CAAC,CAAC;QACxD,IAAI,CAACO,0BAA0B,CAACU,4BAA4B,EAAE,CAACN,SAAS,EAAE;MAC5E,CAAC,MAAM;QACL,IAAI,CAACN,mBAAmB,CAACa,KAAK,CAAC,IAAI,CAACZ,gBAAgB,CAACS,GAAG,CAAC,wDAAwD,CAAC,EAChH,IAAI,CAACT,gBAAgB,CAACS,GAAG,CAAC,2DAA2D,CAAC,CAAC;MAC3F;IACF,CAAC,CACA;EACH;;;uBA/BWb,2BAA2B,EAAAiB,+DAAA,CAAAE,mDAAA,GAAAF,+DAAA,CAAAG,6FAAA,GAAAH,+DAAA,CAAAI,iEAAA,GAAAJ,+DAAA,CAAAK,gGAAA;IAAA;EAAA;;;YAA3BtB,2BAA2B;MAAAuB,SAAA;MAAAC,UAAA;MAAAC,QAAA,GAAAR,iEAAA;MAAAU,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,qCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCxB5Bf,4DAHZ,aAAuB,aACF,aACY,YAEU;UAAAA,oDAAA,GAAiE;;UAAAA,0DAAA,EAAK;UAErGA,4DAAA,kCAA0E;UAAhDA,wDAAA,2BAAAqB,uFAAAC,MAAA;YAAA,OAAiBN,GAAA,CAAA3B,qBAAA,CAAAiC,MAAA,CAA6B;UAAA,EAAC;UAIrFtB,0DAJsF,EAA2B,EAEnG,EACJ,EACJ;;;UANqCA,uDAAA,GAAiE;UAAjEA,+DAAA,CAAAA,yDAAA,wDAAiE;;;qBDkBxGlB,mFAAmB,EACnBN,gEAAe,EAAA4B,8DAAA;MAAAuB,aAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;AErByE;AACQ;AAC1B;AACF;AAC+B;AAEvG,MAAMK,yBAAyB,GAAG,UAAU;AAC5C,MAAMC,wBAAwB,GAAG,KAAK;AAEtC,MAAMC,SAAS,GAAG,EAAE;AAEb,MAAMC,MAAM,GAAY,CAC7B;EACEC,IAAI,EAAE,EAAE;EACRF,SAAS;EACTG,SAAS,EAAER,mFAAyBA;CACrC,EACD;EACEO,IAAI,EAAEH,wBAAwB;EAC9BK,OAAO,EAAE;IAAEC,UAAU,EAAEX,8FAAsBA;EAAA,CAAE;EAC/CM,SAAS;EACTG,SAAS,EAAEtD,6GAA2B;EACtCyD,IAAI,EAAE;IAAEC,aAAa,EAAE;EAA2C;CACnE,EACD;EACEL,IAAI,EAAEJ,yBAAyB;EAC/BE,SAAS;EACTG,SAAS,EAAEN,gHAA4B;EACvCO,OAAO,EAAE;IACPhD,eAAe,EAAEwC,iFAAwB;IACzCS,UAAU,EAAEX,8FAAsBA;GACnC;EACDY,IAAI,EAAE;IAAEC,aAAa,EAAE;EAAyC;CACjE,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCwB;AAMoB;AAIhB;AAQL;AAEsE;AAId;AAGH;AACc;AACL;AACqB;;;;;;;;;ICO0BzC,4DAAA,WAAuC;IAAAA,oDAAA,GAAqE;;IAAAA,0DAAA,EAAO;;;IAA5EA,uDAAA,EAAqE;IAArEA,gEAAA,MAAAA,yDAAA,iEAAqE;;;;;;IAV/NA,4DAHN,SAA+E,SACzE,gBACkB,gBAKjB;;;IADMA,wDAAA,oBAAAuD,kFAAAjC,MAAA;MAAA,MAAAkC,kBAAA,GAAAxD,2DAAA,CAAA0D,GAAA,EAAAC,SAAA;MAAA,MAAAC,MAAA,GAAA5D,2DAAA;MAAA,OAAAA,yDAAA,CAAU4D,MAAA,CAAAG,qBAAA,CAAAP,kBAAA,EAAAlC,MAAA,CAA8C;IAAA,EAAC;IAHhEtB,0DAAA,EAIC;IACDA,4DAAA,eAAsB;IAAAA,oDAAA,GAAiE;;IAE3FA,0DAF2F,EAAO,EACxF,EACL;IACDA,4DAAJ,SAAI,aAAsF;IAAAA,oDAAA,IAAsB;IAAIA,0DAAJ,EAAI,EAAK;IACrHA,4DAAJ,UAAI,aAAsF;IAAAA,oDAAA,IAAoC;IAAIA,0DAAJ,EAAI,EAAK;IACnIA,4DAAJ,UAAI,aAAsF;IAAAA,oDAAA,IAA6B;IAAAA,wDAAA,KAAAiE,iEAAA,mBAAuC;IAAgFjE,0DAAJ,EAAI,EAAK;IAC/OA,4DAAJ,UAAI,aAAsF;IAAAA,oDAAA,IAAqG;;IACjMA,0DADiM,EAAI,EAAK,EACrM;;;;;;IAVQA,uDAAA,GAA+E;IAA/EA,wDAAA,aAAAmE,OAAA,GAAAnE,yDAAA,QAAA4D,MAAA,CAAAQ,2BAAA,oBAAAD,OAAA,CAAAE,QAAA,CAAAb,kBAAA,CAAAc,EAAA,EAA+E;;IAGhEtE,uDAAA,GAAiE;IAAjEA,gEAAA,KAAAA,yDAAA,0DAAiE;IAGpFA,uDAAA,GAAkF;IAAlFA,wDAAA,eAAAA,6DAAA,KAAAwE,GAAA,EAAAhB,kBAAA,CAAAc,EAAA,EAAkF;IAACtE,uDAAA,EAAsB;IAAtBA,+DAAA,CAAAwD,kBAAA,CAAAc,EAAA,CAAsB;IACzGtE,uDAAA,GAAkF;IAAlFA,wDAAA,eAAAA,6DAAA,KAAAwE,GAAA,EAAAhB,kBAAA,CAAAc,EAAA,EAAkF;IAACtE,uDAAA,EAAoC;IAApCA,+DAAA,CAAAwD,kBAAA,CAAAiB,gBAAA,CAAoC;IACvHzE,uDAAA,GAAkF;IAAlFA,wDAAA,eAAAA,6DAAA,KAAAwE,GAAA,EAAAhB,kBAAA,CAAAc,EAAA,EAAkF;IAACtE,uDAAA,EAA6B;IAA7BA,gEAAA,KAAAwD,kBAAA,CAAAkB,QAAA,MAA6B;IAAO1E,uDAAA,EAA8B;IAA9BA,wDAAA,SAAAwD,kBAAA,CAAAmB,QAAA,CAA8B;IACrJ3E,uDAAA,GAAkF;IAAlFA,wDAAA,eAAAA,6DAAA,KAAAwE,GAAA,EAAAhB,kBAAA,CAAAc,EAAA,EAAkF;IAACtE,uDAAA,EAAqG;IAArGA,+DAAA,CAAAA,yDAAA,oEAAAwD,kBAAA,CAAAoB,YAAA,EAAqG;;;;;IAhCvM5E,4DAAA,wBAKmC;;IAKXA,4DAJtB,cAA8B,gBACgC,YACnD,SACH,aACc,eAAsB;IAAAA,oDAAA,GAAmE;;IAAOA,0DAAP,EAAO,EAAK;IACrHA,4DAAA,cAAgB;IAAAA,oDAAA,IAA6D;;IAAAA,0DAAA,EAAK;IAClFA,4DAAA,cAAgB;IAAAA,oDAAA,IAA+D;;IAAAA,0DAAA,EAAK;IACpFA,4DAAA,cAAgB;IAAAA,oDAAA,IAAmE;;IAAAA,0DAAA,EAAK;IACxFA,4DAAA,cAAgB;IAAAA,oDAAA,IAA4E;;IAE9FA,0DAF8F,EAAK,EAC9F,EACG;IACRA,4DAAA,aAAO;IACPA,wDAAA,KAAA6E,yDAAA,mBAA+E;;IAmBrF7E,0DAHM,EAAQ,EACF,EACJ,EACQ;;;;;;IAhCdA,wDAHA,sBAAA4D,MAAA,CAAAkB,UAAA,CAAgC,oBAAAC,OAAA,GAAA/E,yDAAA,QAAA4D,MAAA,CAAAoB,iBAAA,oBAAAD,OAAA,CAAAE,OAAA,kBAAAF,OAAA,CAAAE,OAAA,CAAAC,aAAA,CACsC,mBACpD,iCACc;IAKYlF,uDAAA,GAAmE;IAAnEA,+DAAA,CAAAA,yDAAA,6DAAmE;IACzFA,uDAAA,GAA6D;IAA7DA,+DAAA,CAAAA,yDAAA,wDAA6D;IAC7DA,uDAAA,GAA+D;IAA/DA,+DAAA,CAAAA,yDAAA,0DAA+D;IAC/DA,uDAAA,GAAmE;IAAnEA,+DAAA,CAAAA,yDAAA,8DAAmE;IACnEA,uDAAA,GAA4E;IAA5EA,+DAAA,CAAAA,yDAAA,uEAA4E;IAI9DA,uDAAA,GAA6C;IAA7CA,wDAAA,aAAAmF,QAAA,GAAAnF,yDAAA,SAAA4D,MAAA,CAAAoB,iBAAA,oBAAAG,QAAA,CAAAF,OAAA,kBAAAE,QAAA,CAAAF,OAAA,CAAAG,IAAA,CAA6C;;;;;IAoBnFpF,4DAAA,cAA6G;IAC3GA,oDAAA,GACF;;IAAAA,0DAAA,EAAM;;;IADJA,uDAAA,EACF;IADEA,gEAAA,MAAAA,yDAAA,2DACF;;;;;;IAGEA,4DAAA,iBAAgI;IAAxBA,wDAAA,mBAAAqF,qEAAA;MAAArF,2DAAA,CAAAsF,GAAA;MAAA,MAAA1B,MAAA,GAAA5D,2DAAA;MAAA,OAAAA,yDAAA,CAAS4D,MAAA,CAAA2B,WAAA,EAAa;IAAA,EAAC;IAACvF,oDAAA,GAAuE;;IAAAA,0DAAA,EAAS;;;IAAhFA,uDAAA,EAAuE;IAAvEA,+DAAA,CAAAA,yDAAA,gEAAuE;;;;;;IACvMA,4DAAA,iBAAkJ;IAA1BA,wDAAA,mBAAAwF,qEAAA;MAAAxF,2DAAA,CAAAyF,GAAA;MAAA,MAAA7B,MAAA,GAAA5D,2DAAA;MAAA,OAAAA,yDAAA,CAAS4D,MAAA,CAAA8B,aAAA,EAAe;IAAA,EAAC;IAAC1F,oDAAA,GAAiE;;IAAAA,0DAAA,EAAS;;;IAA1EA,uDAAA,EAAiE;IAAjEA,+DAAA,CAAAA,yDAAA,0DAAiE;;;ADlB3N;;;AAgBM,MAAO6B,yBAAyB;EAsBpC7C,YAAoB2G,oBAA0C,EAC1CxG,gBAAkC,EAClCyG,sBAAkD,EAClDC,iBAAoC;IAHpC,KAAAF,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAxG,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAyG,sBAAsB,GAAtBA,sBAAsB;IACtB,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAbrC;;;;IAIA,KAAAf,UAAU,GAA+BgB,MAAM,CAACC,MAAM,CAAC,IAAI1C,6GAA0B,EAAE,EAAE;MACvFiB,EAAE,EAAE,KAAK;MACT0B,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;KACtC,CAAC;EAOF;EAGA;;;EAGAP,aAAaA,CAAA;IACX,IAAI,CAACE,sBAAsB,CAAC9F,4BAA4B,EAAE;IAC1D,IAAI,CAAC8F,sBAAsB,CAACM,2BAA2B,EAAE,CAAC3G,IAAI,CAC5D0D,oDAAI,CAAC,CAAC,CAAC;IACP;IACAF,wDAAQ,CAAEoD,OAA0B,IAAKA,OAAO,CAAC;IACjD;IACApD,wDAAQ,CAAEqD,MAAuB,IAAK,IAAI,CAACR,sBAAsB,CAACS,MAAM,CAACD,MAAM,CAAC9B,EAAE,CAAC,CAAC/E,IAAI;IACtF;IACAZ,mFAA2B,EAAE;IAC7B;IACAmE,mDAAG,CAAErD,QAA+B,IAAKA,QAAQ,CAACC,YAAY,CAAC,CAChE,CAAC;IACF;IACAwD,wDAAO,EAAE,CACV,CAAC1D,SAAS,CAAE8G,OAAkB,IAAI;MACjC;MACA,MAAMC,gBAAgB,GAAGD,OAAO,CAACE,MAAM,CAAEC,MAAe,IAAKA,MAAM,CAAC;MACpE,MAAMC,eAAe,GAAGJ,OAAO,CAACE,MAAM,CAAEC,MAAe,IAAK,CAACA,MAAM,CAAC;MAEpE;MACA,IAAIF,gBAAgB,CAACI,MAAM,GAAG,CAAC,EAAE;QAC/B,IAAI,CAACC,gBAAgB,CAAC,IAAI,EAAEL,gBAAgB,CAACI,MAAM,CAAC;MACtD;MACA,IAAID,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9B,IAAI,CAACC,gBAAgB,CAAC,KAAK,EAAEF,eAAe,CAACC,MAAM,CAAC;MACtD;MAEA;MACA,IAAI,CAACpB,WAAW,EAAE;MAElB;MACA,IAAI,CAACM,iBAAiB,CAACgB,SAAS,CAAC,IAAI,CAAC/B,UAAU,CAACR,EAAE,CAAC;IACtD,CAAC,CAAC;EACJ;EAEA;;;EAGAiB,WAAWA,CAAA;IACT,IAAI,CAACK,sBAAsB,CAACkB,2BAA2B,EAAE;EAC3D;EAEA;;;EAGAC,0BAA0BA,CAAA;IACxB,OAAO,IAAI,CAACnB,sBAAsB,CAACM,2BAA2B,EAAE,CAAC3G,IAAI,CACnEuD,mDAAG,CAAEkE,gBAAmC,IAAKA,gBAAgB,CAAClE,GAAG,CAAEmE,cAAc,IAAKA,cAAc,CAAC3C,EAAE,CAAC,CAAC,CAC1G;EACH;EAEA;;;;;EAKAP,qBAAqBA,CAACzE,eAAgC,EAAE4H,KAAK;IAC3DA,KAAK,CAACC,MAAM,CAACC,OAAO,GAClB,IAAI,CAACxB,sBAAsB,CAACyB,qBAAqB,CAAC/H,eAAe,CAAC,GAClE,IAAI,CAACsG,sBAAsB,CAAC0B,uBAAuB,CAAChI,eAAe,CAAC;EACxE;EAEA;;;;;EAKQsH,gBAAgBA,CAACjH,OAAgB,EAAE4H,MAAc;IACvD,MAAMC,MAAM,GAAG,2CAA2C;IAC1D,MAAMC,MAAM,GAAG9H,OAAO,GAAG,SAAS,GAAG,SAAS;IAE9C,MAAM+H,IAAI,GAAW,IAAI,CAACvI,gBAAgB,CAACwI,OAAO,CAAC,GAAGH,MAAM,IAAIC,MAAM,OAAO,CAAC;IAC9E,MAAMG,OAAO,GAAW,IAAI,CAACzI,gBAAgB,CAACwI,OAAO,CAAC,GAAGH,MAAM,IAAIC,MAAM,SAAS,EAAE;MAAEF,MAAM,EAAEA;IAAM,CAAE,CAAC;IAEvG,IAAI5H,OAAO,EAAE;MACX,IAAI,CAACgG,oBAAoB,CAAChG,OAAO,CAAC+H,IAAI,EAAEE,OAAO,CAAC;IAClD,CAAC,MAAM;MACL,IAAI,CAACjC,oBAAoB,CAAC5F,KAAK,CAAC2H,IAAI,EAAEE,OAAO,CAAC;IAChD;EACF;EAEAC,QAAQA,CAAA;IACN,IAAI,CAAC7C,iBAAiB,GAAG,IAAI,CAACa,iBAAiB,CAACiC,kBAAkB,CAAC,IAAI,CAAChD,UAAU,CAACR,EAAE,EAAE,IAAI,CAACQ,UAAU,CAAC,CAACvF,IAAI,CAC1GyD,0DAAS,CAAE+E,eAAgC,IAAI;MAC7C,OAAO,IAAI,CAACnC,sBAAsB,CAACoC,OAAO,CAACD,eAAe,CAAC;IAC7D,CAAC,CAAC,CACH;IACD,IAAI,CAAC3D,2BAA2B,GAAG,IAAI,CAAC2C,0BAA0B,EAAE;EACtE;EAGAkB,WAAWA,CAAA;IACT,IAAI,CAACpC,iBAAiB,CAACqC,eAAe,CAAC,IAAI,CAACpD,UAAU,CAACR,EAAE,CAAC;EAC5D;;;uBA/HWzC,yBAAyB,EAAA7B,+DAAA,CAAAE,6FAAA,GAAAF,+DAAA,CAAAG,kEAAA,GAAAH,+DAAA,CAAAI,gGAAA,GAAAJ,+DAAA,CAAAK,kFAAA;IAAA;EAAA;;;YAAzBwB,yBAAyB;MAAAvB,SAAA;MAAAC,UAAA;MAAAC,QAAA,GAAAR,iEAAA;MAAAU,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAsH,mCAAApH,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UChDhCf,4DAJN,aAAuB,aACc,aACb,YAEyB;UAAAA,oDAAA,GAAyD;;UAAAA,0DAAA,EAAK;UAEzGA,4DAAA,WAAoB;UAAAA,oDAAA,GAAgE;;UAAAA,0DAAA,EAAI;UACxDA,4DAAhC,WAAgC,YAAgD;UAAAA,oDAAA,IAA+D;;UAAIA,0DAAJ,EAAI,EAAI;UAGvJA,wDAAA,KAAAoI,mDAAA,6BAKmC;;UAiCnCpI,wDAAA,KAAAqI,yCAAA,iBAA6G;;UAI7GrI,4DAAA,WAAK;UACHA,wDAAA,KAAAsI,4CAAA,oBAAgI;;UAChItI,wDAAA,KAAAuI,4CAAA,qBAAkJ;;UAI1JvI,0DAHM,EAAM,EACF,EACF,EACF;;;;;;;UAtD2CA,uDAAA,GAAyD;UAAzDA,+DAAA,CAAAA,yDAAA,kDAAyD;UAEhFA,uDAAA,GAAgE;UAAhEA,+DAAA,CAAAA,yDAAA,0DAAgE;UACjDA,uDAAA,GAAoB;UAApBA,wDAAA,qBAAoB;UAAyBA,uDAAA,EAA+D;UAA/DA,+DAAA,CAAAA,yDAAA,0DAA+D;UAI5IA,uDAAA,GAA6D;UAA7DA,wDAAA,WAAAwI,OAAA,GAAAxI,yDAAA,SAAAgB,GAAA,CAAAgE,iBAAA,oBAAAwD,OAAA,CAAAvD,OAAA,kBAAAuD,OAAA,CAAAvD,OAAA,CAAAC,aAAA,MAA6D;UAqC1DlF,uDAAA,GAA+D;UAA/DA,wDAAA,WAAAyI,OAAA,GAAAzI,yDAAA,SAAAgB,GAAA,CAAAgE,iBAAA,oBAAAyD,OAAA,CAAAxD,OAAA,kBAAAwD,OAAA,CAAAxD,OAAA,CAAAC,aAAA,QAA+D;UAK1DlF,uDAAA,GAA4D;UAA5DA,wDAAA,WAAA0I,OAAA,GAAA1I,yDAAA,SAAAgB,GAAA,CAAAgE,iBAAA,oBAAA0D,OAAA,CAAAzD,OAAA,kBAAAyD,OAAA,CAAAzD,OAAA,CAAAG,IAAA,kBAAAsD,OAAA,CAAAzD,OAAA,CAAAG,IAAA,CAAAuB,MAAA,MAA4D;UAC5D3G,uDAAA,GAA4D;UAA5DA,wDAAA,WAAA2I,OAAA,GAAA3I,yDAAA,SAAAgB,GAAA,CAAAgE,iBAAA,oBAAA2D,OAAA,CAAA1D,OAAA,kBAAA0D,OAAA,CAAA1D,OAAA,CAAAG,IAAA,kBAAAuD,OAAA,CAAA1D,OAAA,CAAAG,IAAA,CAAAuB,MAAA,MAA4D;;;qBDXzE/D,kDAAI,EACJF,uDAAS,EACTG,wDAAU,EACVrE,iEAAe,EAAA2B,+DAAA,EACfiD,wFAAmB,EACnBT,qDAAO;MAAAhB,aAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;;AEhD4B;AAQuD;AAGjB;AAE7E;;;;;;;;AAQO,MAAMG,wBAAwB,GAA2CA,CAC9E+G,KAA6B,EAC7BC,KAA0B,EAC1B1J,0BAAA,GAAyDwJ,qDAAM,CAAClK,gGAA0B,CAAC,KAChD;EAC3C,OAAOU,0BAA0B,CAAC2J,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC1E,EAAE,CAAC,CACxD/E,IAAI,CACHZ,mFAA2B,EAAE,CAC9B;AACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AC9B2C;AAQnB;AAII;AAEQ;AAE4D;AAGjB;AACc;AACR;AACX;;;;;;;;;AAE3E;;;;AAcM,MAAOoD,4BAA4B;EAOvC/C,YACU6J,KAAqB,EACrB5J,MAAc,EACdC,mBAAyC,EACzCC,gBAAkC,EAClCC,0BAAsD;IAJtD,KAAAyJ,KAAK,GAALA,KAAK;IACL,KAAA5J,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,0BAA0B,GAA1BA,0BAA0B;EAEpC;EAEAyI,QAAQA,CAAA;IACN,IAAI,CAACqB,kBAAkB,GAAG,IAAI,CAACL,KAAK,CAACrG,IAAI,CAACjD,IAAI,CAC5CuD,mDAAG,CAAEN,IAAI,IAAKA,IAAI,CAAClD,eAA8C,CAAC,CACnE;EACH;EAEA;;;;;EAKA6J,YAAYA,CAAC7J,eAAgC;IAC3C,IAAI,CAACF,0BAA0B,CAACgK,qBAAqB,CAAC9J,eAAe,CAAC,CAACC,IAAI,CACzEZ,mFAA2B,EAAE,CAC9B,CAACa,SAAS,CAAEC,QAAqC,IAAI;MACpD,IAAIA,QAAQ,CAACC,YAAY,EAAE;QACzB,IAAI,CAACR,mBAAmB,CAACS,OAAO,CAAC,IAAI,CAACR,gBAAgB,CAACS,GAAG,CAAC,sDAAsD,CAAC,EAChH,IAAI,CAACT,gBAAgB,CAACS,GAAG,CAAC,yDAAyD,CAAC,CAAC;QACvF,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAChB,+FAA8B,EAAE,CAAC,CAAC;MAC1D,CAAC,MAAM;QACL,IAAI,CAACK,mBAAmB,CAACa,KAAK,CAAC,sDAAsD,EACnF,wDAAwD,CAAC;MAC7D;IACF,CAAC,CACA;EACH;;;uBAzCWgC,4BAA4B,EAAA/B,+DAAA,CAAAE,2DAAA,GAAAF,+DAAA,CAAAE,mDAAA,GAAAF,+DAAA,CAAAG,6FAAA,GAAAH,+DAAA,CAAAI,iEAAA,GAAAJ,+DAAA,CAAAK,gGAAA;IAAA;EAAA;;;YAA5B0B,4BAA4B;MAAAzB,SAAA;MAAAC,UAAA;MAAAC,QAAA,GAAAR,iEAAA;MAAAU,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAwI,sCAAAtI,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCnC7Bf,4DAHZ,aAAuB,aACF,aACY,YAEU;UAAAA,oDAAA,GAAgI;;;UAAAA,0DAAA,EAAK;UAEnKA,4DAAA,kCAA2H;;UAAvCA,wDAAA,2BAAAsJ,wFAAAhI,MAAA;YAAA,OAAiBN,GAAA,CAAAmI,YAAA,CAAA7H,MAAA,CAAoB;UAAA,EAAC;UAIvItB,0DAJwI,EAA2B,EAErJ,EACJ,EACJ;;;;;UANqCA,uDAAA,GAAgI;UAAhIA,+DAAA,CAAAA,yDAAA,uDAAAA,6DAAA,IAAAwE,GAAA,GAAAgF,OAAA,GAAAxJ,yDAAA,OAAAgB,GAAA,CAAAkI,kBAAA,oBAAAM,OAAA,CAAAvE,OAAA,CAAAR,gBAAA,GAAgI;UAEpIzE,uDAAA,GAAyD;UAAzDA,wDAAA,qBAAAyJ,OAAA,GAAAzJ,yDAAA,OAAAgB,GAAA,CAAAkI,kBAAA,oBAAAO,OAAA,CAAAxE,OAAA,CAAyD;;;qBD0B5FnG,mFAAmB,EACnBN,gEAAe,EAAA4B,8DAAA,EACfsC,sDAAS;MAAAf,aAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;AElC0B;AAOhB;AACkB;AAST;AAEsC;AACW;AACoB;AAI9D;AACgC;AACe;;;;;;IC3BtF3B,4DAAA,iBAEiF;IAAtBA,wDAA1B,wBAAAsK,qEAAA;MAAAtK,2DAAA,CAAA0D,GAAA;MAAA,MAAA6G,MAAA,GAAAvK,2DAAA;MAAA,OAAAA,yDAAA,CAAcuK,MAAA,CAAAC,QAAA,EAAU;IAAA,EAAC,oBAAAC,iEAAA;MAAAzK,2DAAA,CAAA0D,GAAA;MAAA,MAAA6G,MAAA,GAAAvK,2DAAA;MAAA,OAAAA,yDAAA,CAAWuK,MAAA,CAAAG,QAAA,EAAU;IAAA,EAAC;IAAC1K,0DAAA,EAAU;;;;IAAlFA,wDADA,4BAA2B,cAAAuK,MAAA,CAAAI,SAAA,CACJ;;;AD2BhC;;;AAYM,MAAO7L,mBAAmB;EAkG9BE,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAhG1B;;;;IAIS,KAAAK,eAAe,GAAoB,IAAI2K,gFAAe,EAAE;IAEjE;;;IAGU,KAAAW,aAAa,GAAkC,IAAIlB,uDAAY,EAAmB;IAE5F;;;IAGA,KAAAmB,mBAAmB,GAAG,CAAC;MAAEC,KAAK,EAAEZ,oGAA2B,CAACa,KAAK;MAAEC,KAAK,EAAEd,oGAA2B,CAACa;IAAK,CAAE,EAC3G;MAAED,KAAK,EAAEZ,oGAA2B,CAACe,OAAO;MAAED,KAAK,EAAEd,oGAA2B,CAACe;IAAO,CAAE,EAC1F;MAAEH,KAAK,EAAEZ,oGAA2B,CAACgB,SAAS;MAAEF,KAAK,EAAEd,oGAA2B,CAACgB;IAAS,CAAE,CAAC;IAEjG;;;IAGA,KAAAC,kBAAkB,GAA6B;MAC7CC,IAAI,EAAE;QACJC,KAAK,EAAE;;KAEV;IAED;;;IAGA,KAAAC,uBAAuB,GAA6B;MAClDF,IAAI,EAAE;QACJG,IAAI,EAAE;;KAET;IAED;;;IAGA,KAAAZ,SAAS,GAA8B,CACrC,IAAId,qEAAiB,CAAC;MACpBvF,EAAE,EAAE,kBAAkB;MACtBkH,IAAI,EAAE,kBAAkB;MACxBV,KAAK,EAAE,gEAAgE;MACvEW,IAAI,EAAE,+DAA+D;MACrEC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;QACVD,QAAQ,EAAE;OACX;MACDE,aAAa,EAAE;QACbF,QAAQ,EAAE;;KAEb,CAAC,EACF,IAAI7B,qEAAiB,CAAC;MACpBvF,EAAE,EAAE,UAAU;MACdkH,IAAI,EAAE,UAAU;MAChBV,KAAK,EAAE,wDAAwD;MAC/DW,IAAI,EAAE;KAEP,CAAC,EACF,IAAI1B,wEAAoB,CAAC;MACvBzF,EAAE,EAAE,aAAa;MACjBkH,IAAI,EAAE,aAAa;MACnBV,KAAK,EAAE,2DAA2D;MAClEW,IAAI,EAAE,0DAA0D;MAChEI,UAAU,EAAE7B,kEAAW,CAAC8B,IAAI,CAACD;KAE9B,CAAC,EACF,IAAI/B,sEAAkB,CAAC;MACrBxF,EAAE,EAAE,cAAc;MAClBkH,IAAI,EAAE,cAAc;MACpBO,OAAO,EAAE,IAAI,CAAClB,mBAAmB;MACjCC,KAAK,EAAE,4DAA4D;MACnEW,IAAI,EAAE,2DAA2D;MACjET,KAAK,EAAE,IAAI,CAACH,mBAAmB,CAAC,CAAC,CAAC,CAACG;KAEpC,CAAC,EACF,IAAIrB,wEAAoB,CAAC;MACvBrF,EAAE,EAAE,UAAU;MACdkH,IAAI,EAAE,UAAU;MAChBV,KAAK,EAAE,UAAU;MACjBW,IAAI,EAAE;KACP,CAAC,EACF,IAAI7B,yEAAqB,CAAC;MACxBtF,EAAE,EAAE,YAAY;MAChBkH,IAAI,EAAE,YAAY;MAClBV,KAAK,EAAE,0DAA0D;MACjEkB,YAAY,EAAEA,CAAA,KAAM,CAClB,IAAInC,qEAAiB,CAAC;QACpBvF,EAAE,EAAE,WAAW;QACf2H,WAAW,EAAE;OACd,EAAE,IAAI,CAACX,uBAAuB,CAAC;KAEnC,EAAE,IAAI,CAACH,kBAAkB,CAAC,CAC5B;EAID;EAEAtD,QAAQA,CAAA;IAEN,IAAI,CAACqE,UAAU,EAAE;EACnB;EAEA;;;EAGAA,UAAUA,CAAA;IACR,IAAI,CAACvB,SAAS,CAACwB,OAAO,CACnBC,UAAmC,IAAI;MACtC,IAAIA,UAAU,CAACZ,IAAI,KAAK,YAAY,EAAE;QACpC,IAAIrB,4DAAQ,CAAC,IAAI,CAAC7K,eAAe,CAAC+M,UAAU,CAAC,EAAE;UAC7C,MAAMC,WAAW,GAAG,IAAI,CAAChN,eAAe,CAAC+M,UAAU;UACnD,MAAME,SAAS,GAAIH,UAAoC;UACvD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAAC3F,MAAM,EAAE6F,CAAC,EAAE,EAAE;YAC3CD,SAAS,CAACE,WAAW,CAACD,CAAC,CAAC,CAACnB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAIxB,qEAAiB,CAAC;cACxDvF,EAAE,EAAE,aAAakI,CAAC,EAAE;cACpBxB,KAAK,EAAEsB,WAAW,CAACE,CAAC;aACrB,EAAE,IAAI,CAAClB,uBAAuB,CAAC;UAClC;QACF;MACF,CAAC,MAAM;QACL,IAAInB,4DAAQ,CAAC,IAAI,CAAC7K,eAAe,CAAC8M,UAAU,CAACZ,IAAI,CAAC,CAAC,EAAE;UAClDY,UAAgC,CAACpB,KAAK,GAAG,IAAI,CAAC1L,eAAe,CAAC8M,UAAU,CAACZ,IAAI,CAAC;QACjF;MACF;IACF,CAAC,CAAC;EACN;EAEA;;;;EAIAhB,QAAQA,CAAA;IACN,MAAMkC,sBAAsB,GAAG5G,MAAM,CAACC,MAAM,CAAC,IAAIkE,gFAAe,EAAE,EAChE;MACE3F,EAAE,EAAE,IAAI,CAAChF,eAAe,CAACgF;KAC1B,CAAC;IAEJ,IAAI,CAACqG,SAAS,CAACwB,OAAO,CACnBC,UAAmC,IAAI;MACtC,IAAIA,UAAU,CAACZ,IAAI,KAAK,YAAY,EAAE;QACpC,MAAMe,SAAS,GAAIH,UAAoC;QACvD,MAAMC,UAAU,GAAG,EAAE;QACrB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACI,MAAM,CAAChG,MAAM,EAAE6F,CAAC,EAAE,EAAE;UAChD,MAAMxB,KAAK,GAAIuB,SAAS,CAAC3M,GAAG,CAAC4M,CAAC,CAAC,CAAC5M,GAAG,CAAC,CAAC,CAAuB,CAACoL,KAAK;UAClE,IAAI,CAACZ,2DAAO,CAACY,KAAK,CAAC,EAAE;YACnBqB,UAAU,CAACO,IAAI,CAAEL,SAAS,CAAC3M,GAAG,CAAC4M,CAAC,CAAC,CAAC5M,GAAG,CAAC,CAAC,CAAuB,CAACoL,KAAK,CAAC;UACvE;QACF;QACA0B,sBAAsB,CAACL,UAAU,GAAGA,UAAU;MAChD,CAAC,MAAM;QACLK,sBAAsB,CAACN,UAAU,CAACZ,IAAI,CAAC,GAAIY,UAAgC,CAACpB,KAAK;MACnF;IACF,CAAC,CAAC;IACJ,IAAI,CAACJ,aAAa,CAACiC,IAAI,CAACH,sBAAsB,CAAC;EACjD;EAEA;;;EAGAhC,QAAQA,CAAA;IACN,IAAI,CAACzL,MAAM,CAACY,QAAQ,CAAC,CAAChB,+FAA8B,EAAE,CAAC,CAAC;EAC1D;;;uBAtKWC,mBAAmB,EAAAkB,+DAAA,CAAAE,mDAAA;IAAA;EAAA;;;YAAnBpB,mBAAmB;MAAAwB,SAAA;MAAAwM,MAAA;QAAAxN,eAAA;MAAA;MAAAyN,OAAA;QAAAnC,aAAA;MAAA;MAAArK,UAAA;MAAAC,QAAA,GAAAR,iEAAA;MAAAU,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAmM,6BAAAjM,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCzChCf,wDAAA,IAAAiN,sCAAA,qBAEiF;;;UAFvEjN,wDAAA,SAAAgB,GAAA,CAAA2J,SAAA,CAAe;;;qBDoCrBN,sEAAa,EACbzH,iDAAI;MAAAjB,aAAA;IAAA;EAAA","sources":["./src/app/admin/admin-registries/bitstream-formats/add-bitstream-format/add-bitstream-format.component.ts","./src/app/admin/admin-registries/bitstream-formats/add-bitstream-format/add-bitstream-format.component.html","./src/app/admin/admin-registries/bitstream-formats/bitstream-formats-routes.ts","./src/app/admin/admin-registries/bitstream-formats/bitstream-formats.component.ts","./src/app/admin/admin-registries/bitstream-formats/bitstream-formats.component.html","./src/app/admin/admin-registries/bitstream-formats/bitstream-formats.resolver.ts","./src/app/admin/admin-registries/bitstream-formats/edit-bitstream-format/edit-bitstream-format.component.ts","./src/app/admin/admin-registries/bitstream-formats/edit-bitstream-format/edit-bitstream-format.component.html","./src/app/admin/admin-registries/bitstream-formats/format-form/format-form.component.ts","./src/app/admin/admin-registries/bitstream-formats/format-form/format-form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\n\nimport { BitstreamFormatDataService } from '../../../../core/data/bitstream-format-data.service';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { getBitstreamFormatsModuleRoute } from '../../admin-registries-routing-paths';\nimport { FormatFormComponent } from '../format-form/format-form.component';\n\n/**\n * This component renders the page to create a new bitstream format.\n */\n@Component({\n  selector: 'ds-add-bitstream-format',\n  templateUrl: './add-bitstream-format.component.html',\n  imports: [\n    FormatFormComponent,\n    TranslateModule,\n  ],\n  standalone: true,\n})\nexport class AddBitstreamFormatComponent {\n\n  constructor(\n    private router: Router,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private bitstreamFormatDataService: BitstreamFormatDataService,\n  ) {\n  }\n\n  /**\n   * Creates a new bitstream format based on the provided bitstream format emitted by the form.\n   * When successful, a success notification will be shown and the user will be navigated back to the overview page.\n   * When failed, an error  notification will be shown.\n   * @param bitstreamFormat\n   */\n  createBitstreamFormat(bitstreamFormat: BitstreamFormat) {\n    this.bitstreamFormatDataService.createBitstreamFormat(bitstreamFormat).pipe(\n      getFirstCompletedRemoteData(),\n    ).subscribe((response: RemoteData<BitstreamFormat>) => {\n      if (response.hasSucceeded) {\n        this.notificationService.success(this.translateService.get('admin.registries.bitstream-formats.create.success.head'),\n          this.translateService.get('admin.registries.bitstream-formats.create.success.content'));\n        this.router.navigate([getBitstreamFormatsModuleRoute()]);\n        this.bitstreamFormatDataService.clearBitStreamFormatRequests().subscribe();\n      } else {\n        this.notificationService.error(this.translateService.get('admin.registries.bitstream-formats.create.failure.head'),\n          this.translateService.get('admin.registries.bitstream-formats.create.failure.content'));\n      }\n    },\n    );\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12 mb-4\">\n            <h1 id=\"sub-header\"\n                class=\"border-bottom pb-2\">{{ 'admin.registries.bitstream-formats.create.new' | translate }}</h1>\n\n            <ds-bitstream-format-form (updatedFormat)=\"createBitstreamFormat($event)\"></ds-bitstream-format-form>\n\n        </div>\n    </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { i18nBreadcrumbResolver } from '../../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { AddBitstreamFormatComponent } from './add-bitstream-format/add-bitstream-format.component';\nimport { BitstreamFormatsComponent } from './bitstream-formats.component';\nimport { bitstreamFormatsResolver } from './bitstream-formats.resolver';\nimport { EditBitstreamFormatComponent } from './edit-bitstream-format/edit-bitstream-format.component';\n\nconst BITSTREAMFORMAT_EDIT_PATH = ':id/edit';\nconst BITSTREAMFORMAT_ADD_PATH = 'add';\n\nconst providers = [];\n\nexport const ROUTES: Route[] = [\n  {\n    path: '',\n    providers,\n    component: BitstreamFormatsComponent,\n  },\n  {\n    path: BITSTREAMFORMAT_ADD_PATH,\n    resolve: { breadcrumb: i18nBreadcrumbResolver },\n    providers,\n    component: AddBitstreamFormatComponent,\n    data: { breadcrumbKey: 'admin.registries.bitstream-formats.create' },\n  },\n  {\n    path: BITSTREAMFORMAT_EDIT_PATH,\n    providers,\n    component: EditBitstreamFormatComponent,\n    resolve: {\n      bitstreamFormat: bitstreamFormatsResolver,\n      breadcrumb: i18nBreadcrumbResolver,\n    },\n    data: { breadcrumbKey: 'admin.registries.bitstream-formats.edit' },\n  },\n];\n","import {\n  AsyncPipe,\n  NgForOf,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  switchMap,\n  take,\n  toArray,\n} from 'rxjs/operators';\n\nimport { BitstreamFormatDataService } from '../../../core/data/bitstream-format-data.service';\nimport { FindListOptions } from '../../../core/data/find-list-options.model';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { BitstreamFormat } from '../../../core/shared/bitstream-format.model';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\n\n/**\n * This component renders a list of bitstream formats\n */\n@Component({\n  selector: 'ds-bitstream-formats',\n  templateUrl: './bitstream-formats.component.html',\n  imports: [\n    NgIf,\n    AsyncPipe,\n    RouterLink,\n    TranslateModule,\n    PaginationComponent,\n    NgForOf,\n  ],\n  standalone: true,\n})\nexport class BitstreamFormatsComponent implements OnInit, OnDestroy {\n\n  /**\n   * A paginated list of bitstream formats to be shown on the page\n   */\n  bitstreamFormats$: Observable<RemoteData<PaginatedList<BitstreamFormat>>>;\n\n  /**\n   * The currently selected {@link BitstreamFormat} IDs\n   */\n  selectedBitstreamFormatIDs$: Observable<string[]>;\n\n  /**\n   * The current pagination configuration for the page\n   * Currently simply renders all bitstream formats\n   */\n  pageConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'rbp',\n    pageSize: 20,\n    pageSizeOptions: [20, 40, 60, 80, 100],\n  });\n\n  constructor(private notificationsService: NotificationsService,\n              private translateService: TranslateService,\n              private bitstreamFormatService: BitstreamFormatDataService,\n              private paginationService: PaginationService,\n  ) {\n  }\n\n\n  /**\n   * Deletes the currently selected formats from the registry and updates the presented list\n   */\n  deleteFormats() {\n    this.bitstreamFormatService.clearBitStreamFormatRequests();\n    this.bitstreamFormatService.getSelectedBitstreamFormats().pipe(\n      take(1),\n      // emit all formats in the array one at a time\n      mergeMap((formats: BitstreamFormat[]) => formats),\n      // delete each format\n      mergeMap((format: BitstreamFormat) => this.bitstreamFormatService.delete(format.id).pipe(\n        // wait for each response to come back\n        getFirstCompletedRemoteData(),\n        // return a boolean to indicate whether a response succeeded\n        map((response: RemoteData<NoContent>) => response.hasSucceeded),\n      )),\n      // wait for all responses to come in and return them as a single array\n      toArray(),\n    ).subscribe((results: boolean[]) => {\n      // Count the number of succeeded and failed deletions\n      const successResponses = results.filter((result: boolean) => result);\n      const failedResponses = results.filter((result: boolean) => !result);\n\n      // Show a notification indicating the number of succeeded and failed deletions\n      if (successResponses.length > 0) {\n        this.showNotification(true, successResponses.length);\n      }\n      if (failedResponses.length > 0) {\n        this.showNotification(false, failedResponses.length);\n      }\n\n      // reset the selection\n      this.deselectAll();\n\n      // reload the page\n      this.paginationService.resetPage(this.pageConfig.id);\n    });\n  }\n\n  /**\n   * Deselects all selecetd bitstream formats\n   */\n  deselectAll() {\n    this.bitstreamFormatService.deselectAllBitstreamFormats();\n  }\n\n  /**\n   * Returns the list of all the bitstream formats that are selected in the list (checkbox)\n   */\n  selectedBitstreamFormatIDs(): Observable<string[]> {\n    return this.bitstreamFormatService.getSelectedBitstreamFormats().pipe(\n      map((bitstreamFormats: BitstreamFormat[]) => bitstreamFormats.map((selectedFormat) => selectedFormat.id)),\n    );\n  }\n\n  /**\n   * Selects or deselects a bitstream format based on the checkbox state\n   * @param bitstreamFormat\n   * @param event\n   */\n  selectBitStreamFormat(bitstreamFormat: BitstreamFormat, event) {\n    event.target.checked ?\n      this.bitstreamFormatService.selectBitstreamFormat(bitstreamFormat) :\n      this.bitstreamFormatService.deselectBitstreamFormat(bitstreamFormat);\n  }\n\n  /**\n   * Show notifications for an amount of deleted bitstream formats\n   * @param success   Whether or not the notification should be a success message (error message when false)\n   * @param amount    The amount of deleted bitstream formats\n   */\n  private showNotification(success: boolean, amount: number) {\n    const prefix = 'admin.registries.bitstream-formats.delete';\n    const suffix = success ? 'success' : 'failure';\n\n    const head: string = this.translateService.instant(`${prefix}.${suffix}.head`);\n    const content: string = this.translateService.instant(`${prefix}.${suffix}.amount`, { amount: amount });\n\n    if (success) {\n      this.notificationsService.success(head, content);\n    } else {\n      this.notificationsService.error(head, content);\n    }\n  }\n\n  ngOnInit(): void {\n    this.bitstreamFormats$ = this.paginationService.getFindListOptions(this.pageConfig.id, this.pageConfig).pipe(\n      switchMap((findListOptions: FindListOptions) => {\n        return this.bitstreamFormatService.findAll(findListOptions);\n      }),\n    );\n    this.selectedBitstreamFormatIDs$ = this.selectedBitstreamFormatIDs();\n  }\n\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.pageConfig.id);\n  }\n}\n","<div class=\"container\">\n  <div class=\"bitstream-formats row\">\n    <div class=\"col-12\">\n\n      <h1 id=\"header\" class=\"border-bottom pb-2\">{{'admin.registries.bitstream-formats.head' | translate}}</h1>\n\n      <p id=\"description\">{{'admin.registries.bitstream-formats.description' | translate}}</p>\n      <p id=\"create-new\" class=\"mb-2\"><a [routerLink]=\"'add'\" class=\"btn btn-success\">{{'admin.registries.bitstream-formats.create.new' | translate}}</a></p>\n\n\n      <ds-pagination\n        *ngIf=\"(bitstreamFormats$ | async)?.payload?.totalElements > 0\"\n        [paginationOptions]=\"pageConfig\"\n        [collectionSize]=\"(bitstreamFormats$ | async)?.payload?.totalElements\"\n        [hideGear]=\"false\"\n        [hidePagerWhenSinglePage]=\"true\">\n        <div class=\"table-responsive\">\n          <table id=\"formats\" class=\"table table-striped table-hover\">\n            <thead>\n            <tr>\n              <th scope=\"col\"><span class=\"sr-only\">{{'admin.registries.bitstream-formats.table.selected' | translate}}</span></th>\n              <th scope=\"col\">{{'admin.registries.bitstream-formats.table.id' | translate}}</th>\n              <th scope=\"col\">{{'admin.registries.bitstream-formats.table.name' | translate}}</th>\n              <th scope=\"col\">{{'admin.registries.bitstream-formats.table.mimetype' | translate}}</th>\n              <th scope=\"col\">{{'admin.registries.bitstream-formats.table.supportLevel.head' | translate}}</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let bitstreamFormat of (bitstreamFormats$ | async)?.payload?.page\">\n              <td>\n                <label class=\"mb-0\">\n                  <input type=\"checkbox\"\n                         [attr.aria-label]=\"'admin.registries.bitstream-formats.select' | translate\"\n                         [checked]=\"(selectedBitstreamFormatIDs$ | async)?.includes(bitstreamFormat.id)\"\n                         (change)=\"selectBitStreamFormat(bitstreamFormat, $event)\"\n                  >\n                  <span class=\"sr-only\">{{'admin.registries.bitstream-formats.select' | translate}}&#125;</span>\n                </label>\n              </td>\n              <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{bitstreamFormat.id}}</a></td>\n              <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{bitstreamFormat.shortDescription}}</a></td>\n              <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{bitstreamFormat.mimetype}} <span *ngIf=\"bitstreamFormat.internal\">({{'admin.registries.bitstream-formats.table.internal' | translate}})</span></a></td>\n              <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{'admin.registries.bitstream-formats.table.supportLevel.'+bitstreamFormat.supportLevel | translate}}</a></td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n      </ds-pagination>\n      <div *ngIf=\"(bitstreamFormats$ | async)?.payload?.totalElements === 0\" class=\"alert alert-info\" role=\"alert\">\n        {{'admin.registries.bitstream-formats.no-items' | translate}}\n      </div>\n\n      <div>\n        <button *ngIf=\"(bitstreamFormats$ | async)?.payload?.page?.length > 0\" class=\"btn btn-primary deselect\" (click)=\"deselectAll()\">{{'admin.registries.bitstream-formats.table.deselect-all' | translate}}</button>\n        <button *ngIf=\"(bitstreamFormats$ | async)?.payload?.page?.length > 0\" type=\"submit\" class=\"btn btn-danger float-right\" (click)=\"deleteFormats()\">{{'admin.registries.bitstream-formats.table.delete' | translate}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { BitstreamFormatDataService } from '../../../core/data/bitstream-format-data.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { BitstreamFormat } from '../../../core/shared/bitstream-format.model';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n/**\n * Method for resolving an bitstreamFormat based on the parameters in the current route\n * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n * @param {RouterStateSnapshot} state\n * @param {BitstreamFormatDataService} bitstreamFormatDataService The BitstreamFormatDataService\n * @returns Observable<<RemoteData<BitstreamFormat>> Emits the found bitstreamFormat based on the parameters in the current route,\n * or an error if something went wrong\n */\nexport const bitstreamFormatsResolver: ResolveFn<RemoteData<BitstreamFormat>> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  bitstreamFormatDataService: BitstreamFormatDataService = inject(BitstreamFormatDataService),\n): Observable<RemoteData<BitstreamFormat>> => {\n  return bitstreamFormatDataService.findById(route.params.id)\n    .pipe(\n      getFirstCompletedRemoteData(),\n    );\n};\n","import { AsyncPipe } from '@angular/common';\nimport {\n  Component,\n  OnInit,\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  Router,\n} from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BitstreamFormatDataService } from '../../../../core/data/bitstream-format-data.service';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { getBitstreamFormatsModuleRoute } from '../../admin-registries-routing-paths';\nimport { FormatFormComponent } from '../format-form/format-form.component';\n\n/**\n * This component renders the edit page of a bitstream format.\n * The route parameter 'id' is used to request the bitstream format.\n */\n@Component({\n  selector: 'ds-edit-bitstream-format',\n  templateUrl: './edit-bitstream-format.component.html',\n  imports: [\n    FormatFormComponent,\n    TranslateModule,\n    AsyncPipe,\n  ],\n  standalone: true,\n})\nexport class EditBitstreamFormatComponent implements OnInit {\n\n  /**\n   * The bitstream format wrapped in a remote-data object\n   */\n  bitstreamFormatRD$: Observable<RemoteData<BitstreamFormat>>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private bitstreamFormatDataService: BitstreamFormatDataService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.bitstreamFormatRD$ = this.route.data.pipe(\n      map((data) => data.bitstreamFormat as RemoteData<BitstreamFormat>),\n    );\n  }\n\n  /**\n   * Updates the bitstream format based on the provided bitstream format emitted by the form.\n   * When successful, a success notification will be shown and the user will be navigated back to the overview page.\n   * When failed, an error  notification will be shown.\n   */\n  updateFormat(bitstreamFormat: BitstreamFormat) {\n    this.bitstreamFormatDataService.updateBitstreamFormat(bitstreamFormat).pipe(\n      getFirstCompletedRemoteData(),\n    ).subscribe((response: RemoteData<BitstreamFormat>) => {\n      if (response.hasSucceeded) {\n        this.notificationService.success(this.translateService.get('admin.registries.bitstream-formats.edit.success.head'),\n          this.translateService.get('admin.registries.bitstream-formats.edit.success.content'));\n        this.router.navigate([getBitstreamFormatsModuleRoute()]);\n      } else {\n        this.notificationService.error('admin.registries.bitstream-formats.edit.failure.head',\n          'admin.registries.bitstream-formats.create.edit.content');\n      }\n    },\n    );\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12 mb-4\">\n            <h1 id=\"sub-header\"\n                class=\"border-bottom pb-2\">{{'admin.registries.bitstream-formats.edit.head' | translate:{format: (bitstreamFormatRD$ | async)?.payload.shortDescription} }}</h1>\n\n             <ds-bitstream-format-form [bitstreamFormat]=\"(bitstreamFormatRD$ | async)?.payload\" (updatedFormat)=\"updateFormat($event)\"></ds-bitstream-format-form>\n\n        </div>\n    </div>\n</div>\n","import { NgIf } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  DynamicCheckboxModel,\n  DynamicFormArrayModel,\n  DynamicFormControlLayout,\n  DynamicFormControlModel,\n  DynamicInputModel,\n  DynamicSelectModel,\n  DynamicTextAreaModel,\n} from '@ng-dynamic-forms/core';\n\nimport { environment } from '../../../../../environments/environment';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { BitstreamFormatSupportLevel } from '../../../../core/shared/bitstream-format-support-level';\nimport {\n  hasValue,\n  isEmpty,\n} from '../../../../shared/empty.util';\nimport { FormComponent } from '../../../../shared/form/form.component';\nimport { getBitstreamFormatsModuleRoute } from '../../admin-registries-routing-paths';\n\n/**\n * The component responsible for rendering the form to create/edit a bitstream format\n */\n@Component({\n  selector: 'ds-bitstream-format-form',\n  templateUrl: './format-form.component.html',\n  imports: [\n    FormComponent,\n    NgIf,\n  ],\n  standalone: true,\n})\nexport class FormatFormComponent implements OnInit {\n\n  /**\n   * The current bitstream format\n   * This can either be and existing one or a new one\n   */\n  @Input() bitstreamFormat: BitstreamFormat = new BitstreamFormat();\n\n  /**\n   * EventEmitter that will emit the updated bitstream format\n   */\n  @Output() updatedFormat: EventEmitter<BitstreamFormat> = new EventEmitter<BitstreamFormat>();\n\n  /**\n   * The different supported support level of the bitstream format\n   */\n  supportLevelOptions = [{ label: BitstreamFormatSupportLevel.Known, value: BitstreamFormatSupportLevel.Known },\n    { label: BitstreamFormatSupportLevel.Unknown, value: BitstreamFormatSupportLevel.Unknown },\n    { label: BitstreamFormatSupportLevel.Supported, value: BitstreamFormatSupportLevel.Supported }];\n\n  /**\n   * Styling element for repeatable field\n   */\n  arrayElementLayout: DynamicFormControlLayout = {\n    grid: {\n      group: 'form-row',\n    },\n  };\n\n  /**\n   * Styling element for element of repeatable field\n   */\n  arrayInputElementLayout: DynamicFormControlLayout = {\n    grid: {\n      host: 'col',\n    },\n  };\n\n  /**\n   * The form model representing the bitstream format\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'shortDescription',\n      name: 'shortDescription',\n      label: 'admin.registries.bitstream-formats.edit.shortDescription.label',\n      hint: 'admin.registries.bitstream-formats.edit.shortDescription.hint',\n      required: true,\n      validators: {\n        required: null,\n      },\n      errorMessages: {\n        required: 'Please enter a name for this bitstream format',\n      },\n    }),\n    new DynamicInputModel({\n      id: 'mimetype',\n      name: 'mimetype',\n      label: 'admin.registries.bitstream-formats.edit.mimetype.label',\n      hint: 'admin.registries.bitstream-formats.edit.mimetype.hint',\n\n    }),\n    new DynamicTextAreaModel({\n      id: 'description',\n      name: 'description',\n      label: 'admin.registries.bitstream-formats.edit.description.label',\n      hint: 'admin.registries.bitstream-formats.edit.description.hint',\n      spellCheck: environment.form.spellCheck,\n\n    }),\n    new DynamicSelectModel({\n      id: 'supportLevel',\n      name: 'supportLevel',\n      options: this.supportLevelOptions,\n      label: 'admin.registries.bitstream-formats.edit.supportLevel.label',\n      hint: 'admin.registries.bitstream-formats.edit.supportLevel.hint',\n      value: this.supportLevelOptions[0].value,\n\n    }),\n    new DynamicCheckboxModel({\n      id: 'internal',\n      name: 'internal',\n      label: 'Internal',\n      hint: 'admin.registries.bitstream-formats.edit.internal.hint',\n    }),\n    new DynamicFormArrayModel({\n      id: 'extensions',\n      name: 'extensions',\n      label: 'admin.registries.bitstream-formats.edit.extensions.label',\n      groupFactory: () => [\n        new DynamicInputModel({\n          id: 'extension',\n          placeholder: 'admin.registries.bitstream-formats.edit.extensions.placeholder',\n        }, this.arrayInputElementLayout),\n      ],\n    }, this.arrayElementLayout),\n  ];\n\n  constructor(private router: Router) {\n\n  }\n\n  ngOnInit(): void {\n\n    this.initValues();\n  }\n\n  /**\n   * Initializes the form based on the provided bitstream format\n   */\n  initValues() {\n    this.formModel.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        if (fieldModel.name === 'extensions') {\n          if (hasValue(this.bitstreamFormat.extensions)) {\n            const extenstions = this.bitstreamFormat.extensions;\n            const formArray = (fieldModel as DynamicFormArrayModel);\n            for (let i = 0; i < extenstions.length; i++) {\n              formArray.insertGroup(i).group[0] = new DynamicInputModel({\n                id: `extension-${i}`,\n                value: extenstions[i],\n              }, this.arrayInputElementLayout);\n            }\n          }\n        } else {\n          if (hasValue(this.bitstreamFormat[fieldModel.name])) {\n            (fieldModel as DynamicInputModel).value = this.bitstreamFormat[fieldModel.name];\n          }\n        }\n      });\n  }\n\n  /**\n   * Creates an updated bistream format based on the current values in the form\n   * Emits the updated bitstream format trouhg the updatedFormat emitter\n   */\n  onSubmit() {\n    const updatedBitstreamFormat = Object.assign(new BitstreamFormat(),\n      {\n        id: this.bitstreamFormat.id,\n      });\n\n    this.formModel.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        if (fieldModel.name === 'extensions') {\n          const formArray = (fieldModel as DynamicFormArrayModel);\n          const extensions = [];\n          for (let i = 0; i < formArray.groups.length; i++) {\n            const value = (formArray.get(i).get(0) as DynamicInputModel).value;\n            if (!isEmpty(value)) {\n              extensions.push((formArray.get(i).get(0) as DynamicInputModel).value);\n            }\n          }\n          updatedBitstreamFormat.extensions = extensions;\n        } else {\n          updatedBitstreamFormat[fieldModel.name] = (fieldModel as DynamicInputModel).value;\n        }\n      });\n    this.updatedFormat.emit(updatedBitstreamFormat);\n  }\n\n  /**\n   * Cancels the edit/create action of the bitstream format and navigates back to the bitstream format registry\n   */\n  onCancel() {\n    this.router.navigate([getBitstreamFormatsModuleRoute()]);\n  }\n}\n","<ds-form *ngIf=\"formModel\"\n         [formId]=\"'comcol-form-id'\"\n         [formModel]=\"formModel\" (submitForm)=\"onSubmit()\" (cancel)=\"onCancel()\"></ds-form>"],"names":["Router","TranslateModule","TranslateService","BitstreamFormatDataService","getFirstCompletedRemoteData","NotificationsService","getBitstreamFormatsModuleRoute","FormatFormComponent","AddBitstreamFormatComponent","constructor","router","notificationService","translateService","bitstreamFormatDataService","createBitstreamFormat","bitstreamFormat","pipe","subscribe","response","hasSucceeded","success","get","navigate","clearBitStreamFormatRequests","error","i0","ɵɵdirectiveInject","i1","i2","i3","i4","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AddBitstreamFormatComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","AddBitstreamFormatComponent_Template_ds_bitstream_format_form_updatedFormat_6_listener","$event","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","TranslatePipe","encapsulation","i18nBreadcrumbResolver","BitstreamFormatsComponent","bitstreamFormatsResolver","EditBitstreamFormatComponent","BITSTREAMFORMAT_EDIT_PATH","BITSTREAMFORMAT_ADD_PATH","providers","ROUTES","path","component","resolve","breadcrumb","data","breadcrumbKey","AsyncPipe","NgForOf","NgIf","RouterLink","map","mergeMap","switchMap","take","toArray","PaginationService","PaginationComponent","PaginationComponentOptions","ɵɵtextInterpolate1","BitstreamFormatsComponent_ds_pagination_13_tr_23_Template_input_change_3_listener","bitstreamFormat_r2","ɵɵrestoreView","_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","selectBitStreamFormat","ɵɵtemplate","BitstreamFormatsComponent_ds_pagination_13_tr_23_span_18_Template","ɵɵproperty","tmp_3_0","selectedBitstreamFormatIDs$","includes","id","ɵɵpureFunction1","_c0","shortDescription","mimetype","internal","supportLevel","BitstreamFormatsComponent_ds_pagination_13_tr_23_Template","pageConfig","tmp_2_0","bitstreamFormats$","payload","totalElements","tmp_10_0","page","BitstreamFormatsComponent_button_18_Template_button_click_0_listener","_r4","deselectAll","BitstreamFormatsComponent_button_20_Template_button_click_0_listener","_r5","deleteFormats","notificationsService","bitstreamFormatService","paginationService","Object","assign","pageSize","pageSizeOptions","getSelectedBitstreamFormats","formats","format","delete","results","successResponses","filter","result","failedResponses","length","showNotification","resetPage","deselectAllBitstreamFormats","selectedBitstreamFormatIDs","bitstreamFormats","selectedFormat","event","target","checked","selectBitstreamFormat","deselectBitstreamFormat","amount","prefix","suffix","head","instant","content","ngOnInit","getFindListOptions","findListOptions","findAll","ngOnDestroy","clearPagination","BitstreamFormatsComponent_Template","BitstreamFormatsComponent_ds_pagination_13_Template","BitstreamFormatsComponent_div_15_Template","BitstreamFormatsComponent_button_18_Template","BitstreamFormatsComponent_button_20_Template","tmp_4_0","tmp_5_0","tmp_6_0","tmp_7_0","inject","route","state","findById","params","ActivatedRoute","bitstreamFormatRD$","updateFormat","updateBitstreamFormat","EditBitstreamFormatComponent_Template","EditBitstreamFormatComponent_Template_ds_bitstream_format_form_updatedFormat_7_listener","ɵɵpipeBind2","tmp_0_0","tmp_1_0","EventEmitter","DynamicCheckboxModel","DynamicFormArrayModel","DynamicInputModel","DynamicSelectModel","DynamicTextAreaModel","environment","BitstreamFormat","BitstreamFormatSupportLevel","hasValue","isEmpty","FormComponent","FormatFormComponent_ds_form_0_Template_ds_form_submitForm_0_listener","ctx_r1","onSubmit","FormatFormComponent_ds_form_0_Template_ds_form_cancel_0_listener","onCancel","formModel","updatedFormat","supportLevelOptions","label","Known","value","Unknown","Supported","arrayElementLayout","grid","group","arrayInputElementLayout","host","name","hint","required","validators","errorMessages","spellCheck","form","options","groupFactory","placeholder","initValues","forEach","fieldModel","extensions","extenstions","formArray","i","insertGroup","updatedBitstreamFormat","groups","push","emit","inputs","outputs","FormatFormComponent_Template","FormatFormComponent_ds_form_0_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}