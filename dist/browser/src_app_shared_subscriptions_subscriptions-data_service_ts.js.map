{"version":3,"file":"src_app_shared_subscriptions_subscriptions-data_service_ts.js","mappings":"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","sources":["./src/app/shared/subscriptions/subscriptions-data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { sendRequest } from 'src/app/core/shared/request.operators';\n\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { RemoteDataBuildService } from '../../core/cache/builders/remote-data-build.service';\nimport { RequestParam } from '../../core/cache/models/request-param.model';\nimport { ObjectCacheService } from '../../core/cache/object-cache.service';\nimport { DeleteDataImpl } from '../../core/data/base/delete-data';\nimport { FindAllData } from '../../core/data/base/find-all-data';\nimport { IdentifiableDataService } from '../../core/data/base/identifiable-data.service';\nimport { SearchDataImpl } from '../../core/data/base/search-data';\nimport { DSOChangeAnalyzer } from '../../core/data/dso-change-analyzer.service';\nimport { FindListOptions } from '../../core/data/find-list-options.model';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport {\n  CreateRequest,\n  PutRequest,\n} from '../../core/data/request.models';\nimport { RequestService } from '../../core/data/request.service';\nimport { RestRequest } from '../../core/data/rest-request.model';\nimport { HALEndpointService } from '../../core/shared/hal-endpoint.service';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport {\n  isNotEmpty,\n  isNotEmptyOperator,\n} from '../empty.util';\nimport { NotificationsService } from '../notifications/notifications.service';\nimport { followLink } from '../utils/follow-link-config.model';\nimport { Subscription } from './models/subscription.model';\n\n/**\n * Provides methods to retrieve subscription resources from the REST API related CRUD actions.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SubscriptionsDataService extends IdentifiableDataService<Subscription> {\n  protected findByEpersonLinkPath = 'findByEPerson';\n\n  private deleteData: DeleteDataImpl<Subscription>;\n  private findAllData: FindAllData<Subscription>;\n  private searchData: SearchDataImpl<Subscription>;\n\n  constructor(\n    protected comparator: DSOChangeAnalyzer<Subscription>,\n    protected http: HttpClient,\n    protected notificationsService: NotificationsService,\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<any>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected nameService: DSONameService,\n  ) {\n    super('subscriptions', requestService, rdbService, objectCache, halService);\n\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n  }\n  /**\n   * Get subscriptions for a given item or community or collection & eperson.\n   *\n   * @param eperson The eperson to search for\n   * @param uuid The uuid of the dsobjcet to search for\n   */\n  getSubscriptionsByPersonDSO(eperson: string, uuid: string): Observable<RemoteData<PaginatedList<Subscription>>> {\n\n    const optionsWithObject = Object.assign(new FindListOptions(), {\n      searchParams: [\n        new RequestParam('resource', uuid),\n        new RequestParam('eperson_id', eperson),\n      ],\n    });\n\n    return this.searchData.searchBy('findByEPersonAndDso', optionsWithObject, false, true);\n  }\n\n  /**\n   * Create a subscription for a given item or community or collection.\n   *\n   * @param subscription The subscription to create\n   * @param ePerson The ePerson to create for\n   * @param uuid The uuid of the dsobjcet to create for\n   */\n  createSubscription(subscription: Subscription, ePerson: string, uuid: string): Observable<RemoteData<Subscription>> {\n\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      isNotEmptyOperator(),\n      take(1),\n      map((endpointUrl: string) => `${endpointUrl}?resource=${uuid}&eperson_id=${ePerson}`),\n      map((endpointURL: string) => new CreateRequest(this.requestService.generateRequestId(), endpointURL, JSON.stringify(subscription))),\n      sendRequest(this.requestService),\n      switchMap((restRequest: RestRequest) => this.rdbService.buildFromRequestUUID(restRequest.uuid)),\n      getFirstCompletedRemoteData(),\n    ) as Observable<RemoteData<Subscription>>;\n  }\n\n  /**\n   * Update a subscription for a given item or community or collection.\n   *\n   * @param subscription The subscription to update\n   * @param ePerson The ePerson to update for\n   * @param uuid The uuid of the dsobjcet to update for\n   */\n  updateSubscription(subscription, ePerson: string, uuid: string) {\n\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      isNotEmptyOperator(),\n      take(1),\n      map((endpointUrl: string) => `${endpointUrl}/${subscription.id}?resource=${uuid}&eperson_id=${ePerson}`),\n      map((endpointURL: string) => new PutRequest(this.requestService.generateRequestId(), endpointURL, JSON.stringify(subscription))),\n      sendRequest(this.requestService),\n      switchMap((restRequest: RestRequest) => this.rdbService.buildFromRequestUUID(restRequest.uuid)),\n      getFirstCompletedRemoteData(),\n    ) as Observable<RemoteData<Subscription>>;\n  }\n\n\n  /**\n   * Deletes the subscription with a give id\n   *\n   * @param id  the id of Subscription to delete\n   */\n  deleteSubscription(id: string): Observable<RemoteData<NoContent>> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      distinctUntilChanged(),\n      switchMap((endpointUrl) => this.deleteData.delete(id)),\n      getFirstCompletedRemoteData(),\n    );\n  }\n\n  /**\n   * Retrieves the list of subscription with {@link dSpaceObject} and {@link ePerson}\n   *\n   * @param options                     options for the find all request\n   */\n  findAllSubscriptions(options?): Observable<RemoteData<PaginatedList<Subscription>>> {\n    return this.findAllData.findAll(options, true, true, followLink('resource'), followLink('eperson'));\n  }\n\n\n  /**\n   * Retrieves the list of subscription with {@link dSpaceObject} and {@link ePerson}\n   *\n   * @param ePersonId  The eperson id\n   * @param options    The options for the find all request\n   */\n  findByEPerson(ePersonId: string, options?: FindListOptions): Observable<RemoteData<PaginatedList<Subscription>>> {\n    const optionsWithObject = Object.assign(new FindListOptions(), options, {\n      searchParams: [\n        new RequestParam('uuid', ePersonId),\n      ],\n    });\n\n    // return this.searchData.searchBy(this.findByEpersonLinkPath, optionsWithObject, true, true, followLink('dSpaceObject'), followLink('ePerson'));\n\n    return this.getEndpoint().pipe(\n      map(href => `${href}/search/${this.findByEpersonLinkPath}`),\n      switchMap(href => this.findListByHref(href, optionsWithObject, false, true, followLink('resource'), followLink('eperson'))),\n    );\n\n\n  }\n\n}\n"],"names":["HttpClient","Store","distinctUntilChanged","filter","map","switchMap","take","sendRequest","DSONameService","RemoteDataBuildService","RequestParam","ObjectCacheService","DeleteDataImpl","IdentifiableDataService","SearchDataImpl","DSOChangeAnalyzer","FindListOptions","CreateRequest","PutRequest","RequestService","HALEndpointService","getFirstCompletedRemoteData","isNotEmpty","isNotEmptyOperator","NotificationsService","followLink","SubscriptionsDataService","constructor","comparator","http","notificationsService","requestService","rdbService","store","objectCache","halService","nameService","findByEpersonLinkPath","searchData","linkPath","responseMsToLive","deleteData","constructIdEndpoint","getSubscriptionsByPersonDSO","eperson","uuid","optionsWithObject","Object","assign","searchParams","searchBy","createSubscription","subscription","ePerson","getEndpoint","pipe","endpointUrl","endpointURL","generateRequestId","JSON","stringify","restRequest","buildFromRequestUUID","updateSubscription","id","deleteSubscription","href","delete","findAllSubscriptions","options","findAllData","findAll","findByEPerson","ePersonId","findListByHref","i0","ɵɵinject","i1","i2","i3","i4","i5","i6","i7","i8","i9","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}