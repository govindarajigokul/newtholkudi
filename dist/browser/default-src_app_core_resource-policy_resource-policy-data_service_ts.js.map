{"version":3,"file":"default-src_app_core_resource-policy_resource-policy-data_service_ts.js","mappings":"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","sources":["./src/app/core/resource-policy/resource-policy-data.service.ts"],"sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  first,\n  map,\n} from 'rxjs/operators';\n\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { CreateDataImpl } from '../data/base/create-data';\nimport { DeleteDataImpl } from '../data/base/delete-data';\nimport { IdentifiableDataService } from '../data/base/identifiable-data.service';\nimport { PatchDataImpl } from '../data/base/patch-data';\nimport { SearchDataImpl } from '../data/base/search-data';\nimport { DefaultChangeAnalyzer } from '../data/default-change-analyzer.service';\nimport { FindListOptions } from '../data/find-list-options.model';\nimport { PaginatedList } from '../data/paginated-list.model';\nimport { ResponseParsingService } from '../data/parsing.service';\nimport { RemoteData } from '../data/remote-data';\nimport { PutRequest } from '../data/request.models';\nimport { RequestService } from '../data/request.service';\nimport { StatusCodeOnlyResponseParsingService } from '../data/status-code-only-response-parsing.service';\nimport { HttpOptions } from '../dspace-rest/dspace-rest.service';\nimport { EPersonDataService } from '../eperson/eperson-data.service';\nimport { GroupDataService } from '../eperson/group-data.service';\nimport { Collection } from '../shared/collection.model';\nimport { GenericConstructor } from '../shared/generic-constructor';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { NoContent } from '../shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../shared/operators';\nimport { ActionType } from './models/action-type.model';\nimport { ResourcePolicy } from './models/resource-policy.model';\n\n/**\n * A service responsible for fetching/sending data from/to the REST API on the resourcepolicies endpoint\n */\n@Injectable({ providedIn: 'root' })\nexport class ResourcePolicyDataService extends IdentifiableDataService<ResourcePolicy> {\n  protected searchByEPersonMethod = 'eperson';\n  protected searchByGroupMethod = 'group';\n  protected searchByResourceMethod = 'resource';\n\n  private createData: CreateDataImpl<ResourcePolicy>;\n  private searchData: SearchDataImpl<ResourcePolicy>;\n  private patchData: PatchDataImpl<ResourcePolicy>;\n  private deleteData: DeleteDataImpl<ResourcePolicy>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected comparator: DefaultChangeAnalyzer<ResourcePolicy>,\n    protected ePersonService: EPersonDataService,\n    protected groupService: GroupDataService,\n  ) {\n    super('resourcepolicies', requestService, rdbService, objectCache, halService);\n\n    this.createData = new CreateDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive);\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n    this.patchData = new PatchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, comparator, this.responseMsToLive, this.constructIdEndpoint);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n  }\n\n  /**\n   * Create a new ResourcePolicy on the server, and store the response\n   * in the object cache\n   *\n   * @param {ResourcePolicy} resourcePolicy\n   *    The resource policy to create\n   * @param {string} resourceUUID\n   *    The uuid of the resource target of the policy\n   * @param {string} epersonUUID\n   *    The uuid of the eperson that will be grant of the permission. Exactly one of eperson or group is required\n   * @param {string} groupUUID\n   *    The uuid of the group that will be grant of the permission. Exactly one of eperson or group is required\n   */\n  create(resourcePolicy: ResourcePolicy, resourceUUID: string, epersonUUID?: string, groupUUID?: string): Observable<RemoteData<ResourcePolicy>> {\n    const params = [];\n    params.push(new RequestParam('resource', resourceUUID));\n    if (isNotEmpty(epersonUUID)) {\n      params.push(new RequestParam('eperson', epersonUUID));\n    } else if (isNotEmpty(groupUUID)) {\n      params.push(new RequestParam('group', groupUUID));\n    }\n    return this.createData.create(resourcePolicy, ...params);\n  }\n\n  /**\n   * Delete an existing ResourcePolicy on the server\n   *\n   * @param resourcePolicyID The resource policy's id to be removed\n   * @return an observable that emits true when the deletion was successful, false when it failed\n   */\n  delete(resourcePolicyID: string): Observable<boolean> {\n    return this.deleteData.delete(resourcePolicyID).pipe(\n      getFirstCompletedRemoteData(),\n      map((response: RemoteData<NoContent>) => response.hasSucceeded),\n    );\n  }\n\n  /**\n   * Add a new patch to the object cache\n   * The patch is derived from the differences between the given object and its version in the object cache\n   * @param {ResourcePolicy} object The given object\n   */\n  update(object: ResourcePolicy): Observable<RemoteData<ResourcePolicy>> {\n    return this.patchData.update(object);\n  }\n\n  /**\n   * Return the defaultAccessConditions {@link ResourcePolicy} list for a given {@link Collection}\n   *\n   * @param collection the {@link Collection} to retrieve the defaultAccessConditions for\n   * @param findListOptions the {@link FindListOptions} for the request\n   */\n  getDefaultAccessConditionsFor(collection: Collection, findListOptions?: FindListOptions): Observable<RemoteData<PaginatedList<ResourcePolicy>>> {\n    return this.findListByHref(collection._links.defaultAccessConditions.href, findListOptions);\n  }\n\n  /**\n   * Return the {@link ResourcePolicy} list for a {@link EPerson}\n   *\n   * @param UUID                        UUID of a given {@link EPerson}\n   * @param resourceUUID                Limit the returned policies to the specified DSO\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  searchByEPerson(UUID: string, resourceUUID?: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<ResourcePolicy>[]): Observable<RemoteData<PaginatedList<ResourcePolicy>>> {\n    const options = new FindListOptions();\n    options.searchParams = [new RequestParam('uuid', UUID)];\n    if (isNotEmpty(resourceUUID)) {\n      options.searchParams.push(new RequestParam('resource', resourceUUID));\n    }\n    return this.searchData.searchBy(this.searchByEPersonMethod, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Return the {@link ResourcePolicy} list for a {@link Group}\n   *\n   * @param UUID                        UUID of a given {@link Group}\n   * @param resourceUUID                Limit the returned policies to the specified DSO\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  searchByGroup(UUID: string, resourceUUID?: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<ResourcePolicy>[]): Observable<RemoteData<PaginatedList<ResourcePolicy>>> {\n    const options = new FindListOptions();\n    options.searchParams = [new RequestParam('uuid', UUID)];\n    if (isNotEmpty(resourceUUID)) {\n      options.searchParams.push(new RequestParam('resource', resourceUUID));\n    }\n    return this.searchData.searchBy(this.searchByGroupMethod, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Return the {@link ResourcePolicy} list for a given DSO\n   *\n   * @param UUID              UUID of a given DSO\n   * @param action            Limit the returned policies to the specified {@link ActionType}\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   */\n  searchByResource(UUID: string, action?: ActionType, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<ResourcePolicy>[]): Observable<RemoteData<PaginatedList<ResourcePolicy>>> {\n    const options = new FindListOptions();\n    options.searchParams = [new RequestParam('uuid', UUID)];\n    if (isNotEmpty(action)) {\n      options.searchParams.push(new RequestParam('action', action));\n    }\n    return this.searchData.searchBy(this.searchByResourceMethod, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Update the target of the resource policy\n   * @param resourcePolicyId the ID of the resource policy\n   * @param resourcePolicyHref the link to the resource policy\n   * @param targetUUID the UUID of the target to which the permission is being granted\n   * @param targetType the type of the target (eperson or group) to which the permission is being granted\n   */\n  updateTarget(resourcePolicyId: string, resourcePolicyHref: string, targetUUID: string, targetType: string): Observable<RemoteData<any>> {\n    const targetService = targetType === 'eperson' ? this.ePersonService : this.groupService;\n    const targetEndpoint$ = targetService.getIDHrefObs(targetUUID);\n\n    const options: HttpOptions = Object.create({});\n    let headers = new HttpHeaders();\n    headers = headers.append('Content-Type', 'text/uri-list');\n    options.headers = headers;\n\n    const requestId = this.requestService.generateRequestId();\n\n    targetEndpoint$.pipe(\n      first(),\n    ).subscribe((targetEndpoint) => {\n      const resourceEndpoint = resourcePolicyHref + '/' + targetType;\n      const request = new PutRequest(requestId, resourceEndpoint, targetEndpoint, options);\n      Object.assign(request, {\n        getResponseParser(): GenericConstructor<ResponseParsingService> {\n          return StatusCodeOnlyResponseParsingService;\n        },\n      });\n      this.requestService.send(request);\n    });\n\n    return this.rdbService.buildFromRequestUUIDAndAwait(requestId, () => this.invalidateByHref(resourcePolicyHref));\n  }\n\n}\n"],"names":["HttpHeaders","first","map","isNotEmpty","NotificationsService","RemoteDataBuildService","RequestParam","ObjectCacheService","CreateDataImpl","DeleteDataImpl","IdentifiableDataService","PatchDataImpl","SearchDataImpl","DefaultChangeAnalyzer","FindListOptions","PutRequest","RequestService","StatusCodeOnlyResponseParsingService","EPersonDataService","GroupDataService","HALEndpointService","getFirstCompletedRemoteData","ResourcePolicyDataService","constructor","requestService","rdbService","objectCache","halService","notificationsService","comparator","ePersonService","groupService","searchByEPersonMethod","searchByGroupMethod","searchByResourceMethod","createData","linkPath","responseMsToLive","searchData","patchData","constructIdEndpoint","deleteData","create","resourcePolicy","resourceUUID","epersonUUID","groupUUID","params","push","delete","resourcePolicyID","pipe","response","hasSucceeded","update","object","getDefaultAccessConditionsFor","collection","findListOptions","findListByHref","_links","defaultAccessConditions","href","searchByEPerson","UUID","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","options","searchParams","searchBy","searchByGroup","searchByResource","action","updateTarget","resourcePolicyId","resourcePolicyHref","targetUUID","targetType","targetService","targetEndpoint$","getIDHrefObs","Object","headers","append","requestId","generateRequestId","subscribe","targetEndpoint","resourceEndpoint","request","assign","getResponseParser","send","buildFromRequestUUIDAndAwait","invalidateByHref","i0","ɵɵinject","i1","i2","i3","i4","i5","i6","i7","i8","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}