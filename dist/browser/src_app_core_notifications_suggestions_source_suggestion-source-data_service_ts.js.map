{"version":3,"file":"src_app_core_notifications_suggestions_source_suggestion-source-data_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAkD;AAEd;AAG0D;AAEH;AAClB;AAK/B;AAC6C;AACD;AAIvB;AACW;;;;;;;;;;AAG1E;;;AAIM,MAAOU,2BAA4B,SAAQJ,yFAAyC;EAMxFK,YACYC,cAA8B,EAC9BC,UAAkC,EAClCC,KAAuB,EACvBC,WAA+B,EAC/BC,UAA8B,EAC9BC,oBAA0C,EAC1CC,IAAgB,EAChBC,UAAmD;IAC7D,KAAK,CAAC,mBAAmB,EAAEP,cAAc,EAAEC,UAAU,EAAEE,WAAW,EAAEC,UAAU,CAAC;IARrE,KAAAJ,cAAc,GAAdA,cAAc;IACd,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,UAAU,GAAVA,UAAU;IAZZ,KAAAC,QAAQ,GAAG,mBAAmB;IActC,IAAI,CAACC,WAAW,GAAG,IAAIhB,qEAAe,CAAC,IAAI,CAACe,QAAQ,EAAER,cAAc,EAAEC,UAAU,EAAEE,WAAW,EAAEC,UAAU,EAAE,IAAI,CAACM,gBAAgB,CAAC;EACnI;EACA;;;;;;;;;;;;;EAaOC,UAAUA,CAACC,OAAA,GAA2B,EAAE,EAAEC,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI,EAAE,GAAGC,aAAmD;IAClK,OAAO,IAAI,CAACC,OAAO,CAACJ,OAAO,EAAEC,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAa,CAAC;EAC/F;EAEA;;;;;;;;;;;;EAYOE,SAASA,CAACC,EAAU,EAAEL,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI,EAAE,GAAGC,aAAmD;IAC9I,OAAO,IAAI,CAACI,QAAQ,CAACD,EAAE,EAAEL,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAa,CAAC;EAC3F;EAGA;;;;;;;;;;;;;;EAcAC,OAAOA,CAACJ,OAAA,GAA2B,EAAE,EAAEC,2BAA2B,GAAG,IAAI,EAAEC,gBAAgB,GAAG,IAAI,EAAE,GAAGC,aAAmD;IACxJ,OAAO,IAAI,CAACN,WAAW,CAACO,OAAO,CAACJ,OAAO,EAAEC,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAa,CAAC;EAC3G;;;uBApEWjB,2BAA2B,EAAAsB,sDAAA,CAAAE,iEAAA,GAAAF,sDAAA,CAAAG,6FAAA,GAAAH,sDAAA,CAAAI,8CAAA,GAAAJ,sDAAA,CAAAK,2EAAA,GAAAL,sDAAA,CAAAM,4EAAA,GAAAN,sDAAA,CAAAO,6FAAA,GAAAP,sDAAA,CAAAQ,6DAAA,GAAAR,sDAAA,CAAAS,wFAAA;IAAA;EAAA;;;aAA3B/B,2BAA2B;MAAAgC,OAAA,EAA3BhC,2BAA2B,CAAAiC,IAAA;MAAAC,UAAA,EADd;IAAM;EAAA","sources":["./src/app/core/notifications/suggestions/source/suggestion-source-data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../../../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../../../cache/object-cache.service';\nimport { CoreState } from '../../../core-state.model';\nimport {\n  FindAllData,\n  FindAllDataImpl,\n} from '../../../data/base/find-all-data';\nimport { IdentifiableDataService } from '../../../data/base/identifiable-data.service';\nimport { DefaultChangeAnalyzer } from '../../../data/default-change-analyzer.service';\nimport { FindListOptions } from '../../../data/find-list-options.model';\nimport { PaginatedList } from '../../../data/paginated-list.model';\nimport { RemoteData } from '../../../data/remote-data';\nimport { RequestService } from '../../../data/request.service';\nimport { HALEndpointService } from '../../../shared/hal-endpoint.service';\nimport { SuggestionSource } from '../models/suggestion-source.model';\n\n/**\n * Service that retrieves Suggestion Source data\n */\n@Injectable({ providedIn: 'root' })\nexport class SuggestionSourceDataService extends IdentifiableDataService<SuggestionSource> {\n\n  protected linkPath = 'suggestionsources';\n\n  private findAllData: FindAllData<SuggestionSource>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<CoreState>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected http: HttpClient,\n    protected comparator: DefaultChangeAnalyzer<SuggestionSource>) {\n    super('suggestionsources', requestService, rdbService, objectCache, halService);\n    this.findAllData = new FindAllDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n  /**\n   * Return the list of Suggestion source.\n   *\n   * @param options                     Find list options object.\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which {@link HALLink}s should be automatically resolved.\n   *\n   * @return Observable<RemoteData<PaginatedList<QualityAssuranceSourceObject>>>\n   *    The list of Quality Assurance source.\n   */\n  public getSources(options: FindListOptions = {}, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<SuggestionSource>[]): Observable<RemoteData<PaginatedList<SuggestionSource>>> {\n    return this.findAll(options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n  /**\n   * Return a single Suggestoin source.\n   *\n   * @param id                          The Quality Assurance source id\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which {@link HALLink}s should be automatically resolved.\n   *\n   * @return Observable<RemoteData<QualityAssuranceSourceObject>>    The Quality Assurance source.\n   */\n  public getSource(id: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<SuggestionSource>[]): Observable<RemoteData<SuggestionSource>> {\n    return this.findById(id, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n\n\n  /**\n   * Returns {@link RemoteData} of all object with a list of {@link FollowLinkConfig}, to indicate which embedded\n   * info should be added to the objects\n   *\n   * @param options                     Find list options object\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   * @return {Observable<RemoteData<PaginatedList<T>>>}\n   *    Return an observable that emits object list\n   */\n  findAll(options: FindListOptions = {}, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow: FollowLinkConfig<SuggestionSource>[]): Observable<RemoteData<PaginatedList<SuggestionSource>>> {\n    return this.findAllData.findAll(options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n}\n"],"names":["HttpClient","Store","NotificationsService","RemoteDataBuildService","ObjectCacheService","FindAllDataImpl","IdentifiableDataService","DefaultChangeAnalyzer","RequestService","HALEndpointService","SuggestionSourceDataService","constructor","requestService","rdbService","store","objectCache","halService","notificationsService","http","comparator","linkPath","findAllData","responseMsToLive","getSources","options","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","findAll","getSource","id","findById","i0","ɵɵinject","i1","i2","i3","i4","i5","i6","i7","i8","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}