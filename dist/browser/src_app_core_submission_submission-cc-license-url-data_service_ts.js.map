{"version":3,"file":"src_app_core_submission_submission-cc-license-url-data_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKwB;AAG6D;AAClB;AACA;AACF;AAI/B;AAIuB;AACW;AAIvC;;;;;;AASvB,MAAOW,iCAAkC,SAAQN,yEAAuC;EAG5FO,YACYC,cAA8B,EAC9BC,UAAkC,EAClCC,WAA+B,EAC/BC,UAA8B;IAExC,KAAK,CAAC,gCAAgC,EAAEH,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,CAAC;IALlF,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;IAIpB,IAAI,CAACC,UAAU,GAAG,IAAIX,kEAAc,CAAC,IAAI,CAACY,QAAQ,EAAEL,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAE,IAAI,CAACG,gBAAgB,EAAE,CAACC,IAAI,EAAEC,YAAY,KAAK,GAAGD,IAAI,IAAIC,YAAY,EAAE,CAAC;EACpL;EAEA;;;;;EAKAC,gBAAgBA,CAACC,SAA8B,EAAEC,OAA2B;IAE1E,OAAO,IAAI,CAACP,UAAU,CAACQ,eAAe,CACpC,mBAAmB,EAAC;MAClBC,YAAY,EAAE,CACZ,IAAIvB,2EAAY,CAAC,SAAS,EAAEoB,SAAS,CAACI,EAAE,CAAC,EACzC,GAAGJ,SAAS,CAACK,MAAM,CAAC5B,GAAG,CAAE6B,KAAY,IAAK,IAAI1B,2EAAY,CAAC,UAAU0B,KAAK,CAACF,EAAE,EAAE,EAAEH,OAAO,CAACM,GAAG,CAACD,KAAK,CAAC,CAACF,EAAE,CAAC,CAAC;KAE3G,CACF,CAACI,IAAI,CACJ9B,yDAAS,CAAEmB,IAAI,IAAK,IAAI,CAACY,UAAU,CAACZ,IAAI,CAAC,CAAC,EAC1CX,8EAA2B,EAAE,EAC7BC,uEAAoB,EAAE,EACtBV,mDAAG,CAAEiC,QAAQ,IAAKA,QAAQ,CAACC,GAAG,CAAC,CAChC;EACH;EAEA;;;;;;;;;;;;;;EAcOC,QAAQA,CAACd,YAAoB,EAAEG,OAAyB,EAAEY,2BAAqC,EAAEC,gBAA0B,EAAE,GAAGC,aAAyD;IAC9L,OAAO,IAAI,CAACrB,UAAU,CAACkB,QAAQ,CAACd,YAAY,EAAEG,OAAO,EAAEY,2BAA2B,EAAEC,gBAAgB,EAAE,GAAGC,aAAa,CAAC;EACzH;;;uBApDW3B,iCAAiC,EAAA4B,uDAAA,CAAAE,iEAAA,GAAAF,uDAAA,CAAAG,6FAAA,GAAAH,uDAAA,CAAAI,2EAAA,GAAAJ,uDAAA,CAAAK,4EAAA;IAAA;EAAA;;;aAAjCjC,iCAAiC;MAAAkC,OAAA,EAAjClC,iCAAiC,CAAAmC,IAAA;MAAAC,UAAA,EADpB;IAAM;EAAA","sources":["./src/app/core/submission/submission-cc-license-url-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../cache/models/request-param.model';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { BaseDataService } from '../data/base/base-data.service';\nimport {\n  SearchData,\n  SearchDataImpl,\n} from '../data/base/search-data';\nimport { FindListOptions } from '../data/find-list-options.model';\nimport { PaginatedList } from '../data/paginated-list.model';\nimport { RemoteData } from '../data/remote-data';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport {\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload,\n} from '../shared/operators';\nimport {\n  Field,\n  Option,\n  SubmissionCcLicence,\n} from './models/submission-cc-license.model';\nimport { SubmissionCcLicenceUrl } from './models/submission-cc-license-url.model';\n\n@Injectable({ providedIn: 'root' })\nexport class SubmissionCcLicenseUrlDataService extends BaseDataService<SubmissionCcLicenceUrl> implements SearchData<SubmissionCcLicenceUrl> {\n  private searchData: SearchDataImpl<SubmissionCcLicenceUrl>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n  ) {\n    super('submissioncclicenseUrls-search', requestService, rdbService, objectCache, halService);\n\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive, (href, searchMethod) => `${href}/${searchMethod}`);\n  }\n\n  /**\n   * Get the link to the Creative Commons license corresponding to the given type and options.\n   * @param ccLicense   the Creative Commons license type\n   * @param options     the selected options of the license fields\n   */\n  getCcLicenseLink(ccLicense: SubmissionCcLicence, options: Map<Field, Option>): Observable<string> {\n\n    return this.searchData.getSearchByHref(\n      'rightsByQuestions',{\n        searchParams: [\n          new RequestParam('license', ccLicense.id),\n          ...ccLicense.fields.map((field: Field) => new RequestParam(`answer_${field.id}`, options.get(field).id)),\n        ],\n      },\n    ).pipe(\n      switchMap((href) => this.findByHref(href)),\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      map((response) => response.url),\n    );\n  }\n\n  /**\n   * Make a new FindListRequest with given search method\n   *\n   * @param searchMethod                The search method for the object\n   * @param options                     The [[FindListOptions]] object\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   * @param linksToFollow               List of {@link FollowLinkConfig} that indicate which\n   *                                    {@link HALLink}s should be automatically resolved\n   * @return {Observable<RemoteData<PaginatedList<T>>}\n   *    Return an observable that emits response from the server\n   */\n  public searchBy(searchMethod: string, options?: FindListOptions, useCachedVersionIfAvailable?: boolean, reRequestOnStale?: boolean, ...linksToFollow: FollowLinkConfig<SubmissionCcLicenceUrl>[]): Observable<RemoteData<PaginatedList<SubmissionCcLicenceUrl>>> {\n    return this.searchData.searchBy(searchMethod, options, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow);\n  }\n}\n"],"names":["map","switchMap","RemoteDataBuildService","RequestParam","ObjectCacheService","BaseDataService","SearchDataImpl","RequestService","HALEndpointService","getFirstSucceededRemoteData","getRemoteDataPayload","SubmissionCcLicenseUrlDataService","constructor","requestService","rdbService","objectCache","halService","searchData","linkPath","responseMsToLive","href","searchMethod","getCcLicenseLink","ccLicense","options","getSearchByHref","searchParams","id","fields","field","get","pipe","findByHref","response","url","searchBy","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","i0","ɵɵinject","i1","i2","i3","i4","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}