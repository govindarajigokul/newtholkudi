{"version":3,"file":"default-src_app_profile-page_profile-page-security-form_profile-page-security-form_component_-69ff5d.js","mappings":"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","sources":["./src/app/profile-page/profile-page-security-form/profile-page-security-form.component.ts","./src/app/profile-page/profile-page-security-form/profile-page-security-form.component.html","./src/app/register-email-form/themed-registry-email-form.component.ts","./src/app/shared/theme-support/themed.component.html","./src/app/register-page/registration.guard.ts","./src/themes/ lazy ^\\.\\/.*\\/app\\/register\\-email\\-form\\/register\\-email\\-form\\.component$ namespace object"],"sourcesContent":["import { NgIf } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport {\n  DynamicFormControlModel,\n  DynamicFormService,\n  DynamicInputModel,\n} from '@ng-dynamic-forms/core';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { debounceTimeWorkaround as debounceTime } from '../../core/shared/operators';\nimport { AlertComponent } from '../../shared/alert/alert.component';\nimport {\n  hasValue,\n  isEmpty,\n} from '../../shared/empty.util';\nimport { FormComponent } from '../../shared/form/form.component';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\n\n@Component({\n  selector: 'ds-profile-page-security-form',\n  templateUrl: './profile-page-security-form.component.html',\n  imports: [\n    NgIf,\n    FormComponent,\n    AlertComponent,\n    TranslateModule,\n  ],\n  standalone: true,\n})\n/**\n * Component for a user to edit their security information\n * Displays a form containing a password field and a confirmation of the password\n */\nexport class ProfilePageSecurityFormComponent implements OnDestroy, OnInit {\n\n  /**\n   * Emits the validity of the password\n   */\n  @Output() isInvalid = new EventEmitter<boolean>();\n  /**\n   * Emits the value of the password\n   */\n  @Output() passwordValue = new EventEmitter<string>();\n  /**\n   * Emits the value of the current-password\n   */\n  @Output() currentPasswordValue = new EventEmitter<string>();\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'password',\n      name: 'password',\n      inputType: 'password',\n      autoComplete: 'new-password',\n    }),\n    new DynamicInputModel({\n      id: 'passwordrepeat',\n      name: 'passwordrepeat',\n      inputType: 'password',\n      autoComplete: 'new-password',\n    }),\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: UntypedFormGroup;\n\n  /**\n   * Indicates whether the \"checkPasswordEmpty\" needs to be added or not\n   */\n  @Input()\n  passwordCanBeEmpty = true;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  @Input()\n  FORM_PREFIX: string;\n\n  private subs: Subscription[] = [];\n\n  constructor(protected formService: DynamicFormService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    if (this.FORM_PREFIX === 'profile.security.form.') {\n      this.formModel.unshift(new DynamicInputModel({\n        id: 'current-password',\n        name: 'current-password',\n        inputType: 'password',\n        required: true,\n        autoComplete: 'current-password',\n      }));\n    }\n    if (this.passwordCanBeEmpty) {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        { validators: [this.checkPasswordsEqual] });\n    } else {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        { validators: [this.checkPasswordsEqual, this.checkPasswordEmpty] });\n    }\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n\n    this.subs.push(\n      this.formGroup.statusChanges.pipe(\n        debounceTime(300),\n        map((status: string) => status !== 'VALID'),\n      ).subscribe((status) => this.isInvalid.emit(status)),\n    );\n\n    this.subs.push(this.formGroup.valueChanges.pipe(\n      debounceTime(300),\n    ).subscribe((valueChange) => {\n      this.passwordValue.emit(valueChange.password);\n      if (this.FORM_PREFIX === 'profile.security.form.') {\n        this.currentPasswordValue.emit(valueChange['current-password']);\n      }\n    }));\n  }\n\n  /**\n   * Update the translations of the field labels\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.FORM_PREFIX + 'label.' + fieldModel.id);\n      },\n    );\n  }\n\n  /**\n   * Check if both password fields are filled in and equal\n   * @param group The FormGroup to validate\n   */\n  checkPasswordsEqual(group: UntypedFormGroup) {\n    const pass = group.get('password').value;\n    const repeatPass = group.get('passwordrepeat').value;\n\n    return pass === repeatPass ? null : { notSame: true };\n  }\n\n  /**\n   * Checks if the password is empty\n   * @param group The FormGroup to validate\n   */\n  checkPasswordEmpty(group: UntypedFormGroup) {\n    const pass = group.get('password').value;\n    return isEmpty(pass) ? { emptyPassword: true } : null;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<ds-alert class=\"mb-4\" [type]=\"'alert-info'\">{{FORM_PREFIX + 'info' | translate}}</ds-alert>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"FORM_PREFIX\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n<div id=\"notSame\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notSame')\">{{FORM_PREFIX + 'error.matching-passwords' | translate}}</div>\n<div id=\"emptyPassword\" class=\"container-fluid text-danger\" *ngIf=\"(formGroup.dirty || formGroup.touched) && formGroup.hasError('emptyPassword')\">{{FORM_PREFIX + 'error.empty-password' | translate}}</div>\n","import {\n  Component,\n  Input,\n} from '@angular/core';\n\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { RegisterEmailFormComponent } from './register-email-form.component';\n\n/**\n * Themed wrapper for {@link RegisterEmailFormComponent}\n */\n@Component({\n  selector: 'ds-register-email-form',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n  standalone: true,\n  imports: [RegisterEmailFormComponent],\n})\nexport class ThemedRegisterEmailFormComponent extends ThemedComponent<RegisterEmailFormComponent> {\n\n  @Input() MESSAGE_PREFIX: string;\n\n  @Input() typeRequest: string;\n\n  protected inAndOutputNames: (keyof RegisterEmailFormComponent & keyof this)[] = [\n    'MESSAGE_PREFIX',\n    'typeRequest',\n  ];\n\n  protected getComponentName(): string {\n    return 'RegisterEmailFormComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/register-email-form/register-email-form.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import('./register-email-form.component');\n  }\n\n}\n","<ng-template #vcr>\n</ng-template>\n<div #content>\n  <ng-content></ng-content>\n</div>\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AuthService } from '../core/auth/auth.service';\nimport { EpersonRegistrationService } from '../core/data/eperson-registration.service';\nimport { redirectOn4xx } from '../core/shared/authorized.operators';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\n\n/**\n * A guard responsible for redirecting to 4xx pages upon retrieving a Registration object\n * The guard also adds the resulting RemoteData<Registration> object to the route's data for further usage in components\n * The reason this is a guard and not a resolver, is because it has to run before the EndUserAgreementCookieGuard\n */\nexport const registrationGuard: CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  authService: AuthService = inject(AuthService),\n  epersonRegistrationService: EpersonRegistrationService = inject(EpersonRegistrationService),\n  router: Router = inject(Router),\n): Observable<boolean> => {\n  const token = route.params.token;\n  return epersonRegistrationService.searchByToken(token).pipe(\n    getFirstCompletedRemoteData(),\n    redirectOn4xx(router, authService),\n    map((rd) => {\n      route.data = { ...route.data, registration: rd };\n      return rd.hasSucceeded;\n    }),\n  );\n};\n","var map = {\n\t\"./custom/app/register-email-form/register-email-form.component\": [\n\t\t11995,\n\t\t\"src_themes_custom_app_register-email-form_register-email-form_component_ts\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 41546;\nmodule.exports = webpackAsyncContext;"],"names":["NgIf","EventEmitter","DynamicFormService","DynamicInputModel","TranslateModule","TranslateService","map","EPersonDataService","debounceTimeWorkaround","debounceTime","AlertComponent","hasValue","isEmpty","FormComponent","NotificationsService","i0","ɵɵelement","ɵɵproperty","ctx_r0","FORM_PREFIX","formModel","formGroup","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ProfilePageSecurityFormComponent","constructor","formService","translate","epersonService","notificationsService","isInvalid","passwordValue","currentPasswordValue","id","name","inputType","autoComplete","passwordCanBeEmpty","subs","ngOnInit","unshift","required","createFormGroup","validators","checkPasswordsEqual","checkPasswordEmpty","updateFieldTranslations","onLangChange","subscribe","push","statusChanges","pipe","status","emit","valueChanges","valueChange","password","forEach","fieldModel","label","instant","group","pass","get","value","repeatPass","notSame","emptyPassword","ngOnDestroy","filter","sub","unsubscribe","ɵɵdirectiveInject","i1","i2","i3","i4","selectors","inputs","outputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ProfilePageSecurityFormComponent_Template","rf","ctx","ɵɵtemplate","ProfilePageSecurityFormComponent_ds_form_3_Template","ProfilePageSecurityFormComponent_div_4_Template","ProfilePageSecurityFormComponent_div_5_Template","hasError","dirty","touched","TranslatePipe","encapsulation","ThemedComponent","RegisterEmailFormComponent","ThemedRegisterEmailFormComponent","inAndOutputNames","getComponentName","importThemedComponent","themeName","importUnthemedComponent","t","MESSAGE_PREFIX","typeRequest","ɵɵInheritDefinitionFeature","ngContentSelectors","_c0","ThemedRegisterEmailFormComponent_Template","ThemedRegisterEmailFormComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","ɵɵprojection","inject","Router","AuthService","EpersonRegistrationService","redirectOn4xx","getFirstCompletedRemoteData","registrationGuard","route","state","authService","epersonRegistrationService","router","token","params","searchByToken","rd","data","registration","hasSucceeded"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}