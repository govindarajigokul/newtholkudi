{"version":3,"file":"src_app_core_data_version-data_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAKc;AAIU;AAE6B;AACoB;AACY;AAClB;AACC;AACK;AAGE;AAIhD;AAC+C;AAEvB;;;;;;;AAGnD;;;AAIM,MAAOa,kBAAmB,SAAQJ,oFAAgC;EAGtEK,YACYC,cAA8B,EAC9BC,UAAkC,EAClCC,WAA+B,EAC/BC,UAA8B,EAC9BC,UAA0C;IAEpD,KAAK,CAAC,UAAU,EAAEJ,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,CAAC;IAN5D,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,UAAU,GAAVA,UAAU;IAIpB,IAAI,CAACC,SAAS,GAAG,IAAIV,2DAAa,CAAC,IAAI,CAACW,QAAQ,EAAEN,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAE,IAAI,CAACG,gBAAgB,EAAE,IAAI,CAACC,mBAAmB,CAAC;EACrK;EAEA;;;;;;;;EAQAC,qBAAqBA,CAACC,OAAgB,EAAEC,2BAA2B,GAAG,KAAK,EAAEC,gBAAgB,GAAG,IAAI;IAClG,OAAOxB,8DAAU,CAACsB,OAAO,CAAC,GAAG,IAAI,CAACG,QAAQ,CAACH,OAAO,CAACI,EAAE,EAAEH,2BAA2B,EAAEC,gBAAgB,EAAEvB,kFAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC0B,IAAI,CACtItB,qFAAkC,EAAE,EACpCN,0DAAS,CAAE6B,GAAY,IAAKA,GAAG,CAACC,cAAc,CAAC,EAC/CxB,qFAAkC,EAAE,CACrC,GAAGR,wCAAK;EACX;EAEA;;;;EAIAiC,uBAAuBA,CAACR,OAAgB;IACtC,OAAO,IAAI,CAACD,qBAAqB,CAACC,OAAO,CAAC,CAACK,IAAI,CAC7C7B,oDAAG,CAAEiC,cAA8B,IAAKA,cAAc,CAACL,EAAE,CAAC,CAC3D;EACH;EAEA;;;;;EAKOM,KAAKA,CAACC,MAAe,EAAEC,UAAc;IAC1C,OAAO,IAAI,CAACjB,SAAS,CAACe,KAAK,CAACC,MAAM,EAAEC,UAAU,CAAC;EACjD;EAEA;;;;;EAKOC,MAAMA,CAACF,MAAe;IAC3B,OAAO,IAAI,CAAChB,SAAS,CAACkB,MAAM,CAACF,MAAM,CAAC;EACtC;EAEA;;;;EAIOG,aAAaA,CAACC,MAA0B;IAC7C,IAAI,CAACpB,SAAS,CAACmB,aAAa,CAACC,MAAM,CAAC;EACtC;EAEA;;;;EAIOC,oBAAoBA,CAACL,MAAe;IACzC,OAAO,IAAI,CAAChB,SAAS,CAACqB,oBAAoB,CAACL,MAAM,CAAC;EACpD;;;uBAzEWvB,kBAAkB,EAAA6B,uDAAA,CAAAE,4DAAA,GAAAF,uDAAA,CAAAG,6FAAA,GAAAH,uDAAA,CAAAI,2EAAA,GAAAJ,uDAAA,CAAAK,4EAAA,GAAAL,uDAAA,CAAAM,mFAAA;IAAA;EAAA;;;aAAlBnC,kBAAkB;MAAAoC,OAAA,EAAlBpC,kBAAkB,CAAAqC,IAAA;MAAAC,UAAA,EADL;IAAM;EAAA","sources":["./src/app/core/data/version-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Operation } from 'fast-json-patch';\nimport {\n  EMPTY,\n  Observable,\n} from 'rxjs';\nimport {\n  map,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { getFirstSucceededRemoteDataPayload } from '../shared/operators';\nimport { Version } from '../shared/version.model';\nimport { VersionHistory } from '../shared/version-history.model';\nimport { IdentifiableDataService } from './base/identifiable-data.service';\nimport {\n  PatchData,\n  PatchDataImpl,\n} from './base/patch-data';\nimport { DefaultChangeAnalyzer } from './default-change-analyzer.service';\nimport { RemoteData } from './remote-data';\nimport { RequestService } from './request.service';\nimport { RestRequestMethod } from './rest-request-method';\n\n/**\n * Service responsible for handling requests related to the Version object\n */\n@Injectable({ providedIn: 'root' })\nexport class VersionDataService extends IdentifiableDataService<Version> implements PatchData<Version> {\n  private patchData: PatchData<Version>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected comparator: DefaultChangeAnalyzer<Version>,\n  ) {\n    super('versions', requestService, rdbService, objectCache, halService);\n\n    this.patchData = new PatchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, comparator, this.responseMsToLive, this.constructIdEndpoint);\n  }\n\n  /**\n   * Get the version history for the given version\n   * @param version\n   * @param useCachedVersionIfAvailable If this is true, the request will only be sent if there's\n   *                                    no valid cached version. Defaults to true\n   * @param reRequestOnStale            Whether or not the request should automatically be re-\n   *                                    requested after the response becomes stale\n   */\n  getHistoryFromVersion(version: Version, useCachedVersionIfAvailable = false, reRequestOnStale = true): Observable<VersionHistory> {\n    return isNotEmpty(version) ? this.findById(version.id, useCachedVersionIfAvailable, reRequestOnStale, followLink('versionhistory')).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((res: Version) => res.versionhistory),\n      getFirstSucceededRemoteDataPayload(),\n    ) : EMPTY;\n  }\n\n  /**\n   * Get the ID of the version history for the given version\n   * @param version\n   */\n  getHistoryIdFromVersion(version: Version): Observable<string> {\n    return this.getHistoryFromVersion(version).pipe(\n      map((versionHistory: VersionHistory) => versionHistory.id),\n    );\n  }\n\n  /**\n   * Send a patch request for a specified object\n   * @param {T} object The object to send a patch request for\n   * @param {Operation[]} operations The patch operations to be performed\n   */\n  public patch(object: Version, operations: []): Observable<RemoteData<Version>> {\n    return this.patchData.patch(object, operations);\n  }\n\n  /**\n   * Add a new patch to the object cache\n   * The patch is derived from the differences between the given object and its version in the object cache\n   * @param {DSpaceObject} object The given object\n   */\n  public update(object: Version): Observable<RemoteData<Version>> {\n    return this.patchData.update(object);\n  }\n\n  /**\n   * Commit current object changes to the server\n   * @param method The RestRequestMethod for which de server sync buffer should be committed\n   */\n  public commitUpdates(method?: RestRequestMethod): void {\n    this.patchData.commitUpdates(method);\n  }\n\n  /**\n   * Return a list of operations representing the difference between an object and its latest value in the cache.\n   * @param object  the object to resolve to a list of patch operations\n   */\n  public createPatchFromCache(object: Version): Observable<Operation[]> {\n    return this.patchData.createPatchFromCache(object);\n  }\n\n}\n"],"names":["EMPTY","map","switchMap","isNotEmpty","followLink","RemoteDataBuildService","ObjectCacheService","HALEndpointService","getFirstSucceededRemoteDataPayload","IdentifiableDataService","PatchDataImpl","DefaultChangeAnalyzer","RequestService","VersionDataService","constructor","requestService","rdbService","objectCache","halService","comparator","patchData","linkPath","responseMsToLive","constructIdEndpoint","getHistoryFromVersion","version","useCachedVersionIfAvailable","reRequestOnStale","findById","id","pipe","res","versionhistory","getHistoryIdFromVersion","versionHistory","patch","object","operations","update","commitUpdates","method","createPatchFromCache","i0","ɵɵinject","i1","i2","i3","i4","i5","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}