{"version":3,"file":"src_app_core_notifications_qa_events_quality-assurance-event-data_service_ts.js","mappings":"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","sources":["./src/app/core/notifications/qa/events/quality-assurance-event-data.service.ts"],"sourcesContent":["import {\n  HttpHeaders,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ReplaceOperation } from 'fast-json-patch';\nimport { Observable } from 'rxjs';\nimport {\n  find,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport { QualityAssuranceEventData } from '../../../../notifications/qa/project-entry-import-modal/project-entry-import-modal.component';\nimport { hasValue } from '../../../../shared/empty.util';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../../../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../../../cache/models/request-param.model';\nimport { ObjectCacheService } from '../../../cache/object-cache.service';\nimport {\n  CreateData,\n  CreateDataImpl,\n} from '../../../data/base/create-data';\nimport {\n  DeleteData,\n  DeleteDataImpl,\n} from '../../../data/base/delete-data';\nimport { IdentifiableDataService } from '../../../data/base/identifiable-data.service';\nimport {\n  PatchData,\n  PatchDataImpl,\n} from '../../../data/base/patch-data';\nimport {\n  SearchData,\n  SearchDataImpl,\n} from '../../../data/base/search-data';\nimport { DefaultChangeAnalyzer } from '../../../data/default-change-analyzer.service';\nimport { FindListOptions } from '../../../data/find-list-options.model';\nimport { PaginatedList } from '../../../data/paginated-list.model';\nimport { RemoteData } from '../../../data/remote-data';\nimport {\n  DeleteByIDRequest,\n  PostRequest,\n} from '../../../data/request.models';\nimport { RequestService } from '../../../data/request.service';\nimport { HttpOptions } from '../../../dspace-rest/dspace-rest.service';\nimport { HALEndpointService } from '../../../shared/hal-endpoint.service';\nimport { NoContent } from '../../../shared/NoContent.model';\nimport { QualityAssuranceEventObject } from '../models/quality-assurance-event.model';\n\n/**\n * The service handling all Quality Assurance topic REST requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class QualityAssuranceEventDataService extends IdentifiableDataService<QualityAssuranceEventObject> {\n\n  private createData: CreateData<QualityAssuranceEventObject>;\n  private searchData: SearchData<QualityAssuranceEventObject>;\n  private patchData: PatchData<QualityAssuranceEventObject>;\n  private deleteData: DeleteData<QualityAssuranceEventObject>;\n\n  /**\n   * Initialize service variables\n   * @param {RequestService} requestService\n   * @param {RemoteDataBuildService} rdbService\n   * @param {ObjectCacheService} objectCache\n   * @param {HALEndpointService} halService\n   * @param {NotificationsService} notificationsService\n   * @param {DefaultChangeAnalyzer<QualityAssuranceEventObject>} comparator\n   */\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected comparator: DefaultChangeAnalyzer<QualityAssuranceEventObject>,\n  ) {\n    super('qualityassuranceevents', requestService, rdbService, objectCache, halService);\n    this.createData = new CreateDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n    this.patchData = new PatchDataImpl<QualityAssuranceEventObject>(this.linkPath, requestService, rdbService, objectCache, halService, comparator, this.responseMsToLive, this.constructIdEndpoint);\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  /**\n   * Return the list of Quality Assurance events by topic.\n   *\n   * @param topic\n   *    The Quality Assurance topic\n   * @param options\n   *    Find list options object.\n   * @param linksToFollow\n   *    List of {@link FollowLinkConfig} that indicate which {@link HALLink}s should be automatically resolved.\n   * @return Observable<RemoteData<PaginatedList<QualityAssuranceEventObject>>>\n   *    The list of Quality Assurance events.\n   */\n  public getEventsByTopic(topic: string, options: FindListOptions = {}, ...linksToFollow: FollowLinkConfig<QualityAssuranceEventObject>[]): Observable<RemoteData<PaginatedList<QualityAssuranceEventObject>>> {\n    options.searchParams = [\n      new RequestParam('topic', topic),\n    ];\n    return this.searchData.searchBy('findByTopic', options, true, true, ...linksToFollow);\n  }\n\n  /**\n   * Service for retrieving Quality Assurance events by topic and target.\n   * @param options (Optional) The search options to use when retrieving the events.\n   * @param linksToFollow (Optional) The links to follow when retrieving the events.\n   * @returns An observable of the remote data containing the paginated list of Quality Assurance events.\n   */\n  public searchEventsByTopic(options: FindListOptions = {}, ...linksToFollow: FollowLinkConfig<QualityAssuranceEventObject>[]): Observable<RemoteData<PaginatedList<QualityAssuranceEventObject>>> {\n    return this.searchData.searchBy('findByTopic', options, true, true, ...linksToFollow);\n  }\n\n  /**\n   * Clear findByTopic requests from cache\n   */\n  public clearFindByTopicRequests() {\n    this.requestService.setStaleByHrefSubstring('findByTopic');\n  }\n\n  /**\n   * Return a single Quality Assurance event.\n   *\n   * @param id\n   *    The Quality Assurance event id\n   * @param linksToFollow\n   *    List of {@link FollowLinkConfig} that indicate which {@link HALLink}s should be automatically resolved\n   * @return Observable<RemoteData<QualityAssuranceEventObject>>\n   *    The Quality Assurance event.\n   */\n  public getEvent(id: string, ...linksToFollow: FollowLinkConfig<QualityAssuranceEventObject>[]): Observable<RemoteData<QualityAssuranceEventObject>> {\n    return this.findById(id, true, true, ...linksToFollow);\n  }\n\n  /**\n   * Save the new status of a Quality Assurance event.\n   *\n   * @param status\n   *    The new status\n   * @param dso QualityAssuranceEventObject\n   *    The event item\n   * @param reason\n   *    The optional reason (not used for now; for future implementation)\n   * @return Observable<RestResponse>\n   *    The REST response.\n   */\n  public patchEvent(status, dso, reason?: string): Observable<RemoteData<QualityAssuranceEventObject>> {\n    const operation: ReplaceOperation<string>[] = [\n      {\n        path: '/status',\n        op: 'replace',\n        value: status,\n      },\n    ];\n    return this.patchData.patch(dso, operation);\n  }\n\n  /**\n   * Bound a project to a Quality Assurance event publication.\n   *\n   * @param itemId\n   *    The Id of the Quality Assurance event\n   * @param projectId\n   *    The project Id to bound\n   * @return Observable<RestResponse>\n   *    The REST response.\n   */\n  public boundProject(itemId: string, projectId: string): Observable<RemoteData<QualityAssuranceEventObject>> {\n    return this.postOnRelated(itemId, projectId);\n  }\n\n  /**\n   * Remove a project from a Quality Assurance event publication.\n   *\n   * @param itemId\n   *    The Id of the Quality Assurance event\n   * @return Observable<RestResponse>\n   *    The REST response.\n   */\n  public removeProject(itemId: string): Observable<RemoteData<NoContent>> {\n    return this.deleteOnRelated(itemId);\n  }\n\n  /**\n   * Perform a delete operation on an endpoint related item. Ex.: endpoint/<itemId>/related\n   * @param objectId The item id\n   * @return the RestResponse as an Observable\n   */\n  private deleteOnRelated(objectId: string): Observable<RemoteData<NoContent>> {\n    const requestId = this.requestService.generateRequestId();\n\n    const hrefObs = this.getIDHrefObs(objectId);\n\n    hrefObs.pipe(\n      find((href: string) => hasValue(href)),\n    ).subscribe((href: string) => {\n      const request = new DeleteByIDRequest(requestId, href + '/related', objectId);\n      if (hasValue(this.responseMsToLive)) {\n        request.responseMsToLive = this.responseMsToLive;\n      }\n      this.requestService.send(request);\n    });\n\n    return this.rdbService.buildFromRequestUUID<QualityAssuranceEventObject>(requestId);\n  }\n\n  /**\n   * Perform a post on an endpoint related item with ID. Ex.: endpoint/<itemId>/related?item=<relatedItemId>\n   * @param objectId The item id\n   * @param relatedItemId The related item Id\n   * @param body The optional POST body\n   * @return the RestResponse as an Observable\n   */\n  private postOnRelated(objectId: string, relatedItemId: string, body?: any) {\n    const requestId = this.requestService.generateRequestId();\n    const hrefObs = this.getIDHrefObs(objectId);\n\n    hrefObs.pipe(\n      take(1),\n    ).subscribe((href: string) => {\n      const request = new PostRequest(requestId, href + '/related?item=' + relatedItemId, body);\n      if (hasValue(this.responseMsToLive)) {\n        request.responseMsToLive = this.responseMsToLive;\n      }\n      this.requestService.send(request);\n    });\n\n    return this.rdbService.buildFromRequestUUID<QualityAssuranceEventObject>(requestId);\n  }\n\n  /**\n   * Perform a post on an endpoint related to correction type\n   * @param data the data to post\n   * @returns the RestResponse as an Observable\n   */\n  postData(target: string, correctionType: string, related: string, reason: string): Observable<RemoteData<QualityAssuranceEventObject>> {\n    const requestId = this.requestService.generateRequestId();\n    const href$ = this.getBrowseEndpoint();\n\n    return href$.pipe(\n      switchMap((href: string) => {\n        const options: HttpOptions = Object.create({});\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        options.headers = headers;\n        let params = new HttpParams();\n        params = params.append('target', target)\n          .append('correctionType', correctionType);\n        options.params = params;\n        const request = new PostRequest(requestId, href, { 'reason': reason } , options);\n        if (hasValue(this.responseMsToLive)) {\n          request.responseMsToLive = this.responseMsToLive;\n        }\n        this.requestService.send(request);\n        return this.rdbService.buildFromRequestUUID<QualityAssuranceEventObject>(requestId);\n      }),\n    );\n  }\n\n  public deleteQAEvent(qaEvent: QualityAssuranceEventData): Observable<RemoteData<NoContent>> {\n    return this.deleteData.delete(qaEvent.id);\n  }\n\n}\n"],"names":["HttpHeaders","HttpParams","find","switchMap","take","hasValue","NotificationsService","RemoteDataBuildService","RequestParam","ObjectCacheService","CreateDataImpl","DeleteDataImpl","IdentifiableDataService","PatchDataImpl","SearchDataImpl","DefaultChangeAnalyzer","DeleteByIDRequest","PostRequest","RequestService","HALEndpointService","QualityAssuranceEventDataService","constructor","requestService","rdbService","objectCache","halService","notificationsService","comparator","createData","linkPath","responseMsToLive","deleteData","constructIdEndpoint","patchData","searchData","getEventsByTopic","topic","options","linksToFollow","searchParams","searchBy","searchEventsByTopic","clearFindByTopicRequests","setStaleByHrefSubstring","getEvent","id","findById","patchEvent","status","dso","reason","operation","path","op","value","patch","boundProject","itemId","projectId","postOnRelated","removeProject","deleteOnRelated","objectId","requestId","generateRequestId","hrefObs","getIDHrefObs","pipe","href","subscribe","request","send","buildFromRequestUUID","relatedItemId","body","postData","target","correctionType","related","href$","getBrowseEndpoint","Object","create","headers","append","params","deleteQAEvent","qaEvent","delete","i0","ɵɵinject","i1","i2","i3","i4","i5","i6","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}