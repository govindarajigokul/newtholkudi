{"version":3,"file":"src_app_admin_admin-registries_admin-registries-routes_ts.js","mappings":"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","sources":["./src/app/admin/admin-registries/admin-registries-routes.ts","./src/app/admin/admin-registries/admin-registries-routing-paths.ts","./src/app/admin/admin-registries/metadata-registry/metadata-registry.component.ts","./src/app/admin/admin-registries/metadata-registry/metadata-registry.component.html","./src/app/admin/admin-registries/metadata-registry/metadata-schema-form/metadata-schema-form.component.ts","./src/app/admin/admin-registries/metadata-registry/metadata-schema-form/metadata-schema-form.component.html","./src/app/admin/admin-registries/metadata-schema/metadata-field-form/metadata-field-form.component.ts","./src/app/admin/admin-registries/metadata-schema/metadata-field-form/metadata-field-form.component.html","./src/app/admin/admin-registries/metadata-schema/metadata-schema.component.ts","./src/app/admin/admin-registries/metadata-schema/metadata-schema.component.html","./src/app/shared/pagination/pagination.utils.ts"],"sourcesContent":["import { Route } from '@angular/router';\n\nimport { i18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { BITSTREAMFORMATS_MODULE_PATH } from './admin-registries-routing-paths';\nimport { MetadataRegistryComponent } from './metadata-registry/metadata-registry.component';\nimport { MetadataSchemaComponent } from './metadata-schema/metadata-schema.component';\n\nexport const ROUTES: Route[] = [\n  {\n    path: 'metadata',\n    resolve: { breadcrumb: i18nBreadcrumbResolver },\n    data: { title: 'admin.registries.metadata.title', breadcrumbKey: 'admin.registries.metadata' },\n    children: [\n      {\n        path: '',\n        component: MetadataRegistryComponent,\n      },\n      {\n        path: ':schemaName',\n        resolve: { breadcrumb: i18nBreadcrumbResolver },\n        component: MetadataSchemaComponent,\n        data: { title: 'admin.registries.schema.title', breadcrumbKey: 'admin.registries.schema' },\n      },\n    ],\n  },\n  {\n    path: BITSTREAMFORMATS_MODULE_PATH,\n    resolve: { breadcrumb: i18nBreadcrumbResolver },\n    loadChildren: () => import('./bitstream-formats/bitstream-formats-routes')\n      .then((m) => m.ROUTES),\n    data: { title: 'admin.registries.bitstream-formats.title', breadcrumbKey: 'admin.registries.bitstream-formats' },\n  },\n];\n","import { URLCombiner } from '../../core/url-combiner/url-combiner';\nimport { getRegistriesModuleRoute } from '../admin-routing-paths';\n\nexport const BITSTREAMFORMATS_MODULE_PATH = 'bitstream-formats';\n\nexport function getBitstreamFormatsModuleRoute() {\n  return new URLCombiner(getRegistriesModuleRoute(), BITSTREAMFORMATS_MODULE_PATH).toString();\n}\n","import {\n  AsyncPipe,\n  NgClass,\n  NgForOf,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  Subscription,\n  zip,\n} from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { MetadataSchema } from '../../../core/metadata/metadata-schema.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { RegistryService } from '../../../core/registry/registry.service';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { toFindListOptions } from '../../../shared/pagination/pagination.utils';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { MetadataSchemaFormComponent } from './metadata-schema-form/metadata-schema-form.component';\n\n@Component({\n  selector: 'ds-metadata-registry',\n  templateUrl: './metadata-registry.component.html',\n  styleUrls: ['./metadata-registry.component.scss'],\n  imports: [\n    MetadataSchemaFormComponent,\n    TranslateModule,\n    AsyncPipe,\n    PaginationComponent,\n    NgIf,\n    NgForOf,\n    NgClass,\n    RouterLink,\n  ],\n  standalone: true,\n})\n/**\n * A component used for managing all existing metadata schemas within the repository.\n * The admin can create, edit or delete metadata schemas here.\n */\nexport class MetadataRegistryComponent implements OnDestroy, OnInit {\n\n  /**\n   * A list of all the current metadata schemas within the repository\n   */\n  metadataSchemas: Observable<RemoteData<PaginatedList<MetadataSchema>>>;\n\n  /**\n   * The {@link MetadataSchema}that is being edited\n   */\n  activeMetadataSchema$: Observable<MetadataSchema>;\n\n  /**\n   * The selected {@link MetadataSchema} IDs\n   */\n  selectedMetadataSchemaIDs$: Observable<number[]>;\n\n  /**\n   * Pagination config used to display the list of metadata schemas\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'rm',\n    pageSize: 25,\n  });\n\n  /**\n   * Whether the list of MetadataSchemas needs an update\n   */\n  needsUpdate$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  subscriptions: Subscription[] = [];\n\n  constructor(\n    protected registryService: RegistryService,\n    protected notificationsService: NotificationsService,\n    protected paginationService: PaginationService,\n    protected translateService: TranslateService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.activeMetadataSchema$ = this.registryService.getActiveMetadataSchema();\n    this.selectedMetadataSchemaIDs$ = this.registryService.getSelectedMetadataSchemas().pipe(\n      map((schemas: MetadataSchema[]) => schemas.map((schema: MetadataSchema) => schema.id)),\n    );\n    this.updateSchemas();\n  }\n\n  /**\n   * Update the list of schemas by fetching it from the rest api or cache\n   */\n  private updateSchemas() {\n\n    this.metadataSchemas = this.needsUpdate$.pipe(\n      filter((update) => update === true),\n      switchMap(() => this.paginationService.getCurrentPagination(this.config.id, this.config)),\n      switchMap((currentPagination) => this.registryService.getMetadataSchemas(toFindListOptions(currentPagination))),\n    );\n  }\n\n  /**\n   * Force-update the list of schemas by first clearing the cache related to metadata schemas, then performing\n   * a new REST call\n   */\n  public forceUpdateSchemas() {\n    this.needsUpdate$.next(true);\n  }\n\n  /**\n   * Start editing the selected metadata schema\n   * @param schema\n   */\n  editSchema(schema: MetadataSchema) {\n    this.subscriptions.push(this.activeMetadataSchema$.pipe(take(1)).subscribe((activeSchema: MetadataSchema) => {\n      if (schema === activeSchema) {\n        this.registryService.cancelEditMetadataSchema();\n      } else {\n        this.registryService.editMetadataSchema(schema);\n      }\n    }));\n  }\n\n  /**\n   * Select a metadata schema within the list (checkbox)\n   * @param schema\n   * @param event\n   */\n  selectMetadataSchema(schema: MetadataSchema, event) {\n    event.target.checked ?\n      this.registryService.selectMetadataSchema(schema) :\n      this.registryService.deselectMetadataSchema(schema);\n  }\n\n  /**\n   * Delete all the selected metadata schemas\n   */\n  deleteSchemas() {\n    this.subscriptions.push(this.selectedMetadataSchemaIDs$.pipe(\n      take(1),\n      switchMap((schemaIDs: number[]) => zip(schemaIDs.map((schemaID: number) => this.registryService.deleteMetadataSchema(schemaID).pipe(getFirstCompletedRemoteData())))),\n    ).subscribe((responses: RemoteData<NoContent>[]) => {\n      const successResponses: RemoteData<NoContent>[] = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n      const failedResponses: RemoteData<NoContent>[] = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n      if (successResponses.length > 0) {\n        this.showNotification(true, successResponses.length);\n      }\n      if (failedResponses.length > 0) {\n        this.showNotification(false, failedResponses.length);\n      }\n      this.registryService.deselectAllMetadataSchema();\n      this.registryService.cancelEditMetadataSchema();\n    }));\n  }\n\n  /**\n   * Show notifications for an amount of deleted metadata schemas\n   * @param success   Whether or not the notification should be a success message (error message when false)\n   * @param amount    The amount of deleted metadata schemas\n   */\n  showNotification(success: boolean, amount: number) {\n    const prefix = 'admin.registries.schema.notification';\n    const suffix = success ? 'success' : 'failure';\n\n    const head: string = this.translateService.instant(success ? `${prefix}.${suffix}` : `${prefix}.${suffix}`);\n    const content: string = this.translateService.instant(`${prefix}.deleted.${suffix}`, { amount: amount });\n\n    if (success) {\n      this.notificationsService.success(head, content);\n    } else {\n      this.notificationsService.error(head, content);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.config.id);\n    this.subscriptions.map((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"metadata-registry row\">\n        <div class=\"col-12\">\n\n            <h1 id=\"header\" class=\"border-bottom pb-2\">{{'admin.registries.metadata.head' | translate}}</h1>\n\n            <p id=\"description\" class=\"pb-2\">{{'admin.registries.metadata.description' | translate}}</p>\n\n            <ds-metadata-schema-form (submitForm)=\"forceUpdateSchemas()\"></ds-metadata-schema-form>\n\n            <ds-pagination\n                    *ngIf=\"(metadataSchemas | async)?.payload?.totalElements > 0\"\n                    [paginationOptions]=\"config\"\n                    [collectionSize]=\"(metadataSchemas | async)?.payload?.totalElements\"\n                    [hideGear]=\"true\"\n                    [hidePagerWhenSinglePage]=\"true\">\n\n                <div class=\"table-responsive\">\n                    <table id=\"metadata-schemas\" class=\"table table-striped table-hover\">\n                        <thead>\n                        <tr>\n                            <th scope=\"col\"><span class=\"sr-only\">{{'admin.registries.metadata.schemas.table.selected' | translate}}</span></th>\n                            <th scope=\"col\">{{'admin.registries.metadata.schemas.table.id' | translate}}</th>\n                            <th scope=\"col\">{{'admin.registries.metadata.schemas.table.namespace' | translate}}</th>\n                            <th scope=\"col\">{{'admin.registries.metadata.schemas.table.name' | translate}}</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let schema of (metadataSchemas | async)?.payload?.page\"\n                            [ngClass]=\"{'table-primary' : (activeMetadataSchema$ | async)?.id === schema.id}\">\n                            <td>\n                                <label class=\"mb-0\">\n                                    <input type=\"checkbox\"\n                                           [checked]=\"(selectedMetadataSchemaIDs$ | async)?.includes(schema.id)\"\n                                           (change)=\"selectMetadataSchema(schema, $event)\"\n                                    >\n                                    <span class=\"sr-only\">{{(((selectedMetadataSchemaIDs$ | async)?.includes(schema.id)) ? 'admin.registries.metadata.schemas.deselect' : 'admin.registries.metadata.schemas.select') | translate}}</span>\n                                </label>\n                            </td>\n                            <td class=\"selectable-row\" (click)=\"editSchema(schema)\"><a [routerLink]=\"[schema.prefix]\">{{schema.id}}</a></td>\n                            <td class=\"selectable-row\" (click)=\"editSchema(schema)\"><a [routerLink]=\"[schema.prefix]\">{{schema.namespace}}</a></td>\n                            <td class=\"selectable-row\" (click)=\"editSchema(schema)\"><a [routerLink]=\"[schema.prefix]\">{{schema.prefix}}</a></td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n            </ds-pagination>\n\n            <div *ngIf=\"(metadataSchemas | async)?.payload?.totalElements === 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n              {{'admin.registries.metadata.schemas.no-items' | translate}}\n            </div>\n\n            <div>\n              <button *ngIf=\"(metadataSchemas | async)?.payload?.page?.length > 0\" type=\"submit\" class=\"btn btn-danger float-right\" (click)=\"deleteSchemas()\">{{'admin.registries.metadata.schemas.table.delete' | translate}}</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n","import {\n  AsyncPipe,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicInputModel,\n} from '@ng-dynamic-forms/core';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport { MetadataSchema } from '../../../../core/metadata/metadata-schema.model';\nimport { RegistryService } from '../../../../core/registry/registry.service';\nimport { FormBuilderService } from '../../../../shared/form/builder/form-builder.service';\nimport { FormComponent } from '../../../../shared/form/form.component';\n\n@Component({\n  selector: 'ds-metadata-schema-form',\n  templateUrl: './metadata-schema-form.component.html',\n  imports: [\n    NgIf,\n    AsyncPipe,\n    TranslateModule,\n    FormComponent,\n  ],\n  standalone: true,\n})\n/**\n * A form used for creating and editing metadata schemas\n */\nexport class MetadataSchemaFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'metadata-schema-form';\n\n  /**\n   * The prefix for all messages related to this form\n   */\n  messagePrefix = 'admin.registries.metadata.form';\n\n  /**\n   * A dynamic input model for the name field\n   */\n  name: DynamicInputModel;\n\n  /**\n   * A dynamic input model for the namespace field\n   */\n  namespace: DynamicInputModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    name: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block',\n      },\n    },\n    namespace: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block',\n      },\n    },\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: UntypedFormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The {@link MetadataSchema} that is currently being edited\n   */\n  activeMetadataSchema$: Observable<MetadataSchema>;\n\n  subscriptions: Subscription[] = [];\n\n  constructor(\n    protected registryService: RegistryService,\n    protected formBuilderService: FormBuilderService,\n    protected translateService: TranslateService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.name = new DynamicInputModel({\n      id: 'name',\n      label: this.translateService.instant(`${this.messagePrefix}.name`),\n      name: 'name',\n      validators: {\n        required: null,\n        pattern: '^[^. ,]*$',\n        maxLength: 32,\n      },\n      required: true,\n      errorMessages: {\n        pattern: 'error.validation.metadata.name.invalid-pattern',\n        maxLength: 'error.validation.metadata.name.max-length',\n      },\n    });\n    this.namespace = new DynamicInputModel({\n      id: 'namespace',\n      label: this.translateService.instant(`${this.messagePrefix}.namespace`),\n      name: 'namespace',\n      validators: {\n        required: null,\n        maxLength: 256,\n      },\n      required: true,\n      errorMessages: {\n        maxLength: 'error.validation.metadata.namespace.max-length',\n      },\n    });\n    this.formModel = [\n      new DynamicFormGroupModel(\n        {\n          id: 'metadatadataschemagroup',\n          group:[this.namespace, this.name],\n        }),\n    ];\n    this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n    this.activeMetadataSchema$ = this.registryService.getActiveMetadataSchema();\n    this.subscriptions.push(this.activeMetadataSchema$.subscribe((schema: MetadataSchema) => {\n      if (schema == null) {\n        this.clearFields();\n      } else {\n        this.formGroup.patchValue({\n          metadatadataschemagroup: {\n            name: schema.prefix,\n            namespace: schema.namespace,\n          },\n        });\n        this.name.disabled = true;\n      }\n    }));\n  }\n\n  /**\n   * Stop editing the currently selected metadata schema\n   */\n  onCancel() {\n    this.registryService.cancelEditMetadataSchema();\n  }\n\n  /**\n   * Submit the form\n   * When the schema has an id attached -> Edit the schema\n   * When the schema has no id attached -> Create new schema\n   * Emit the updated/created schema using the EventEmitter submitForm\n   */\n  onSubmit(): void {\n    this.activeMetadataSchema$.pipe(\n      take(1),\n      switchMap((schema: MetadataSchema) => {\n        const metadataValues = {\n          prefix: this.name.value,\n          namespace: this.namespace.value,\n        };\n        if (schema == null) {\n          return this.registryService.createOrUpdateMetadataSchema(Object.assign(new MetadataSchema(), metadataValues));\n        } else {\n          return this.registryService.createOrUpdateMetadataSchema(Object.assign(new MetadataSchema(), schema, {\n            namespace: metadataValues.namespace,\n          }));\n        }\n      }),\n      switchMap((updatedOrCreatedSchema: MetadataSchema) => this.registryService.clearMetadataSchemaRequests().pipe(\n        map(() => updatedOrCreatedSchema),\n      )),\n    ).subscribe((updatedOrCreatedSchema: MetadataSchema) => {\n      this.submitForm.emit(updatedOrCreatedSchema);\n      this.clearFields();\n      this.registryService.cancelEditMetadataSchema();\n    });\n  }\n\n  /**\n   * Reset all input-fields to be empty\n   */\n  clearFields(): void {\n    this.formGroup.reset('metadatadataschemagroup');\n    this.name.disabled = false;\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.onCancel();\n    this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n}\n","<div *ngIf=\"activeMetadataSchema$ | async; then editheader; else createHeader\"></div>\n\n<ng-template #createHeader>\n    <h2>{{messagePrefix + '.create' | translate}}</h2>\n</ng-template>\n\n<ng-template #editheader>\n    <h2>{{messagePrefix + '.edit' | translate}}</h2>\n</ng-template>\n\n<ds-form [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [formLayout]=\"formLayout\"\n         (cancel)=\"onCancel()\"\n         (submitForm)=\"onSubmit()\">\n\n</ds-form>\n","import {\n  AsyncPipe,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicInputModel,\n  DynamicTextAreaModel,\n} from '@ng-dynamic-forms/core';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport { combineLatest } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { MetadataField } from '../../../../core/metadata/metadata-field.model';\nimport { MetadataSchema } from '../../../../core/metadata/metadata-schema.model';\nimport { RegistryService } from '../../../../core/registry/registry.service';\nimport { FormBuilderService } from '../../../../shared/form/builder/form-builder.service';\nimport { FormComponent } from '../../../../shared/form/form.component';\n\n@Component({\n  selector: 'ds-metadata-field-form',\n  templateUrl: './metadata-field-form.component.html',\n  imports: [\n    NgIf,\n    FormComponent,\n    TranslateModule,\n    AsyncPipe,\n  ],\n  standalone: true,\n})\n/**\n * A form used for creating and editing metadata fields\n */\nexport class MetadataFieldFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'metadata-field-form';\n\n  /**\n   * The prefix for all messages related to this form\n   */\n  messagePrefix = 'admin.registries.schema.form';\n\n  /**\n   * The metadata schema this field is attached to\n   */\n  @Input() metadataSchema: MetadataSchema;\n\n  /**\n   * A dynamic input model for the element field\n   */\n  element: DynamicInputModel;\n\n  /**\n   * A dynamic input model for the qualifier field\n   */\n  qualifier: DynamicInputModel;\n\n  /**\n   * A dynamic input model for the scopeNote field\n   */\n  scopeNote: DynamicTextAreaModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    element: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block',\n      },\n    },\n    qualifier: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block',\n      },\n    },\n    scopeNote: {\n      grid: {\n        host: 'col col-sm-12 d-inline-block',\n      },\n    },\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: UntypedFormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  constructor(public registryService: RegistryService,\n              private formBuilderService: FormBuilderService,\n              private translateService: TranslateService) {\n  }\n\n  /**\n   * Initialize the component, setting up the necessary Models for the dynamic form\n   */\n  ngOnInit() {\n    combineLatest([\n      this.translateService.get(`${this.messagePrefix}.element`),\n      this.translateService.get(`${this.messagePrefix}.qualifier`),\n      this.translateService.get(`${this.messagePrefix}.scopenote`),\n    ]).subscribe(([element, qualifier, scopenote]) => {\n      this.element = new DynamicInputModel({\n        id: 'element',\n        label: element,\n        name: 'element',\n        validators: {\n          required: null,\n          pattern: '^[^. ,]*$',\n          maxLength: 64,\n        },\n        required: true,\n        errorMessages: {\n          pattern: 'error.validation.metadata.element.invalid-pattern',\n          maxLength: 'error.validation.metadata.element.max-length',\n        },\n      });\n      this.qualifier = new DynamicInputModel({\n        id: 'qualifier',\n        label: qualifier,\n        name: 'qualifier',\n        validators: {\n          pattern: '^[^. ,]*$',\n          maxLength: 64,\n        },\n        required: false,\n        errorMessages: {\n          pattern: 'error.validation.metadata.qualifier.invalid-pattern',\n          maxLength: 'error.validation.metadata.qualifier.max-length',\n        },\n      });\n      this.scopeNote = new DynamicTextAreaModel({\n        id: 'scopeNote',\n        label: scopenote,\n        name: 'scopeNote',\n        required: false,\n        rows: 5,\n      });\n      this.formModel = [\n        new DynamicFormGroupModel(\n          {\n            id: 'metadatadatafieldgroup',\n            group:[this.element, this.qualifier, this.scopeNote],\n          }),\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n      this.registryService.getActiveMetadataField().subscribe((field: MetadataField): void => {\n        if (field == null) {\n          this.clearFields();\n        } else {\n          this.formGroup.patchValue({\n            metadatadatafieldgroup: {\n              element: field.element,\n              qualifier: field.qualifier,\n              scopeNote: field.scopeNote,\n            },\n          });\n          this.element.disabled = true;\n          this.qualifier.disabled = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Stop editing the currently selected metadata field\n   */\n  onCancel() {\n    this.registryService.cancelEditMetadataField();\n  }\n\n  /**\n   * Submit the form\n   * When the field has an id attached -> Edit the field\n   * When the field has no id attached -> Create new field\n   * Emit the updated/created field using the EventEmitter submitForm\n   */\n  onSubmit(): void {\n    this.registryService.getActiveMetadataField().pipe(take(1)).subscribe(\n      (field: MetadataField) => {\n        if (field == null) {\n          this.registryService.createMetadataField(Object.assign(new MetadataField(), {\n            element: this.element.value,\n            qualifier: this.qualifier.value,\n            scopeNote: this.scopeNote.value,\n          }), this.metadataSchema).subscribe((newField: MetadataField) => {\n            this.submitForm.emit(newField);\n          });\n        } else {\n          this.registryService.updateMetadataField(Object.assign(new MetadataField(), field, {\n            id: field.id,\n            element: field.element,\n            qualifier: field.qualifier,\n            scopeNote: this.scopeNote.value,\n          })).subscribe((updatedField: MetadataField) => {\n            this.submitForm.emit(updatedField);\n          });\n        }\n        this.clearFields();\n        this.registryService.cancelEditMetadataField();\n      },\n    );\n  }\n\n  /**\n   * Reset all input-fields to be empty\n   */\n  clearFields(): void {\n    this.formGroup.reset('metadatadatafieldgroup');\n    this.element.disabled = false;\n    this.qualifier.disabled = false;\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.onCancel();\n  }\n}\n","<div *ngIf=\"registryService.getActiveMetadataField() | async; then editheader; else createHeader\"></div>\n\n<ng-template #createHeader>\n    <h2>{{messagePrefix + '.create' | translate}}</h2>\n</ng-template>\n\n<ng-template #editheader>\n    <h2>{{messagePrefix + '.edit' | translate}}</h2>\n</ng-template>\n\n<ds-form [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formLayout]=\"formLayout\"\n         [formGroup]=\"formGroup\"\n         (cancel)=\"onCancel()\"\n         (submit)=\"onSubmit()\">\n\n</ds-form>\n","import {\n  AsyncPipe,\n  NgClass,\n  NgForOf,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  RouterLink,\n} from '@angular/router';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  Observable,\n  of as observableOf,\n  Subscription,\n  zip,\n} from 'rxjs';\nimport {\n  map,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { MetadataField } from '../../../core/metadata/metadata-field.model';\nimport { MetadataSchema } from '../../../core/metadata/metadata-schema.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { RegistryService } from '../../../core/registry/registry.service';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload,\n} from '../../../core/shared/operators';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { toFindListOptions } from '../../../shared/pagination/pagination.utils';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { VarDirective } from '../../../shared/utils/var.directive';\nimport { MetadataFieldFormComponent } from './metadata-field-form/metadata-field-form.component';\n\n@Component({\n  selector: 'ds-metadata-schema',\n  templateUrl: './metadata-schema.component.html',\n  styleUrls: ['./metadata-schema.component.scss'],\n  imports: [\n    AsyncPipe,\n    VarDirective,\n    MetadataFieldFormComponent,\n    TranslateModule,\n    PaginationComponent,\n    NgIf,\n    NgForOf,\n    NgClass,\n    RouterLink,\n  ],\n  standalone: true,\n})\n/**\n * A component used for managing all existing metadata fields within the current metadata schema.\n * The admin can create, edit or delete metadata fields here.\n */\nexport class MetadataSchemaComponent implements OnDestroy, OnInit {\n  /**\n   * The metadata schema\n   */\n  metadataSchema$: Observable<MetadataSchema>;\n\n  /**\n   * A list of all the fields attached to this metadata schema\n   */\n  metadataFields$: Observable<RemoteData<PaginatedList<MetadataField>>>;\n\n  /**\n   * Pagination config used to display the list of metadata fields\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'rm',\n    pageSize: 25,\n    pageSizeOptions: [25, 50, 100, 200],\n  });\n\n  /**\n   * Whether or not the list of MetadataFields needs an update\n   */\n  needsUpdate$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  /**\n   * The current {@link MetadataField} that is being edited\n   */\n  activeField$: Observable<MetadataField>;\n\n  /**\n   * The selected {@link MetadataField} IDs\n   */\n  selectedMetadataFieldIDs$: Observable<number[]>;\n\n  subscriptions: Subscription[] = [];\n\n  constructor(\n    protected registryService: RegistryService,\n    protected route: ActivatedRoute,\n    protected notificationsService: NotificationsService,\n    protected paginationService: PaginationService,\n    protected translateService: TranslateService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.metadataSchema$ = this.registryService.getMetadataSchemaByPrefix(this.route.snapshot.params.schemaName).pipe(getFirstSucceededRemoteDataPayload());\n    this.activeField$ = this.registryService.getActiveMetadataField();\n    this.selectedMetadataFieldIDs$ = this.registryService.getSelectedMetadataFields().pipe(\n      map((metadataFields: MetadataField[]) => metadataFields.map((metadataField: MetadataField) => metadataField.id)),\n    );\n    this.updateFields();\n  }\n\n  /**\n   * Update the list of fields by fetching it from the rest api or cache\n   */\n  private updateFields() {\n    this.metadataFields$ = this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n      switchMap((currentPagination) => combineLatest([this.metadataSchema$, this.needsUpdate$, observableOf(currentPagination)])),\n      switchMap(([schema, update, currentPagination]: [MetadataSchema, boolean, PaginationComponentOptions]) => {\n        if (update) {\n          this.needsUpdate$.next(false);\n        }\n        return this.registryService.getMetadataFieldsBySchema(schema, toFindListOptions(currentPagination), !update, true);\n      }),\n    );\n  }\n\n  /**\n   * Force-update the list of fields by first clearing the cache related to metadata fields, then performing\n   * a new REST call\n   */\n  public forceUpdateFields() {\n    this.registryService.clearMetadataFieldRequests();\n    this.needsUpdate$.next(true);\n  }\n\n  /**\n   * Start editing the selected metadata field\n   * @param field\n   */\n  editField(field: MetadataField) {\n    this.subscriptions.push(this.activeField$.pipe(take(1)).subscribe((activeField) => {\n      if (field === activeField) {\n        this.registryService.cancelEditMetadataField();\n      } else {\n        this.registryService.editMetadataField(field);\n      }\n    }));\n  }\n\n  /**\n   * Select a metadata field within the list (checkbox)\n   * @param field\n   * @param event\n   */\n  selectMetadataField(field: MetadataField, event) {\n    event.target.checked ?\n      this.registryService.selectMetadataField(field) :\n      this.registryService.deselectMetadataField(field);\n  }\n\n  /**\n   * Delete all the selected metadata fields\n   */\n  deleteFields() {\n    this.subscriptions.push(this.selectedMetadataFieldIDs$.pipe(\n      take(1),\n      switchMap((fieldIDs) => zip(fieldIDs.map((fieldID) => this.registryService.deleteMetadataField(fieldID).pipe(getFirstCompletedRemoteData())))),\n    ).subscribe((responses: RemoteData<NoContent>[]) => {\n      const successResponses = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n      const failedResponses = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n      if (successResponses.length > 0) {\n        this.showNotification(true, successResponses.length);\n      }\n      if (failedResponses.length > 0) {\n        this.showNotification(false, failedResponses.length);\n      }\n      this.registryService.deselectAllMetadataField();\n      this.registryService.cancelEditMetadataField();\n    }));\n  }\n\n  /**\n   * Show notifications for an amount of deleted metadata fields\n   * @param success   Whether or not the notification should be a success message (error message when false)\n   * @param amount    The amount of deleted metadata fields\n   */\n  showNotification(success: boolean, amount: number) {\n    const prefix = 'admin.registries.schema.notification';\n    const suffix = success ? 'success' : 'failure';\n    const head = this.translateService.instant(success ? `${prefix}.${suffix}` : `${prefix}.${suffix}`);\n    const content = this.translateService.instant(`${prefix}.field.deleted.${suffix}`, { amount: amount });\n    if (success) {\n      this.notificationsService.success(head, content);\n    } else {\n      this.notificationsService.error(head, content);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.config.id);\n    this.registryService.deselectAllMetadataField();\n    this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"metadata-schema row\">\n    <div class=\"col-12\" *ngVar=\"(metadataSchema$ | async) as schema\">\n\n      <h1 id=\"header\" class=\"border-bottom pb-2\">{{'admin.registries.schema.head' | translate}}: \"{{schema?.prefix}}\"</h1>\n\n      <p id=\"description\" class=\"pb-2\">{{'admin.registries.schema.description' | translate:{ namespace: schema?.namespace } }}</p>\n\n      <ds-metadata-field-form\n        [metadataSchema]=\"schema\"\n        (submitForm)=\"forceUpdateFields()\"></ds-metadata-field-form>\n\n      <h2>{{'admin.registries.schema.fields.head' | translate}}</h2>\n\n      <ng-container *ngVar=\"(metadataFields$ | async)?.payload as fields\">\n        <ds-pagination\n          *ngIf=\"fields?.totalElements > 0\"\n          [paginationOptions]=\"config\"\n          [collectionSize]=\"fields?.totalElements\"\n          [hideGear]=\"false\"\n          [hidePagerWhenSinglePage]=\"true\">\n          <div class=\"table-responsive\">\n            <table id=\"metadata-fields\" class=\"table table-striped table-hover\">\n              <thead>\n              <tr>\n                <th><span class=\"sr-only\">{{'admin.registries.schema.fields.table.selected' | translate}}</span></th>\n                <th scope=\"col\">{{'admin.registries.schema.fields.table.id' | translate}}</th>\n                <th scope=\"col\">{{'admin.registries.schema.fields.table.field' | translate}}</th>\n                <th scope=\"col\">{{'admin.registries.schema.fields.table.scopenote' | translate}}</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr *ngFor=\"let field of fields?.page\"\n                  [ngClass]=\"{'table-primary' : (activeField$ | async)?.id === field.id}\">\n                <td *ngVar=\"(selectedMetadataFieldIDs$ | async)?.includes(field.id) as selected\">\n                  <input type=\"checkbox\"\n                         [attr.aria-label]=\"(selected ? 'admin.registries.schema.fields.deselect' : 'admin.registries.schema.fields.select') | translate\"\n                         [checked]=\"selected\"\n                         (change)=\"selectMetadataField(field, $event)\">\n                </td>\n                <td class=\"selectable-row\" (click)=\"editField(field)\">{{field.id}}</td>\n                <td class=\"selectable-row\" (click)=\"editField(field)\">{{schema?.prefix}}.{{field.element}}{{field.qualifier ? '.' + field.qualifier : ''}}</td>\n                <td class=\"selectable-row\" (click)=\"editField(field)\">{{field.scopeNote}}</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </ds-pagination>\n\n        <div *ngIf=\"fields?.totalElements === 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n          {{'admin.registries.schema.fields.no-items' | translate}}\n        </div>\n\n        <div>\n          <button [routerLink]=\"['/admin/registries/metadata']\" class=\"btn btn-primary\">{{'admin.registries.schema.return' | translate}}</button>\n          <button *ngIf=\"fields?.page?.length > 0\" type=\"submit\" class=\"btn btn-danger float-right\" (click)=\"deleteFields()\">{{'admin.registries.schema.fields.table.delete' | translate}}</button>\n        </div>\n      </ng-container>\n\n    </div>\n  </div>\n</div>\n","import { FindListOptions } from '../../core/data/find-list-options.model';\nimport { PaginationComponentOptions } from './pagination-component-options.model';\n\n/**\n * Transform a PaginationComponentOptions object into a FindListOptions object\n * @param pagination  The PaginationComponentOptions to transform\n * @param original    An original FindListOptions object to start from\n */\nexport function toFindListOptions(pagination: PaginationComponentOptions, original?: FindListOptions): FindListOptions {\n  return Object.assign(new FindListOptions(), original, {\n    currentPage: pagination.currentPage,\n    elementsPerPage: pagination.pageSize,\n  });\n}\n"],"names":["i18nBreadcrumbResolver","BITSTREAMFORMATS_MODULE_PATH","MetadataRegistryComponent","MetadataSchemaComponent","ROUTES","path","resolve","breadcrumb","data","title","breadcrumbKey","children","component","loadChildren","then","m","URLCombiner","getRegistriesModuleRoute","getBitstreamFormatsModuleRoute","toString","AsyncPipe","NgClass","NgForOf","NgIf","RouterLink","TranslateModule","TranslateService","BehaviorSubject","zip","filter","map","switchMap","take","PaginationService","RegistryService","getFirstCompletedRemoteData","NotificationsService","PaginationComponent","toFindListOptions","PaginationComponentOptions","MetadataSchemaFormComponent","i0","ɵɵelementStart","ɵɵlistener","MetadataRegistryComponent_ds_pagination_10_tr_20_Template_input_change_4_listener","$event","schema_r2","ɵɵrestoreView","_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","selectMetadataSchema","ɵɵelementEnd","ɵɵtext","MetadataRegistryComponent_ds_pagination_10_tr_20_Template_td_click_10_listener","editSchema","MetadataRegistryComponent_ds_pagination_10_tr_20_Template_td_click_13_listener","MetadataRegistryComponent_ds_pagination_10_tr_20_Template_td_click_16_listener","ɵɵproperty","ɵɵpureFunction1","_c0","tmp_3_0","ɵɵpipeBind1","activeMetadataSchema$","id","ɵɵadvance","tmp_4_0","selectedMetadataSchemaIDs$","includes","ɵɵtextInterpolate","tmp_5_0","_c1","prefix","namespace","ɵɵtemplate","MetadataRegistryComponent_ds_pagination_10_tr_20_Template","config","tmp_2_0","metadataSchemas","payload","totalElements","tmp_9_0","page","ɵɵtextInterpolate1","MetadataRegistryComponent_button_15_Template_button_click_0_listener","_r4","deleteSchemas","constructor","registryService","notificationsService","paginationService","translateService","Object","assign","pageSize","needsUpdate$","subscriptions","ngOnInit","getActiveMetadataSchema","getSelectedMetadataSchemas","pipe","schemas","schema","updateSchemas","update","getCurrentPagination","currentPagination","getMetadataSchemas","forceUpdateSchemas","next","push","subscribe","activeSchema","cancelEditMetadataSchema","editMetadataSchema","event","target","checked","deselectMetadataSchema","schemaIDs","schemaID","deleteMetadataSchema","responses","successResponses","response","hasSucceeded","failedResponses","hasFailed","length","showNotification","deselectAllMetadataSchema","success","amount","suffix","head","instant","content","error","ngOnDestroy","clearPagination","subscription","unsubscribe","ɵɵdirectiveInject","i1","i2","i3","i4","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","MetadataRegistryComponent_Template","rf","ctx","MetadataRegistryComponent_Template_ds_metadata_schema_form_submitForm_9_listener","MetadataRegistryComponent_ds_pagination_10_Template","MetadataRegistryComponent_div_12_Template","MetadataRegistryComponent_button_15_Template","TranslatePipe","styles","EventEmitter","DynamicFormGroupModel","DynamicInputModel","MetadataSchema","FormBuilderService","FormComponent","ɵɵelement","ctx_r1","messagePrefix","formBuilderService","formId","formLayout","name","grid","host","submitForm","label","validators","required","pattern","maxLength","errorMessages","formModel","group","formGroup","createFormGroup","clearFields","patchValue","metadatadataschemagroup","disabled","onCancel","onSubmit","metadataValues","value","createOrUpdateMetadataSchema","updatedOrCreatedSchema","clearMetadataSchemaRequests","emit","reset","forEach","outputs","MetadataSchemaFormComponent_Template","MetadataSchemaFormComponent_div_0_Template","MetadataSchemaFormComponent_ng_template_2_Template","ɵɵtemplateRefExtractor","MetadataSchemaFormComponent_ng_template_4_Template","MetadataSchemaFormComponent_Template_ds_form_cancel_6_listener","MetadataSchemaFormComponent_Template_ds_form_submitForm_6_listener","editheader_r4","createHeader_r3","encapsulation","DynamicTextAreaModel","combineLatest","MetadataField","MetadataFieldFormComponent","element","qualifier","scopeNote","get","scopenote","rows","getActiveMetadataField","field","metadatadatafieldgroup","cancelEditMetadataField","createMetadataField","metadataSchema","newField","updateMetadataField","updatedField","inputs","MetadataFieldFormComponent_Template","MetadataFieldFormComponent_div_0_Template","MetadataFieldFormComponent_ng_template_2_Template","MetadataFieldFormComponent_ng_template_4_Template","MetadataFieldFormComponent_Template_ds_form_cancel_6_listener","MetadataFieldFormComponent_Template_ds_form_submit_6_listener","ActivatedRoute","of","observableOf","getFirstSucceededRemoteDataPayload","VarDirective","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_tr_19_td_2_Template_input_change_1_listener","field_r5","selectMetadataField","selected_r6","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_tr_19_td_2_Template","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_tr_19_Template_td_click_4_listener","_r3","editField","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_tr_19_Template_td_click_6_listener","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_tr_19_Template_td_click_8_listener","_c2","tmp_7_0","activeField$","tmp_8_0","selectedMetadataFieldIDs$","ɵɵtextInterpolate3","schema_r7","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_tr_19_Template","fields_r8","MetadataSchemaComponent_div_2_ng_container_11_button_7_Template_button_click_0_listener","_r9","deleteFields","ɵɵelementContainerStart","MetadataSchemaComponent_div_2_ng_container_11_ds_pagination_1_Template","MetadataSchemaComponent_div_2_ng_container_11_div_2_Template","MetadataSchemaComponent_div_2_ng_container_11_button_7_Template","ɵɵpureFunction0","MetadataSchemaComponent_div_2_Template_ds_metadata_field_form_submitForm_7_listener","forceUpdateFields","MetadataSchemaComponent_div_2_ng_container_11_Template","ɵɵtextInterpolate2","ɵɵpipeBind2","tmp_6_0","metadataFields$","route","pageSizeOptions","metadataSchema$","getMetadataSchemaByPrefix","snapshot","params","schemaName","getSelectedMetadataFields","metadataFields","metadataField","updateFields","getMetadataFieldsBySchema","clearMetadataFieldRequests","activeField","editMetadataField","deselectMetadataField","fieldIDs","fieldID","deleteMetadataField","deselectAllMetadataField","i5","MetadataSchemaComponent_Template","MetadataSchemaComponent_div_2_Template","FindListOptions","pagination","original","currentPage","elementsPerPage"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}