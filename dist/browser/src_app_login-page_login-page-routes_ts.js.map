{"version":3,"file":"src_app_login-page_login-page-routes_ts.js","mappings":"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","sources":["./src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts","./src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","./src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","./src/app/login-page/login-page-routes.ts","./src/app/login-page/login-page.component.ts","./src/app/login-page/login-page.component.html","./src/app/login-page/themed-login-page.component.ts","./src/app/shared/theme-support/themed.component.html","./src/themes/ lazy ^\\.\\/.*\\/app\\/login\\-page\\/login\\-page\\.component$ namespace object"],"sourcesContent":["/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\n\n/**\n * Method for resolving an I18n breadcrumb configuration object\n * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n * @param {I18nBreadcrumbsService} breadcrumbService\n * @returns BreadcrumbConfig object\n */\nexport const i18nBreadcrumbResolver: ResolveFn<BreadcrumbConfig<string>> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  breadcrumbService: I18nBreadcrumbsService = inject(I18nBreadcrumbsService),\n): BreadcrumbConfig<string> => {\n  const key = route.data.breadcrumbKey;\n  if (hasNoValue(key)) {\n    throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n  }\n  const fullPath = currentPathFromSnapshot(route);\n  return { provider: breadcrumbService, key: key, url: fullPath };\n};\n","import { Injectable } from '@angular/core';\nimport {\n  Observable,\n  of as observableOf,\n} from 'rxjs';\n\nimport { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Route } from '@angular/router';\n\nimport { i18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ThemedLoginPageComponent } from './themed-login-page.component';\n\nexport const ROUTES: Route[] = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: ThemedLoginPageComponent,\n    resolve: { breadcrumb: i18nBreadcrumbResolver },\n    data: { breadcrumbKey: 'login', title: 'login.title' },\n  },\n];\n\n","import {\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  combineLatest as observableCombineLatest,\n  Subscription,\n} from 'rxjs';\nimport {\n  filter,\n  take,\n} from 'rxjs/operators';\n\nimport { AppState } from '../app.reducer';\nimport {\n  AddAuthenticationMessageAction,\n  AuthenticatedAction,\n  AuthenticationSuccessAction,\n  ResetAuthenticationMessagesAction,\n} from '../core/auth/auth.actions';\nimport { AuthTokenInfo } from '../core/auth/models/auth-token-info.model';\nimport { isAuthenticated } from '../core/auth/selectors';\nimport {\n  hasValue,\n  isNotEmpty,\n} from '../shared/empty.util';\nimport { ThemedLogInComponent } from '../shared/log-in/themed-log-in.component';\n\n/**\n * This component represents the login page\n */\n@Component({\n  selector: 'ds-base-login-page',\n  styleUrls: ['./login-page.component.scss'],\n  templateUrl: './login-page.component.html',\n  standalone: true,\n  imports: [ThemedLogInComponent, TranslateModule],\n})\nexport class LoginPageComponent implements OnDestroy, OnInit {\n\n  /**\n   * Subscription to unsubscribe onDestroy\n   * @type {Subscription}\n   */\n  sub: Subscription;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   * @param {Store<AppState>} store\n   */\n  constructor(private route: ActivatedRoute,\n              private store: Store<AppState>) {}\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    const queryParamsObs = this.route.queryParams;\n    const authenticated = this.store.select(isAuthenticated);\n    this.sub = observableCombineLatest(queryParamsObs, authenticated).pipe(\n      filter(([params, auth]) => isNotEmpty(params.token) || isNotEmpty(params.expired)),\n      take(1),\n    ).subscribe(([params, auth]) => {\n      const token = params.token;\n      let authToken: AuthTokenInfo;\n      if (!auth) {\n        if (isNotEmpty(token)) {\n          authToken = new AuthTokenInfo(token);\n          this.store.dispatch(new AuthenticatedAction(authToken));\n        } else if (isNotEmpty(params.expired)) {\n          this.store.dispatch(new AddAuthenticationMessageAction('auth.messages.expired'));\n        }\n      } else {\n        if (isNotEmpty(token)) {\n          authToken = new AuthTokenInfo(token);\n          this.store.dispatch(new AuthenticationSuccessAction(authToken));\n        }\n      }\n    });\n  }\n\n  /**\n   * Unsubscribe from subscription\n   */\n  ngOnDestroy() {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n    // Clear all authentication messages when leaving login page\n    this.store.dispatch(new ResetAuthenticationMessagesAction());\n  }\n}\n","<div class=\"container w-100 h-100\">\n  <div class=\"text-center mt-5 row justify-content-center\">\n    <div>\n      <img class=\"mb-4 login-logo\" src=\"assets/images/dspace-logo.svg\" [alt]=\"'repository.image.logo' | translate\">\n      <h1 class=\"h3 mb-0 font-weight-normal\">{{\"login.form.header\" | translate}}</h1>\n      <ds-log-in\n      [isStandalonePage]=\"true\"></ds-log-in>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { LoginPageComponent } from './login-page.component';\n\n/**\n * Themed wrapper for LoginPageComponent\n */\n@Component({\n  selector: 'ds-login-page',\n  styleUrls: [],\n  templateUrl: './../shared/theme-support/themed.component.html',\n  standalone: true,\n  imports: [LoginPageComponent],\n})\nexport class ThemedLoginPageComponent extends ThemedComponent<LoginPageComponent> {\n  protected getComponentName(): string {\n    return 'LoginPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/login-page/login-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./login-page.component`);\n  }\n}\n","<ng-template #vcr>\n</ng-template>\n<div #content>\n  <ng-content></ng-content>\n</div>\n","var map = {\n\t\"./custom/app/login-page/login-page.component\": [\n\t\t1591,\n\t\t\"src_themes_custom_app_login-page_login-page_component_ts\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 37826;\nmodule.exports = webpackAsyncContext;"],"names":["Breadcrumb","constructor","text","url","inject","hasNoValue","currentPathFromSnapshot","I18nBreadcrumbsService","i18nBreadcrumbResolver","route","state","breadcrumbService","key","data","breadcrumbKey","Error","fullPath","provider","of","observableOf","BREADCRUMB_MESSAGE_POSTFIX","getBreadcrumbs","factory","ɵfac","providedIn","ThemedLoginPageComponent","ROUTES","path","pathMatch","component","resolve","breadcrumb","title","ActivatedRoute","Store","TranslateModule","combineLatest","observableCombineLatest","filter","take","AddAuthenticationMessageAction","AuthenticatedAction","AuthenticationSuccessAction","ResetAuthenticationMessagesAction","AuthTokenInfo","isAuthenticated","hasValue","isNotEmpty","ThemedLogInComponent","LoginPageComponent","store","ngOnInit","queryParamsObs","queryParams","authenticated","select","sub","pipe","params","auth","token","expired","subscribe","authToken","dispatch","ngOnDestroy","unsubscribe","i0","ɵɵdirectiveInject","i1","i2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginPageComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","ɵɵtextInterpolate","i3","TranslatePipe","styles","ThemedComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","t","ɵɵInheritDefinitionFeature","ngContentSelectors","_c0","ThemedLoginPageComponent_Template","ɵɵtemplate","ThemedLoginPageComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","ɵɵprojection"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}