{"version":3,"file":"default-src_app_core_breadcrumbs_quality-assurance-breadcrumb_resolver_ts-src_app_notificatio-52f0a5.js","mappings":"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","sources":["./src/app/core/breadcrumbs/quality-assurance-breadcrumb.resolver.ts","./src/app/core/breadcrumbs/quality-assurance-breadcrumb.service.ts","./src/app/core/notifications/qa/events/quality-assurance-event-data.service.ts","./src/app/notifications/notifications-state.service.ts","./src/app/notifications/qa/events/ePerson-data/ePerson-data.component.ts","./src/app/notifications/qa/events/ePerson-data/ePerson-data.component.html","./src/app/notifications/qa/events/quality-assurance-events.component.ts","./src/app/notifications/qa/events/quality-assurance-events.component.html","./src/app/notifications/qa/project-entry-import-modal/project-entry-import-modal.component.ts","./src/app/notifications/qa/project-entry-import-modal/project-entry-import-modal.component.html","./src/app/notifications/qa/source/quality-assurance-source.component.ts","./src/app/notifications/qa/source/quality-assurance-source.component.html","./src/app/notifications/qa/topics/quality-assurance-topics.component.ts","./src/app/notifications/qa/topics/quality-assurance-topics.component.html","./src/app/notifications/selectors.ts","./src/app/notifications/suggestion-targets/publication-claim/publication-claim.component.ts","./src/app/notifications/suggestion-targets/publication-claim/publication-claim.component.html","./src/app/quality-assurance-notifications-pages/notifications-suggestion-targets-page/notifications-suggestion-targets-page-resolver.service.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-events-page/quality-assurance-events-page.component.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-events-page/quality-assurance-events-page.component.html","./src/app/quality-assurance-notifications-pages/quality-assurance-events-page/quality-assurance-events-page.resolver.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-source-page-component/quality-assurance-source-data.resolver.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-source-page-component/quality-assurance-source-page-resolver.service.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-source-page-component/quality-assurance-source-page.component.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-source-page-component/quality-assurance-source-page.component.html","./src/app/quality-assurance-notifications-pages/quality-assurance-topics-page/quality-assurance-topics-page-resolver.service.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-topics-page/quality-assurance-topics-page.component.ts","./src/app/quality-assurance-notifications-pages/quality-assurance-topics-page/quality-assurance-topics-page.component.html","./src/app/shared/selector.util.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { QualityAssuranceBreadcrumbService } from './quality-assurance-breadcrumb.service';\n\nexport const qualityAssuranceBreadcrumbResolver: ResolveFn<BreadcrumbConfig<string>> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  breadcrumbService: QualityAssuranceBreadcrumbService = inject(QualityAssuranceBreadcrumbService),\n): BreadcrumbConfig<string> => {\n  const sourceId = route.paramMap.get('sourceId');\n  const topicId = route.paramMap.get('topicId');\n  let key = sourceId;\n\n  if (topicId) {\n    key += `:${topicId}`;\n  }\n  const fullPath = state.url;\n  const url = fullPath.substring(0, fullPath.indexOf(sourceId));\n\n  return { provider: breadcrumbService, key, url };\n};\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Observable,\n  of as observableOf,\n} from 'rxjs';\n\nimport { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\n\n/**\n * Service to calculate QA breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualityAssuranceBreadcrumbService implements BreadcrumbsProviderService<string> {\n\n  private QUALITY_ASSURANCE_BREADCRUMB_KEY = 'admin.quality-assurance.breadcrumbs';\n  constructor(\n    private translationService: TranslateService,\n  ) {\n\n  }\n\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    const args = key.split(':');\n    const sourceId = args[0];\n    const topicId = args.length > 2 ? args[args.length - 1] : args[1];\n\n    if (topicId) {\n      return observableOf( [new Breadcrumb(this.translationService.instant(this.QUALITY_ASSURANCE_BREADCRUMB_KEY), url),\n        new Breadcrumb(sourceId, `${url}${sourceId}`),\n        new Breadcrumb(topicId, undefined)]);\n    } else {\n      return observableOf([new Breadcrumb(this.translationService.instant(this.QUALITY_ASSURANCE_BREADCRUMB_KEY), url),\n        new Breadcrumb(sourceId, `${url}${sourceId}`)]);\n    }\n\n  }\n}\n","import {\n  HttpHeaders,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ReplaceOperation } from 'fast-json-patch';\nimport { Observable } from 'rxjs';\nimport {\n  find,\n  switchMap,\n  take,\n} from 'rxjs/operators';\n\nimport { QualityAssuranceEventData } from '../../../../notifications/qa/project-entry-import-modal/project-entry-import-modal.component';\nimport { hasValue } from '../../../../shared/empty.util';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { FollowLinkConfig } from '../../../../shared/utils/follow-link-config.model';\nimport { RemoteDataBuildService } from '../../../cache/builders/remote-data-build.service';\nimport { RequestParam } from '../../../cache/models/request-param.model';\nimport { ObjectCacheService } from '../../../cache/object-cache.service';\nimport {\n  CreateData,\n  CreateDataImpl,\n} from '../../../data/base/create-data';\nimport {\n  DeleteData,\n  DeleteDataImpl,\n} from '../../../data/base/delete-data';\nimport { IdentifiableDataService } from '../../../data/base/identifiable-data.service';\nimport {\n  PatchData,\n  PatchDataImpl,\n} from '../../../data/base/patch-data';\nimport {\n  SearchData,\n  SearchDataImpl,\n} from '../../../data/base/search-data';\nimport { DefaultChangeAnalyzer } from '../../../data/default-change-analyzer.service';\nimport { FindListOptions } from '../../../data/find-list-options.model';\nimport { PaginatedList } from '../../../data/paginated-list.model';\nimport { RemoteData } from '../../../data/remote-data';\nimport {\n  DeleteByIDRequest,\n  PostRequest,\n} from '../../../data/request.models';\nimport { RequestService } from '../../../data/request.service';\nimport { HttpOptions } from '../../../dspace-rest/dspace-rest.service';\nimport { HALEndpointService } from '../../../shared/hal-endpoint.service';\nimport { NoContent } from '../../../shared/NoContent.model';\nimport { QualityAssuranceEventObject } from '../models/quality-assurance-event.model';\n\n/**\n * The service handling all Quality Assurance topic REST requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class QualityAssuranceEventDataService extends IdentifiableDataService<QualityAssuranceEventObject> {\n\n  private createData: CreateData<QualityAssuranceEventObject>;\n  private searchData: SearchData<QualityAssuranceEventObject>;\n  private patchData: PatchData<QualityAssuranceEventObject>;\n  private deleteData: DeleteData<QualityAssuranceEventObject>;\n\n  /**\n   * Initialize service variables\n   * @param {RequestService} requestService\n   * @param {RemoteDataBuildService} rdbService\n   * @param {ObjectCacheService} objectCache\n   * @param {HALEndpointService} halService\n   * @param {NotificationsService} notificationsService\n   * @param {DefaultChangeAnalyzer<QualityAssuranceEventObject>} comparator\n   */\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected comparator: DefaultChangeAnalyzer<QualityAssuranceEventObject>,\n  ) {\n    super('qualityassuranceevents', requestService, rdbService, objectCache, halService);\n    this.createData = new CreateDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive);\n    this.deleteData = new DeleteDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, notificationsService, this.responseMsToLive, this.constructIdEndpoint);\n    this.patchData = new PatchDataImpl<QualityAssuranceEventObject>(this.linkPath, requestService, rdbService, objectCache, halService, comparator, this.responseMsToLive, this.constructIdEndpoint);\n    this.searchData = new SearchDataImpl(this.linkPath, requestService, rdbService, objectCache, halService, this.responseMsToLive);\n  }\n\n  /**\n   * Return the list of Quality Assurance events by topic.\n   *\n   * @param topic\n   *    The Quality Assurance topic\n   * @param options\n   *    Find list options object.\n   * @param linksToFollow\n   *    List of {@link FollowLinkConfig} that indicate which {@link HALLink}s should be automatically resolved.\n   * @return Observable<RemoteData<PaginatedList<QualityAssuranceEventObject>>>\n   *    The list of Quality Assurance events.\n   */\n  public getEventsByTopic(topic: string, options: FindListOptions = {}, ...linksToFollow: FollowLinkConfig<QualityAssuranceEventObject>[]): Observable<RemoteData<PaginatedList<QualityAssuranceEventObject>>> {\n    options.searchParams = [\n      new RequestParam('topic', topic),\n    ];\n    return this.searchData.searchBy('findByTopic', options, true, true, ...linksToFollow);\n  }\n\n  /**\n   * Service for retrieving Quality Assurance events by topic and target.\n   * @param options (Optional) The search options to use when retrieving the events.\n   * @param linksToFollow (Optional) The links to follow when retrieving the events.\n   * @returns An observable of the remote data containing the paginated list of Quality Assurance events.\n   */\n  public searchEventsByTopic(options: FindListOptions = {}, ...linksToFollow: FollowLinkConfig<QualityAssuranceEventObject>[]): Observable<RemoteData<PaginatedList<QualityAssuranceEventObject>>> {\n    return this.searchData.searchBy('findByTopic', options, true, true, ...linksToFollow);\n  }\n\n  /**\n   * Clear findByTopic requests from cache\n   */\n  public clearFindByTopicRequests() {\n    this.requestService.setStaleByHrefSubstring('findByTopic');\n  }\n\n  /**\n   * Return a single Quality Assurance event.\n   *\n   * @param id\n   *    The Quality Assurance event id\n   * @param linksToFollow\n   *    List of {@link FollowLinkConfig} that indicate which {@link HALLink}s should be automatically resolved\n   * @return Observable<RemoteData<QualityAssuranceEventObject>>\n   *    The Quality Assurance event.\n   */\n  public getEvent(id: string, ...linksToFollow: FollowLinkConfig<QualityAssuranceEventObject>[]): Observable<RemoteData<QualityAssuranceEventObject>> {\n    return this.findById(id, true, true, ...linksToFollow);\n  }\n\n  /**\n   * Save the new status of a Quality Assurance event.\n   *\n   * @param status\n   *    The new status\n   * @param dso QualityAssuranceEventObject\n   *    The event item\n   * @param reason\n   *    The optional reason (not used for now; for future implementation)\n   * @return Observable<RestResponse>\n   *    The REST response.\n   */\n  public patchEvent(status, dso, reason?: string): Observable<RemoteData<QualityAssuranceEventObject>> {\n    const operation: ReplaceOperation<string>[] = [\n      {\n        path: '/status',\n        op: 'replace',\n        value: status,\n      },\n    ];\n    return this.patchData.patch(dso, operation);\n  }\n\n  /**\n   * Bound a project to a Quality Assurance event publication.\n   *\n   * @param itemId\n   *    The Id of the Quality Assurance event\n   * @param projectId\n   *    The project Id to bound\n   * @return Observable<RestResponse>\n   *    The REST response.\n   */\n  public boundProject(itemId: string, projectId: string): Observable<RemoteData<QualityAssuranceEventObject>> {\n    return this.postOnRelated(itemId, projectId);\n  }\n\n  /**\n   * Remove a project from a Quality Assurance event publication.\n   *\n   * @param itemId\n   *    The Id of the Quality Assurance event\n   * @return Observable<RestResponse>\n   *    The REST response.\n   */\n  public removeProject(itemId: string): Observable<RemoteData<NoContent>> {\n    return this.deleteOnRelated(itemId);\n  }\n\n  /**\n   * Perform a delete operation on an endpoint related item. Ex.: endpoint/<itemId>/related\n   * @param objectId The item id\n   * @return the RestResponse as an Observable\n   */\n  private deleteOnRelated(objectId: string): Observable<RemoteData<NoContent>> {\n    const requestId = this.requestService.generateRequestId();\n\n    const hrefObs = this.getIDHrefObs(objectId);\n\n    hrefObs.pipe(\n      find((href: string) => hasValue(href)),\n    ).subscribe((href: string) => {\n      const request = new DeleteByIDRequest(requestId, href + '/related', objectId);\n      if (hasValue(this.responseMsToLive)) {\n        request.responseMsToLive = this.responseMsToLive;\n      }\n      this.requestService.send(request);\n    });\n\n    return this.rdbService.buildFromRequestUUID<QualityAssuranceEventObject>(requestId);\n  }\n\n  /**\n   * Perform a post on an endpoint related item with ID. Ex.: endpoint/<itemId>/related?item=<relatedItemId>\n   * @param objectId The item id\n   * @param relatedItemId The related item Id\n   * @param body The optional POST body\n   * @return the RestResponse as an Observable\n   */\n  private postOnRelated(objectId: string, relatedItemId: string, body?: any) {\n    const requestId = this.requestService.generateRequestId();\n    const hrefObs = this.getIDHrefObs(objectId);\n\n    hrefObs.pipe(\n      take(1),\n    ).subscribe((href: string) => {\n      const request = new PostRequest(requestId, href + '/related?item=' + relatedItemId, body);\n      if (hasValue(this.responseMsToLive)) {\n        request.responseMsToLive = this.responseMsToLive;\n      }\n      this.requestService.send(request);\n    });\n\n    return this.rdbService.buildFromRequestUUID<QualityAssuranceEventObject>(requestId);\n  }\n\n  /**\n   * Perform a post on an endpoint related to correction type\n   * @param data the data to post\n   * @returns the RestResponse as an Observable\n   */\n  postData(target: string, correctionType: string, related: string, reason: string): Observable<RemoteData<QualityAssuranceEventObject>> {\n    const requestId = this.requestService.generateRequestId();\n    const href$ = this.getBrowseEndpoint();\n\n    return href$.pipe(\n      switchMap((href: string) => {\n        const options: HttpOptions = Object.create({});\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        options.headers = headers;\n        let params = new HttpParams();\n        params = params.append('target', target)\n          .append('correctionType', correctionType);\n        options.params = params;\n        const request = new PostRequest(requestId, href, { 'reason': reason } , options);\n        if (hasValue(this.responseMsToLive)) {\n          request.responseMsToLive = this.responseMsToLive;\n        }\n        this.requestService.send(request);\n        return this.rdbService.buildFromRequestUUID<QualityAssuranceEventObject>(requestId);\n      }),\n    );\n  }\n\n  public deleteQAEvent(qaEvent: QualityAssuranceEventData): Observable<RemoteData<NoContent>> {\n    return this.deleteData.delete(qaEvent.id);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  select,\n  Store,\n} from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { QualityAssuranceSourceObject } from '../core/notifications/qa/models/quality-assurance-source.model';\nimport { QualityAssuranceTopicObject } from '../core/notifications/qa/models/quality-assurance-topic.model';\nimport { SuggestionNotificationsState } from './notifications.reducer';\nimport { RetrieveAllSourceAction } from './qa/source/quality-assurance-source.actions';\nimport { RetrieveAllTopicsAction } from './qa/topics/quality-assurance-topics.actions';\nimport {\n  getQualityAssuranceSourceCurrentPageSelector,\n  getQualityAssuranceSourceTotalPagesSelector,\n  getQualityAssuranceSourceTotalsSelector,\n  getQualityAssuranceTopicsCurrentPageSelector,\n  getQualityAssuranceTopicsTotalPagesSelector,\n  getQualityAssuranceTopicsTotalsSelector,\n  isQualityAssuranceSourceLoadedSelector,\n  isQualityAssuranceSourceProcessingSelector,\n  isQualityAssuranceTopicsLoadedSelector,\n  isQualityAssuranceTopicsProcessingSelector,\n  qualityAssuranceSourceObjectSelector,\n  qualityAssuranceTopicsObjectSelector,\n} from './selectors';\n\n/**\n * The service handling the Notifications State.\n */\n@Injectable({ providedIn: 'root' })\nexport class NotificationsStateService {\n\n  /**\n   * Initialize the service variables.\n   * @param {Store<SuggestionNotificationsState>} store\n   */\n  constructor(private store: Store<SuggestionNotificationsState>) { }\n\n  // Quality Assurance topics\n  // --------------------------------------------------------------------------\n\n  /**\n   * Returns the list of Quality Assurance topics from the state.\n   *\n   * @return Observable<QualityAssuranceTopicObject>\n   *    The list of Quality Assurance topics.\n   */\n  public getQualityAssuranceTopics(): Observable<QualityAssuranceTopicObject[]> {\n    return this.store.pipe(select(qualityAssuranceTopicsObjectSelector()));\n  }\n\n  /**\n   * Returns the information about the loading status of the Quality Assurance topics (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if the topics are loading, 'false' otherwise.\n   */\n  public isQualityAssuranceTopicsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(isQualityAssuranceTopicsLoadedSelector),\n      map((loaded: boolean) => !loaded),\n    );\n  }\n\n  /**\n   * Returns the information about the loading status of the Quality Assurance topics (whether or not they were loaded).\n   *\n   * @return Observable<boolean>\n   *    'true' if the topics are loaded, 'false' otherwise.\n   */\n  public isQualityAssuranceTopicsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(isQualityAssuranceTopicsLoadedSelector));\n  }\n\n  /**\n   * Returns the information about the processing status of the Quality Assurance topics (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if there are operations running on the topics (ex.: a REST call), 'false' otherwise.\n   */\n  public isQualityAssuranceTopicsProcessing(): Observable<boolean> {\n    return this.store.pipe(select(isQualityAssuranceTopicsProcessingSelector));\n  }\n\n  /**\n   * Returns, from the state, the total available pages of the Quality Assurance topics.\n   *\n   * @return Observable<number>\n   *    The number of the Quality Assurance topics pages.\n   */\n  public getQualityAssuranceTopicsTotalPages(): Observable<number> {\n    return this.store.pipe(select(getQualityAssuranceTopicsTotalPagesSelector));\n  }\n\n  /**\n   * Returns the current page of the Quality Assurance topics, from the state.\n   *\n   * @return Observable<number>\n   *    The number of the current Quality Assurance topics page.\n   */\n  public getQualityAssuranceTopicsCurrentPage(): Observable<number> {\n    return this.store.pipe(select(getQualityAssuranceTopicsCurrentPageSelector));\n  }\n\n  /**\n   * Returns the total number of the Quality Assurance topics.\n   *\n   * @return Observable<number>\n   *    The number of the Quality Assurance topics.\n   */\n  public getQualityAssuranceTopicsTotals(): Observable<number> {\n    return this.store.pipe(select(getQualityAssuranceTopicsTotalsSelector));\n  }\n\n  /**\n   * Dispatch a request to change the Quality Assurance topics state, retrieving the topics from the server.\n   *\n   * @param elementsPerPage\n   *    The number of the topics per page.\n   * @param currentPage\n   *    The number of the current page.\n   */\n  public dispatchRetrieveQualityAssuranceTopics(elementsPerPage: number, currentPage: number, sourceId: string, targteId?: string): void {\n    this.store.dispatch(new RetrieveAllTopicsAction(elementsPerPage, currentPage, sourceId, targteId));\n  }\n\n  // Quality Assurance source\n  // --------------------------------------------------------------------------\n\n  /**\n   * Returns the list of Quality Assurance source from the state.\n   *\n   * @return Observable<QualityAssuranceSourceObject>\n   *    The list of Quality Assurance source.\n   */\n  public getQualityAssuranceSource(): Observable<QualityAssuranceSourceObject[]> {\n    return this.store.pipe(select(qualityAssuranceSourceObjectSelector()));\n  }\n\n  /**\n   * Returns the information about the loading status of the Quality Assurance source (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if the source are loading, 'false' otherwise.\n   */\n  public isQualityAssuranceSourceLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(isQualityAssuranceSourceLoadedSelector),\n      map((loaded: boolean) => !loaded),\n    );\n  }\n\n  /**\n   * Returns the information about the loading status of the Quality Assurance source (whether or not they were loaded).\n   *\n   * @return Observable<boolean>\n   *    'true' if the source are loaded, 'false' otherwise.\n   */\n  public isQualityAssuranceSourceLoaded(): Observable<boolean> {\n    return this.store.pipe(select(isQualityAssuranceSourceLoadedSelector));\n  }\n\n  /**\n   * Returns the information about the processing status of the Quality Assurance source (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if there are operations running on the source (ex.: a REST call), 'false' otherwise.\n   */\n  public isQualityAssuranceSourceProcessing(): Observable<boolean> {\n    return this.store.pipe(select(isQualityAssuranceSourceProcessingSelector));\n  }\n\n  /**\n   * Returns, from the state, the total available pages of the Quality Assurance source.\n   *\n   * @return Observable<number>\n   *    The number of the Quality Assurance source pages.\n   */\n  public getQualityAssuranceSourceTotalPages(): Observable<number> {\n    return this.store.pipe(select(getQualityAssuranceSourceTotalPagesSelector));\n  }\n\n  /**\n   * Returns the current page of the Quality Assurance source, from the state.\n   *\n   * @return Observable<number>\n   *    The number of the current Quality Assurance source page.\n   */\n  public getQualityAssuranceSourceCurrentPage(): Observable<number> {\n    return this.store.pipe(select(getQualityAssuranceSourceCurrentPageSelector));\n  }\n\n  /**\n   * Returns the total number of the Quality Assurance source.\n   *\n   * @return Observable<number>\n   *    The number of the Quality Assurance source.\n   */\n  public getQualityAssuranceSourceTotals(): Observable<number> {\n    return this.store.pipe(select(getQualityAssuranceSourceTotalsSelector));\n  }\n\n  /**\n   * Dispatch a request to change the Quality Assurance source state, retrieving the source from the server.\n   *\n   * @param elementsPerPage\n   *    The number of the source per page.\n   * @param currentPage\n   *    The number of the current page.\n   */\n  public dispatchRetrieveQualityAssuranceSource(elementsPerPage: number, currentPage: number): void {\n    this.store.dispatch(new RetrieveAllSourceAction(elementsPerPage, currentPage));\n  }\n}\n","import {\n  AsyncPipe,\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  Input,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { EPersonDataService } from '../../../../core/eperson/eperson-data.service';\nimport { EPerson } from '../../../../core/eperson/models/eperson.model';\nimport {\n  getFirstCompletedRemoteData,\n  getRemoteDataPayload,\n} from '../../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-eperson-data',\n  templateUrl: './ePerson-data.component.html',\n  standalone: true,\n  imports: [\n    NgIf,\n    NgFor,\n    AsyncPipe,\n  ],\n  styleUrls: ['./ePerson-data.component.scss'],\n})\n/**\n * Represents the component for displaying ePerson data.\n */\nexport class EPersonDataComponent {\n\n  /**\n   * The ID of the ePerson.\n   */\n  @Input() ePersonId: string;\n\n  /**\n   * The properties of the ePerson to display.\n   */\n  @Input() properties: string[];\n\n  /**\n   * Creates an instance of the EPersonDataComponent.\n   * @param ePersonDataService The service for retrieving ePerson data.\n   */\n  constructor(private ePersonDataService: EPersonDataService) { }\n\n  /**\n   * Retrieves the EPerson data based on the provided ePersonId.\n   * @returns An Observable that emits the EPerson data.\n   */\n  getEPersonData$(): Observable<EPerson> {\n    if (this.ePersonId) {\n      return this.ePersonDataService.findById(this.ePersonId, true).pipe(\n        getFirstCompletedRemoteData(),\n        getRemoteDataPayload(),\n      );\n    }\n  }\n}\n","<ng-container *ngIf=\"ePersonId\">\n  <ng-container *ngIf=\"getEPersonData$() | async as ePersonData\">\n    <ng-container *ngFor=\"let property of properties\">\n      <span *ngIf=\"ePersonData[property]\">\n        {{ ePersonData[property] }}\n      </span>\n      <br>\n    </ng-container>\n  </ng-container>\n</ng-container>\n","import {\n  AsyncPipe,\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  RouterLink,\n} from '@angular/router';\nimport {\n  NgbModal,\n  NgbTooltipModule,\n} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  from,\n  Observable,\n  of,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  last,\n  map,\n  mergeMap,\n  scan,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\n\nimport { environment } from '../../../../environments/environment';\nimport {\n  SortDirection,\n  SortOptions,\n} from '../../../core/cache/models/sort-options.model';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { FindListOptions } from '../../../core/data/find-list-options.model';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { QualityAssuranceEventDataService } from '../../../core/notifications/qa/events/quality-assurance-event-data.service';\nimport {\n  QualityAssuranceEventObject,\n  SourceQualityAssuranceEventMessageObject,\n} from '../../../core/notifications/qa/models/quality-assurance-event.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { Item } from '../../../core/shared/item.model';\nimport { Metadata } from '../../../core/shared/metadata.utils';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport {\n  getFirstCompletedRemoteData,\n  getRemoteDataPayload,\n} from '../../../core/shared/operators';\nimport { getItemPageRoute } from '../../../item-page/item-page-routing-paths';\nimport { AlertComponent } from '../../../shared/alert/alert.component';\nimport { BtnDisabledDirective } from '../../../shared/btn-disabled.directive';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ThemedLoadingComponent } from '../../../shared/loading/themed-loading.component';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemSearchResult } from '../../../shared/object-collection/shared/item-search-result.model';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport {\n  ProjectEntryImportModalComponent,\n  QualityAssuranceEventData,\n} from '../project-entry-import-modal/project-entry-import-modal.component';\nimport { EPersonDataComponent } from './ePerson-data/ePerson-data.component';\n\n/**\n * Component to display the Quality Assurance event list.\n */\n@Component({\n  selector: 'ds-quality-assurance-events',\n  templateUrl: './quality-assurance-events.component.html',\n  styleUrls: ['./quality-assurance-events.component.scss'],\n  standalone: true,\n  imports: [AlertComponent, NgIf, ThemedLoadingComponent, PaginationComponent, NgFor, RouterLink, NgbTooltipModule, AsyncPipe, TranslateModule, EPersonDataComponent, BtnDisabledDirective],\n})\nexport class QualityAssuranceEventsComponent implements OnInit, OnDestroy {\n  /**\n   * The pagination system configuration for HTML listing.\n   * @type {PaginationComponentOptions}\n   */\n  public paginationConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'bep',\n    currentPage: 1,\n    pageSize: 10,\n    pageSizeOptions: [5, 10, 20, 40, 60],\n  });\n  /**\n   * The Quality Assurance event list sort options.\n   * @type {SortOptions}\n   */\n  public paginationSortConfig: SortOptions = new SortOptions('trust', SortDirection.DESC);\n  /**\n   * Array to save the presence of a project inside an Quality Assurance event.\n   * @type {QualityAssuranceEventData[]>}\n   */\n  public eventsUpdated$: BehaviorSubject<QualityAssuranceEventData[]> = new BehaviorSubject([]);\n  /**\n   * The total number of Quality Assurance events.\n   * @type {Observable<number>}\n   */\n  public totalElements$: BehaviorSubject<number> = new BehaviorSubject<number>(null);\n  /**\n   * The topic of the Quality Assurance events; suitable for displaying.\n   * @type {string}\n   */\n  public showTopic: string;\n  /**\n   * The topic of the Quality Assurance events; suitable for HTTP calls.\n   * @type {string}\n   */\n  public topic: string;\n  /**\n   * The sourceId of the Quality Assurance events.\n   * @type {string}\n   */\n  sourceId: string;\n  /**\n   * The rejected/ignore reason.\n   * @type {string}\n   */\n  public selectedReason: string;\n  /**\n   * Contains the information about the loading status of the page.\n   * @type {Observable<boolean>}\n   */\n  public isEventPageLoading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The modal reference.\n   * @type {any}\n   */\n  public modalRef: any;\n  /**\n   * Used to store the status of the 'Show more' button of the abstracts.\n   * @type {boolean}\n   */\n  public showMore = false;\n  /**\n   * The quality assurance source base url for project search\n   */\n  public sourceUrlForProjectSearch: string;\n  /**\n   * The FindListOptions object\n   */\n  protected defaultConfig: FindListOptions = Object.assign(new FindListOptions(), { sort: this.paginationSortConfig });\n  /**\n   * Array to track all the component subscriptions. Useful to unsubscribe them with 'onDestroy'.\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * The target item id, retrieved from the topic-id composition.\n   */\n  public targetId: string;\n\n  /**\n   * The URL of the item page/target.\n   */\n  public itemPageUrl: string;\n\n  /**\n   * Plain topic name (without the source id)\n   */\n  public selectedTopicName: string;\n\n\n  /**\n   * Observable that emits a boolean value indicating whether the user is an admin.\n   */\n  isAdmin$: Observable<boolean>;\n\n  /**\n   * Initialize the component variables.\n   * @param {ActivatedRoute} activatedRoute\n   * @param {NgbModal} modalService\n   * @param {NotificationsService} notificationsService\n   * @param {QualityAssuranceEventDataService} qualityAssuranceEventRestService\n   * @param {PaginationService} paginationService\n   * @param {TranslateService} translateService\n   * @param authorizationService\n   * @param itemService\n   */\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private modalService: NgbModal,\n    private notificationsService: NotificationsService,\n    private qualityAssuranceEventRestService: QualityAssuranceEventDataService,\n    private paginationService: PaginationService,\n    private translateService: TranslateService,\n    private authorizationService: AuthorizationDataService,\n    private itemService: ItemDataService,\n  ) {\n  }\n\n  /**\n   * Component initialization.\n   */\n  ngOnInit(): void {\n    this.isEventPageLoading.next(true);\n    this.isAdmin$ = this.authorizationService.isAuthorized(FeatureID.AdministratorOf);\n    this.activatedRoute.paramMap.pipe(\n      tap((params) => {\n        this.sourceUrlForProjectSearch = environment.qualityAssuranceConfig.sourceUrlMapForProjectSearch[params.get('sourceId')];\n        this.sourceId = params.get('sourceId');\n      }),\n      map((params) => params.get('topicId')),\n      take(1),\n      switchMap((id: string) => {\n        const regEx = /!/g;\n        this.showTopic = id.replace(regEx, '/');\n        this.topic = id;\n        const splitList = this.showTopic?.split(':');\n        this.targetId = splitList.length > 2 ? splitList.pop() : null;\n        this.selectedTopicName = splitList[1];\n        this.sourceId = splitList[0];\n        return this.getQualityAssuranceEvents();\n      }),\n    ).subscribe(\n      {\n        next: (events: QualityAssuranceEventData[]) => {\n          this.eventsUpdated$.next(events);\n          this.isEventPageLoading.next(false);\n        },\n        error: (error: unknown) => {\n          this.isEventPageLoading.next(false);\n        },\n      },\n    );\n  }\n\n  /**\n   * Check if table have a detail column\n   */\n  public hasDetailColumn(): boolean {\n    return (this.showTopic.indexOf('/PROJECT') !== -1 ||\n      this.showTopic.indexOf('/PID') !== -1 ||\n      this.showTopic.indexOf('/SUBJECT') !== -1 ||\n      this.showTopic.indexOf('/WITHDRAWN') !== -1 ||\n      this.showTopic.indexOf('/REINSTATE') !== -1 ||\n      this.showTopic.indexOf('/ABSTRACT') !== -1\n    );\n  }\n\n  /**\n   * Checks if the current topic is related to a reinstate or withdrawn request.\n   */\n  public get isReinstateWithdrawnRequest(): boolean {\n    return this.showTopic.indexOf('/WITHDRAWN') !== -1 || this.showTopic.indexOf('/REINSTATE') !== -1;\n  }\n\n  /**\n   * Open a modal or run the executeAction directly based on the presence of the project.\n   *\n   * @param {string} action\n   *    the action (can be: ACCEPTED, REJECTED, DISCARDED, PENDING)\n   * @param {QualityAssuranceEventData} eventData\n   *    the Quality Assurance event data\n   * @param {any} content\n   *    Reference to the modal\n   */\n  public modalChoice(action: string, eventData: QualityAssuranceEventData, content: any): void {\n    if (eventData.hasProject) {\n      this.executeAction(action, eventData);\n    } else {\n      this.openModal(action, eventData, content);\n    }\n  }\n\n  /**\n   * Open the selected modal and performs the action if needed.\n   *\n   * @param {string} action\n   *    the action (can be: ACCEPTED, REJECTED, DISCARDED, PENDING)\n   * @param {QualityAssuranceEventData} eventData\n   *    the Quality Assurance event data\n   * @param {any} content\n   *    Reference to the modal\n   */\n  public openModal(action: string, eventData: QualityAssuranceEventData, content: any): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' }).result.then(\n      (result) => {\n        if (result === 'do') {\n          eventData.reason = this.selectedReason;\n          this.executeAction(action, eventData);\n        }\n        this.selectedReason = null;\n      },\n      (_reason) => {\n        this.selectedReason = null;\n      },\n    );\n  }\n\n  /**\n   * Open a modal where the user can select the project.\n   *\n   * @param {QualityAssuranceEventData} eventData\n   *    the Quality Assurance event item data\n   */\n  public openModalLookup(eventData: QualityAssuranceEventData): void {\n    this.modalRef = this.modalService.open(ProjectEntryImportModalComponent, {\n      size: 'lg',\n    });\n    const modalComp = this.modalRef.componentInstance;\n    modalComp.externalSourceEntry = eventData;\n    modalComp.label = 'project';\n    this.subs.push(\n      modalComp.importedObject.pipe(take(1))\n        .subscribe((object: ItemSearchResult) => {\n          const projectTitle = Metadata.first(object.indexableObject.metadata, 'dc.title');\n          this.boundProject(\n            eventData,\n            object.indexableObject.id,\n            projectTitle.value,\n            object.indexableObject.handle,\n          );\n        }),\n    );\n  }\n\n  /**\n   * Performs the choosen action calling the REST service.\n   *\n   * @param {string} action\n   *    the action (can be: ACCEPTED, REJECTED, DISCARDED, PENDING)\n   * @param {QualityAssuranceEventData} eventData\n   *    the Quality Assurance event data\n   */\n  public executeAction(action: string, eventData: QualityAssuranceEventData): void {\n    eventData.isRunning = true;\n    let operation;\n    if (action === 'UNDO') {\n      operation = this.delete(eventData);\n    } else {\n      operation = this.qualityAssuranceEventRestService.patchEvent(action, eventData.event, eventData.reason);\n    }\n    this.subs.push(\n      operation.pipe(\n        getFirstCompletedRemoteData(),\n        switchMap((rd: RemoteData<QualityAssuranceEventObject>) => {\n          if (rd.hasSucceeded) {\n            this.notificationsService.success(\n              this.translateService.instant('quality-assurance.event.action.saved'),\n            );\n            return this.getQualityAssuranceEvents();\n          } else {\n            this.notificationsService.error(\n              this.translateService.instant('quality-assurance.event.action.error'),\n            );\n            return of(this.eventsUpdated$.value);\n          }\n        }),\n      ).subscribe((events: QualityAssuranceEventData[]) => {\n        this.eventsUpdated$.next(events);\n        eventData.isRunning = false;\n      }),\n    );\n  }\n\n  /**\n   * Bound a project to the publication described in the Quality Assurance event calling the REST service.\n   *\n   * @param {QualityAssuranceEventData} eventData\n   *    the Quality Assurance event item data\n   * @param {string} projectId\n   *    the project Id to bound\n   * @param {string} projectTitle\n   *    the project title\n   * @param {string} projectHandle\n   *    the project handle\n   */\n  public boundProject(eventData: QualityAssuranceEventData, projectId: string, projectTitle: string, projectHandle: string): void {\n    eventData.isRunning = true;\n    this.subs.push(\n      this.qualityAssuranceEventRestService.boundProject(eventData.id, projectId).pipe(getFirstCompletedRemoteData())\n        .subscribe((rd: RemoteData<QualityAssuranceEventObject>) => {\n          if (rd.hasSucceeded) {\n            this.notificationsService.success(\n              this.translateService.instant('quality-assurance.event.project.bounded'),\n            );\n            eventData.hasProject = true;\n            eventData.projectTitle = projectTitle;\n            eventData.handle = projectHandle;\n            eventData.projectId = projectId;\n          } else {\n            this.notificationsService.error(\n              this.translateService.instant('quality-assurance.event.project.error'),\n            );\n          }\n          eventData.isRunning = false;\n        }),\n    );\n  }\n\n  /**\n   * Remove the bounded project from the publication described in the Quality Assurance event calling the REST service.\n   *\n   * @param {QualityAssuranceEventData} eventData\n   *    the Quality Assurance event data\n   */\n  public removeProject(eventData: QualityAssuranceEventData): void {\n    eventData.isRunning = true;\n    this.subs.push(\n      this.qualityAssuranceEventRestService.removeProject(eventData.id).pipe(getFirstCompletedRemoteData())\n        .subscribe((rd: RemoteData<QualityAssuranceEventObject>) => {\n          if (rd.hasSucceeded) {\n            this.notificationsService.success(\n              this.translateService.instant('quality-assurance.event.project.removed'),\n            );\n            eventData.hasProject = false;\n            eventData.projectTitle = null;\n            eventData.handle = null;\n            eventData.projectId = null;\n          } else {\n            this.notificationsService.error(\n              this.translateService.instant('quality-assurance.event.project.error'),\n            );\n          }\n          eventData.isRunning = false;\n        }),\n    );\n  }\n\n  /**\n   * Check if the event has a valid href.\n   * @param event\n   */\n  public hasPIDHref(event: SourceQualityAssuranceEventMessageObject): boolean {\n    return this.getPIDHref(event) !== null;\n  }\n\n  /**\n   * Get the event pid href.\n   * @param event\n   */\n  public getPIDHref(event: SourceQualityAssuranceEventMessageObject): string {\n    return event.pidHref;\n  }\n\n  /**\n   * Dispatch the Quality Assurance events retrival.\n   */\n  public getQualityAssuranceEvents(): Observable<QualityAssuranceEventData[]> {\n    return this.paginationService.getFindListOptions(this.paginationConfig.id, this.defaultConfig).pipe(\n      distinctUntilChanged(),\n      switchMap((options: FindListOptions) => this.qualityAssuranceEventRestService.getEventsByTopic(\n        this.topic,\n        options,\n        followLink('target'), followLink('related'),\n      )),\n      getFirstCompletedRemoteData(),\n      switchMap((rd: RemoteData<PaginatedList<QualityAssuranceEventObject>>) => {\n        if (rd.hasSucceeded) {\n          this.totalElements$.next(rd.payload.totalElements);\n          if (rd.payload?.page?.length > 0) {\n            return this.fetchEvents(rd.payload.page);\n          } else {\n            return of([]);\n          }\n        } else {\n          throw new Error('Can\\'t retrieve Quality Assurance events from the Broker events REST service');\n        }\n      }),\n      take(1),\n      tap(() => {\n        this.qualityAssuranceEventRestService.clearFindByTopicRequests();\n      }),\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Fetch Quality Assurance events in order to build proper QualityAssuranceEventData object.\n   *\n   * @param {QualityAssuranceEventObject[]} events\n   *    the Quality Assurance event item\n   * @return array of QualityAssuranceEventData\n   */\n  protected fetchEvents(events: QualityAssuranceEventObject[]): Observable<QualityAssuranceEventData[]> {\n    return from(events).pipe(\n      mergeMap((event: QualityAssuranceEventObject) => {\n        const related$ = event.related.pipe(\n          getFirstCompletedRemoteData(),\n        );\n        const target$ = event.target.pipe(\n          getFirstCompletedRemoteData(),\n        );\n        return combineLatest([related$, target$]).pipe(\n          map(([relatedItemRD, targetItemRD]: [RemoteData<Item>, RemoteData<Item>]) => {\n            const data: QualityAssuranceEventData = {\n              event: event,\n              id: event.id,\n              title: event.title,\n              hasProject: false,\n              projectTitle: null,\n              projectId: null,\n              handle: null,\n              reason: null,\n              isRunning: false,\n              target: (targetItemRD?.hasSucceeded) ? targetItemRD.payload : null,\n            };\n            if (relatedItemRD?.hasSucceeded && relatedItemRD?.payload?.id) {\n              data.hasProject = true;\n              data.projectTitle = event.message.title;\n              data.projectId = relatedItemRD?.payload?.id;\n              data.handle = relatedItemRD?.payload?.handle;\n            }\n            return data;\n          }),\n        );\n      }),\n      scan((acc: any, value: any) => [...acc, value], []),\n      last(),\n    );\n  }\n\n  /**\n   * Deletes a quality assurance event.\n   * @param qaEvent The quality assurance event to delete.\n   * @returns An Observable of RemoteData containing NoContent.\n   */\n  delete(qaEvent: QualityAssuranceEventData): Observable<RemoteData<NoContent>> {\n    return this.qualityAssuranceEventRestService.deleteQAEvent(qaEvent);\n  }\n\n  /**\n   * Returns an Observable that emits the title of the target item.\n   * The target item is retrieved by its ID using the itemService.\n   * The title is extracted from the first metadata value of the item.\n   * The item page URL is also set in the component.\n   * @returns An Observable that emits the title of the target item.\n   */\n  public getTargetItemTitle(): Observable<string> {\n    return this.itemService.findById(this.targetId).pipe(\n      take(1),\n      getFirstCompletedRemoteData(),\n      getRemoteDataPayload(),\n      tap((item: Item) => this.itemPageUrl = getItemPageRoute(item)),\n      map((item: Item) => item.firstMetadataValue('dc.title')),\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h1 class=\"border-bottom pb-2\">\n        <div class=\"d-flex justify-content-between\">\n          {{'notifications.events.title'| translate}}\n        </div>\n      </h1>\n      <ds-alert *ngIf=\"!targetId\"  [type]=\"'alert-info'\">\n        <span [innerHTML]=\"'quality-assurance.events.description' | translate : {topic: selectedTopicName, source: sourceId}\"></span>\n      </ds-alert>\n      <ds-alert *ngIf=\"targetId\" [type]=\"'alert-info'\">\n        <span [innerHTML]=\"'quality-assurance.events.description-with-topic-and-target' | translate : {topic: selectedTopicName, source: sourceId}\"></span>\n        <a [routerLink]=\"itemPageUrl\" target=\"_blank\">{{(getTargetItemTitle() | async)}}</a>\n      </ds-alert>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2 class=\"border-bottom pb-2\">\n        {{'quality-assurance.events.topic' | translate}} {{this.showTopic}}\n      </h2>\n\n      <ds-loading class=\"container\" *ngIf=\"(isEventPageLoading | async)\" message=\"{{'quality-assurance.loading' | translate}}\"></ds-loading>\n\n      <ds-pagination *ngIf=\"(isEventPageLoading | async) !== true\"\n                      [paginationOptions]=\"paginationConfig\"\n                      [collectionSize]=\"(totalElements$ | async)\"\n                      [sortOptions]=\"paginationSortConfig\"\n                      (paginationChange)=\"getQualityAssuranceEvents()\">\n\n        <ng-container>\n          <div *ngIf=\"(eventsUpdated$ | async)?.length === 0\" class=\"alert alert-info w-100 mb-2 mt-2\" role=\"alert\">\n            {{'quality-assurance.noEvents' | translate}}\n          </div>\n          <div *ngIf=\"(eventsUpdated$ | async)?.length !== 0\" class=\"table-responsive mt-2\">\n            <table id=\"events\" class=\"table table-striped table-hover table-bordered\">\n              <thead>\n              <tr>\n                <th scope=\"col\" class=\"trust-col\">{{'quality-assurance.event.table.trust' | translate}}</th>\n                <th scope=\"col\" class=\"title-col\">{{'quality-assurance.event.table.publication' | translate}}</th>\n                <th *ngIf=\"hasDetailColumn() && showTopic.indexOf('/PROJECT') !== -1\" scope=\"col\" class=\"content-col\">\n                  {{'quality-assurance.event.table.project-details' | translate}}\n                </th>\n                <ng-container *ngIf=\"hasDetailColumn() && (showTopic.indexOf('/REINSTATE') !== -1 || showTopic.indexOf('/WITHDRAWN') !== -1)\">\n                  <th scope=\"col\" class=\"content-col\">\n                    {{'quality-assurance.event.table.reasons' | translate}}\n                  </th>\n                  <th scope=\"col\" class=\"content-col\">\n                    {{'quality-assurance.event.table.person-who-requested' | translate}}\n                  </th>\n                </ng-container>\n                <th scope=\"col\" class=\"button-col\">{{'quality-assurance.event.table.actions' | translate}}</th>\n              </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let eventElement of (eventsUpdated$ | async); let i = index\">\n                  <td>{{eventElement?.event?.trust}}\n                  </td>\n                  <td><a *ngIf=\"eventElement?.target\"\n                         target=\"_blank\"\n                         rel=\"noopener noreferrer\"\n                         [routerLink]=\"['/items', eventElement?.target?.id]\">{{eventElement.title}}</a>\n                    <span *ngIf=\"!eventElement?.target\">{{eventElement.title}}</span>\n                    <div *ngIf=\"eventElement?.event?.message?.serviceId\">\n                      <span class=\"small pr-1\">{{'quality-assurance.event.table.event.message.serviceUrl' | translate}}</span>\n                      <span [title]=\"eventElement.event.message.serviceId\">\n                        <a [href]=\"eventElement.event.message.serviceId\" target=\"_blank\">{{eventElement.event.message.serviceId}}</a>\n                      </span>\n                    </div>\n                    <div *ngIf=\"eventElement?.event?.message?.href\" class=\"d-flex align-items-center\">\n                      <span class=\"small pr-1\">{{'quality-assurance.event.table.event.message.link' | translate}}</span>\n                      <span [title]=\"eventElement.event.message.href\" class=\"text-truncate d-inline-block w-75\">\n                        <a [href]=\"eventElement.event.message.href\" target=\"_blank\">{{eventElement.event.message.href}}</a>\n                      </span>\n                    </div>\n                  </td>\n                  <td *ngIf=\"showTopic.indexOf('/PID') !== -1\">\n                    <p><span class=\"small\">{{'quality-assurance.event.table.pidtype' | translate}}</span>&nbsp;<span class=\"badge badge-info\">{{eventElement.event.message.type}}</span></p>\n                    <p><span class=\"small\">{{'quality-assurance.event.table.pidvalue' | translate}}</span><br>\n                      <a *ngIf=\"hasPIDHref(eventElement.event.message); else noPID\" href=\"{{getPIDHref(eventElement.event.message)}}\" rel=\"noopener noreferrer\" target=\"_blank\">\n                        {{eventElement.event.message.value}}\n                      </a>\n                      <ng-template #noPID><span class=\"badge badge-info\">{{eventElement.event.message.value}}</span></ng-template>\n                    </p>\n                  </td>\n                  <td *ngIf=\"showTopic.indexOf('/SUBJECT') !== -1\">\n                    <p><span class=\"small\">{{'quality-assurance.event.table.subjectValue' | translate}}\n                       </span><br><span class=\"badge badge-info\">{{eventElement.event.message.value}}</span></p>\n                  </td>\n                  <td *ngIf=\"showTopic.indexOf('/ABSTRACT') !== -1\">\n                    <p class=\"abstract-container\" [class.show]=\"showMore\">\n                      <span class=\"small\">{{'quality-assurance.event.table.abstract' | translate}}</span><br>\n                      <span class=\"text-ellipsis\">{{eventElement.event.message.abstract}}</span>\n                    </p>\n                    <button class=\"btn btn-outline-primary btn-sm\" (click)=\"showMore = !showMore\">\n                      <i *ngIf=\"!showMore\" class=\"fas fa-angle-down\"></i>\n                      <i *ngIf=\"showMore\" class=\"fas fa-angle-up\"></i>\n                      {{ (showMore ? 'quality-assurance.event.table.less': 'quality-assurance.event.table.more') | translate }}\n                    </button>\n                  </td>\n                  <ng-container *ngIf=\"showTopic.indexOf('/REINSTATE') !== -1 || showTopic.indexOf('/WITHDRAWN') !== -1\">\n                    <td>\n                      <p>\n                        <span *ngIf=\"eventElement.event.message\">\n                          <span>{{eventElement.event.message.reason}}</span><br>\n                        </span>\n                      </p>\n                    </td>\n                    <td>\n                      <p>\n                        <span *ngIf=\"eventElement.event.originalId\">\n                          <ds-eperson-data [ePersonId]=\"eventElement.event.originalId\" [properties]=\"['email']\"></ds-eperson-data>\n                        </span>\n                      </p>\n                    </td>\n                  </ng-container>\n\n                  <td *ngIf=\"showTopic.indexOf('/PROJECT') !== -1\">\n                    <p>\n                      {{'quality-assurance.event.table.suggestedProject' | translate}}\n                    </p>\n                    <p>\n                      <span class=\"small\">{{'quality-assurance.event.table.project' | translate}}</span><br>\n                      <a href=\"{{sourceUrlForProjectSearch}}{{ eventElement.event.message.sourceId}}\" rel=\"noopener noreferrer\" target=\"_blank\">{{eventElement.event.message.title}}</a>\n                    </p>\n                    <p>\n                      <span *ngIf=\"eventElement.event.message.acronym\"><span class=\"small\">{{'quality-assurance.event.table.acronym' | translate}}</span>&nbsp;<span class=\"badge badge-info\">{{eventElement.event.message.acronym}}</span><br></span>\n                      <span *ngIf=\"eventElement.event.message.code\"><span class=\"small\">{{'quality-assurance.event.table.code' | translate}}</span>&nbsp;<span class=\"badge badge-info\">{{eventElement.event.message.code}}</span><br></span>\n                      <span *ngIf=\"eventElement.event.message.funder\"><span class=\"small\">{{'quality-assurance.event.table.funder' | translate}}</span>&nbsp;<span class=\"badge badge-info\">{{eventElement.event.message.funder}}</span><br></span>\n                      <span *ngIf=\"eventElement.event.message.fundingProgram\"><span class=\"small\">{{'quality-assurance.event.table.fundingProgram' | translate}}</span>&nbsp;<span class=\"badge badge-info\">{{eventElement.event.message.fundingProgram}}</span><br></span>\n                      <span *ngIf=\"eventElement.event.message.jurisdiction\"><span class=\"small\">{{'quality-assurance.event.table.jurisdiction' | translate}}</span>&nbsp;<span class=\"badge badge-info\">{{eventElement.event.message.jurisdiction}}</span></span>\n                    </p>\n                    <hr>\n                    <div>\n                      {{(eventElement.hasProject ? 'quality-assurance.event.project.found' : 'quality-assurance.event.project.notFound') | translate}}\n                      <a target=\"_blank\" rel=\"noopener noreferrer\" *ngIf=\"eventElement.hasProject\" title=\"{{eventElement.projectTitle}}\" [routerLink]=\"['/items', eventElement.projectId]\">{{eventElement.handle}} </a>\n                      <div class=\"btn-group\">\n                        <button *ngIf=\"!eventElement.hasProject\"\n                                class=\"btn btn-outline-primary btn-sm\"\n                                [dsBtnDisabled]=\"eventElement.isRunning\"\n                                (click)=\"openModalLookup(eventElement); $event.stopPropagation();\"\n                                [attr.aria-label]=\"'quality-assurance.event.modal.project.select' | translate\"\n                        >\n                          <i class=\"fas fa-search\"></i>\n                        </button>\n                        <button *ngIf=\"eventElement.hasProject\"\n                                class=\"btn btn-outline-danger btn-sm\"\n                                [dsBtnDisabled]=\"eventElement.isRunning\"\n                                (click)=\"removeProject(eventElement)\"\n                                [attr.aria-label]=\"'quality-assurance.event.modal.project.remove' | translate\"\n                        >\n                          <i class=\"fas fa-trash-alt\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  </td>\n                  <td>\n                    <div *ngIf=\"(isAdmin$ | async) || !isReinstateWithdrawnRequest\" class=\"btn-group button-width\">\n                      <button *ngIf=\"showTopic.indexOf('/PROJECT') !== -1\"\n                              class=\"btn btn-outline-success btn-sm button-width\"\n                              ngbTooltip=\"{{'quality-assurance.event.action.import' | translate}}\"\n                              container=\"body\"\n                              [dsBtnDisabled]=\"eventElement.isRunning\"\n                              (click)=\"modalChoice('ACCEPTED', eventElement, acceptModal)\"\n                              [attr.aria-label]=\"'quality-assurance.event.action.import' | translate\"\n                      >\n                        <i class=\"fas fa-check\"></i>\n                      </button>\n                      <button *ngIf=\"showTopic.indexOf('/PROJECT') === -1\"\n                              class=\"btn btn-outline-success btn-sm button-width\"\n                              ngbTooltip=\"{{'quality-assurance.event.action.accept' | translate}}\"\n                              container=\"body\"\n                              [dsBtnDisabled]=\"eventElement.isRunning\"\n                              (click)=\"executeAction('ACCEPTED', eventElement)\"\n                              [attr.aria-label]=\"'quality-assurance.event.action.accept' | translate\"\n                      >\n                        <i class=\"fas fa-check\"></i>\n                      </button>\n                      <button class=\"btn btn-outline-dark btn-sm button-width\"\n                              ngbTooltip=\"{{'quality-assurance.event.action.ignore' | translate}}\"\n                              container=\"body\"\n                              [dsBtnDisabled]=\"eventElement.isRunning\"\n                              (click)=\"openModal('DISCARDED', eventElement, ignoreModal)\"\n                              [attr.aria-label]=\"'quality-assurance.event.action.ignore' | translate\"\n                      >\n                        <i class=\"fas fa-ban\"></i>\n                      </button>\n                      <button class=\"btn btn-outline-danger btn-sm button-width\"\n                              *ngIf=\"(isAdmin$ | async)\"\n                              ngbTooltip=\"{{'quality-assurance.event.action.reject' | translate}}\"\n                              container=\"body\"\n                              [dsBtnDisabled]=\"eventElement.isRunning\"\n                              (click)=\"openModal('REJECTED', eventElement, rejectModal)\"\n                              [attr.aria-label]=\"'quality-assurance.event.action.reject' | translate\"\n                      >\n                        <i class=\"fas fa-trash-alt\"></i>\n                      </button>\n                      <button class=\"btn btn-outline-danger btn-sm button-width\"\n                              *ngIf=\"(isAdmin$ | async) === false\"\n                              ngbTooltip=\"{{'quality-assurance.event.action.undo' | translate }}\"\n                              container=\"body\"\n                              [dsBtnDisabled]=\"eventElement.isRunning\"\n                              [attr.aria-label]=\"'quality-assurance.event.action.undo' | translate\"\n                              (click)=\"openModal('UNDO', eventElement, undoModal)\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                      </button>\n                    </div>\n                    <div *ngIf=\"(isAdmin$ | async) !== true && isReinstateWithdrawnRequest\" class=\"btn-group button-width\">\n                      <button class=\"btn btn-outline-danger btn-sm button-width\"\n                              ngbTooltip=\"{{'quality-assurance.event.action.undo' | translate}}\"\n                              container=\"body\"\n                              [dsBtnDisabled]=\"eventElement.isRunning\"\n                              [attr.aria-label]=\"'quality-assurance.event.action.undo' | translate\"\n                              (click)=\"openModal('UNDO', eventElement, undoModal)\">\n                        <i class=\"fas fa-trash-alt\"></i>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </ds-pagination>\n    </div>\n  </div>\n</div>\n\n<ng-template #acceptModal let-modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" id=\"acceptModal\">{{'quality-assurance.event.sure' | translate}}</h4>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{'quality-assurance.event.accept.description' | translate}}</p>\n\n    <button class=\"btn btn-outline-success float-right\" (click)=\"modal.close('do')\">\n      <i class=\"fas fa-check\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.import' | translate}}</span>\n    </button>\n    <button class=\"btn btn-outline-secondary\" (click)=\"modal.close('cancel')\">\n      <i class=\"fas fa-close\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.cancel' | translate}}</span>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #ignoreModal let-modal>\n  <div class=\"modal-header\">\n    <h1 class=\"modal-title h4\" id=\"ignoreModal\">{{'quality-assurance.event.sure' | translate}}</h1>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{'quality-assurance.event.ignore.description' | translate}}</p>\n    <button class=\"btn btn-outline-danger float-right\" (click)=\"modal.close('do')\">\n      <i class=\"fas fa-trash-alt\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.ignore' | translate}}</span>\n    </button>\n    <button class=\"btn btn-outline-secondary\" (click)=\"modal.close('cancel')\">\n      <i class=\"fas fa-close\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.cancel' | translate}}</span>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #rejectModal let-modal>\n  <div class=\"modal-header\">\n    <h1 class=\"modal-title h4\" id=\"rejectModal\">{{'quality-assurance.event.sure' | translate}}</h1>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{'quality-assurance.event.reject.description' | translate}}</p>\n    <button class=\"btn btn-outline-danger float-right\" (click)=\"modal.close('do')\">\n      <i class=\"fas fa-trash-alt\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.reject' | translate}}</span>\n    </button>\n    <button class=\"btn btn-outline-secondary\" (click)=\"modal.close('cancel')\">\n      <i class=\"fas fa-close\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.cancel' | translate}}</span>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #undoModal let-modal>\n  <div class=\"modal-header\">\n    <h1 class=\"modal-title h4\" id=\"undoModal\">{{'quality-assurance.event.sure' | translate}}</h1>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{'quality-assurance.event.undo.description' | translate}}</p>\n    <button class=\"btn btn-outline-danger float-right\" (click)=\"modal.close('do')\">\n      <i class=\"fas fa-trash-alt\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.undo' | translate}}</span>\n    </button>\n    <button class=\"btn btn-outline-secondary\" (click)=\"modal.close('cancel')\">\n      <i class=\"fas fa-close\"></i>\n      <span class=\"d-none d-sm-inline\"> {{'quality-assurance.event.action.cancel' | translate}}</span>\n    </button>\n  </div>\n</ng-template>\n","import {\n  AsyncPipe,\n  NgIf,\n} from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  Observable,\n  of as observableOf,\n  Subscription,\n} from 'rxjs';\n\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport {\n  QualityAssuranceEventObject,\n  SourceQualityAssuranceEventMessageObject,\n} from '../../../core/notifications/qa/models/quality-assurance-event.model';\nimport { Context } from '../../../core/shared/context.model';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { Item } from '../../../core/shared/item.model';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { AlertComponent } from '../../../shared/alert/alert.component';\nimport { BtnDisabledDirective } from '../../../shared/btn-disabled.directive';\nimport {\n  hasValue,\n  isNotEmpty,\n} from '../../../shared/empty.util';\nimport { ThemedLoadingComponent } from '../../../shared/loading/themed-loading.component';\nimport { CollectionElementLinkType } from '../../../shared/object-collection/collection-element-link.type';\nimport { ListableObject } from '../../../shared/object-collection/shared/listable-object.model';\nimport { SelectableListService } from '../../../shared/object-list/selectable-list/selectable-list.service';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { PaginatedSearchOptions } from '../../../shared/search/models/paginated-search-options.model';\nimport { SearchResult } from '../../../shared/search/models/search-result.model';\nimport { ThemedSearchResultsComponent } from '../../../shared/search/search-results/themed-search-results.component';\n\n/**\n * The possible types of import for the external entry\n */\nexport enum ImportType {\n  None = 'None',\n  LocalEntity = 'LocalEntity',\n  LocalAuthority = 'LocalAuthority',\n  NewEntity = 'NewEntity',\n  NewAuthority = 'NewAuthority'\n}\n\n/**\n * The data type passed from the parent page\n */\nexport interface QualityAssuranceEventData {\n  /**\n   * The Quality Assurance event\n   */\n  event: QualityAssuranceEventObject;\n  /**\n   * The Quality Assurance event Id (uuid)\n   */\n  id: string;\n  /**\n   * The publication title\n   */\n  title: string;\n  /**\n   * Contains the boolean that indicates if a project is present\n   */\n  hasProject: boolean;\n  /**\n   * The project title, if present\n   */\n  projectTitle: string;\n  /**\n   * The project id (uuid), if present\n   */\n  projectId: string;\n  /**\n   * The project handle, if present\n   */\n  handle: string;\n  /**\n   * The reject/discard reason\n   */\n  reason: string;\n  /**\n   * Contains the boolean that indicates if there is a running operation (REST call)\n   */\n  isRunning: boolean;\n  /**\n   * The related publication DSpace item\n   */\n  target?: Item;\n}\n\n@Component({\n  selector: 'ds-project-entry-import-modal',\n  styleUrls: ['./project-entry-import-modal.component.scss'],\n  templateUrl: './project-entry-import-modal.component.html',\n  standalone: true,\n  imports: [RouterLink, NgIf, FormsModule, ThemedLoadingComponent, ThemedSearchResultsComponent, AlertComponent, AsyncPipe, TranslateModule, BtnDisabledDirective],\n})\n/**\n * Component to display a modal window for linking a project to an Quality Assurance event\n * Shows information about the selected project and a selectable list.\n */\nexport class ProjectEntryImportModalComponent implements OnInit, OnDestroy {\n  /**\n   * The external source entry\n   */\n  @Input() externalSourceEntry: QualityAssuranceEventData;\n  /**\n   * The number of results per page\n   */\n  pageSize = 3;\n  /**\n   * The prefix for every i18n key within this modal\n   */\n  labelPrefix = 'quality-assurance.event.modal.';\n  /**\n   * The search configuration to retrieve project\n   */\n  configuration = 'funding';\n  /**\n   * The label to use for all messages (added to the end of relevant i18n keys)\n   */\n  label: string;\n  /**\n   * The project title from the parent object\n   */\n  projectTitle: string;\n  /**\n   * The search results\n   */\n  localEntitiesRD$: Observable<RemoteData<PaginatedList<SearchResult<DSpaceObject>>>>;\n  /**\n   * Information about the data loading status\n   */\n  isLoading$ = observableOf(true);\n  /**\n   * Search options to use for fetching projects\n   */\n  searchOptions: PaginatedSearchOptions;\n  /**\n   * The context we're currently in (submission)\n   */\n  context = Context.EntitySearchModalWithNameVariants;\n  /**\n   * List ID for selecting local entities\n   */\n  entityListId = 'notifications-project-bound';\n  /**\n   * List ID for selecting local authorities\n   */\n  authorityListId = 'notifications-project-bound-authority';\n  /**\n   * ImportType enum\n   */\n  importType = ImportType;\n  /**\n   * The type of link to render in listable elements\n   */\n  linkTypes = CollectionElementLinkType;\n  /**\n   * The type of import the user currently has selected\n   */\n  selectedImportType = ImportType.None;\n  /**\n   * The selected local entity\n   */\n  selectedEntity: ListableObject;\n  /**\n   * An project has been selected, send it to the parent component\n   */\n  importedObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n  /**\n   * Pagination options\n   */\n  pagination: PaginationComponentOptions;\n  /**\n   * Array to track all the component subscriptions. Useful to unsubscribe them with 'onDestroy'.\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize the component variables.\n   * @param {NgbActiveModal} modal\n   * @param {SearchService} searchService\n   * @param {SelectableListService} selectService\n   */\n  constructor(public modal: NgbActiveModal,\n              public searchService: SearchService,\n              private selectService: SelectableListService) { }\n\n  /**\n   * Component intitialization.\n   */\n  public ngOnInit(): void {\n    this.pagination = Object.assign(new PaginationComponentOptions(), { id: 'notifications-project-bound', pageSize: this.pageSize });\n    this.projectTitle = (this.externalSourceEntry.projectTitle !== null) ? this.externalSourceEntry.projectTitle\n      : (this.externalSourceEntry.event.message as SourceQualityAssuranceEventMessageObject).title;\n    this.searchOptions = Object.assign(new PaginatedSearchOptions(\n      {\n        configuration: this.configuration,\n        query: this.projectTitle,\n        pagination: this.pagination,\n      },\n    ));\n    this.localEntitiesRD$ = this.searchService.search(this.searchOptions);\n    this.subs.push(\n      this.localEntitiesRD$.subscribe(\n        () => this.isLoading$ = observableOf(false),\n      ),\n    );\n  }\n\n  /**\n   * Close the modal.\n   */\n  public close(): void {\n    this.deselectAllLists();\n    this.modal.close();\n  }\n\n  /**\n   * Perform a project search by title.\n   */\n  public search(searchTitle): void {\n    if (isNotEmpty(searchTitle)) {\n      const filterRegEx = /[:]/g;\n      this.isLoading$ = observableOf(true);\n      this.searchOptions = Object.assign(new PaginatedSearchOptions(\n        {\n          configuration: this.configuration,\n          query: (searchTitle) ? searchTitle.replace(filterRegEx, '') : searchTitle,\n          pagination: this.pagination,\n        },\n      ));\n      this.localEntitiesRD$ = this.searchService.search(this.searchOptions);\n      this.subs.push(\n        this.localEntitiesRD$.subscribe(\n          () => this.isLoading$ = observableOf(false),\n        ),\n      );\n    }\n  }\n\n  /**\n   * Perform the bound of the project.\n   */\n  public bound(): void {\n    if (this.selectedEntity !== undefined) {\n      this.importedObject.emit(this.selectedEntity);\n    }\n    this.selectedImportType = ImportType.None;\n    this.deselectAllLists();\n    this.close();\n  }\n\n  /**\n   * Deselected a local entity\n   */\n  public deselectEntity(): void {\n    this.selectedEntity = undefined;\n    if (this.selectedImportType === ImportType.LocalEntity) {\n      this.selectedImportType = ImportType.None;\n    }\n  }\n\n  /**\n   * Selected a local entity\n   * @param entity\n   */\n  public selectEntity(entity): void {\n    this.selectedEntity = entity;\n    this.selectedImportType = ImportType.LocalEntity;\n  }\n\n  /**\n   * Deselect every element from both entity and authority lists\n   */\n  public deselectAllLists(): void {\n    this.selectService.deselectAll(this.entityListId);\n    this.selectService.deselectAll(this.authorityListId);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.deselectAllLists();\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title\" id=\"modal-title\">{{ (labelPrefix + label + '.title') | translate }}</h4>\n  <button type=\"button\" class=\"close\" aria-label=\"Close button\" aria-describedby=\"modal-title\"\n          (click)=\"close()\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n<div class=\"modal-body\">\n  <small>{{ (labelPrefix + label + '.publication' | translate) }}</small>\n  <div class=\"mb-3\">\n    <div class=\"text-truncate\">\n      <a target=\"_blank\" [routerLink]=\"'/items/{{(externalSourceEntry.event.target|async)?.payload?.id}}'\">\n        {{externalSourceEntry.title}}\n      </a>\n    </div>\n  </div>\n  <div *ngIf=\"externalSourceEntry.projectTitle\">\n    <small>{{ (labelPrefix + label + '.bountToLocal' |translate) }}</small>\n    <div class=\"mb-3\">\n      <div class=\"text-truncate\">\n        <a target=\"_blank\" [routerLink]=\"'/items/{{externalSourceEntry.projectId}}'\">\n          {{externalSourceEntry.projectTitle}}\n        </a>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ (labelPrefix + label + '.select' | translate) }}</h4>\n\n  <div id=\"project-entities\" class=\"mb-3\">\n\n    <div id=\"project-search\" class=\"input-group mb-3\">\n      <input type=\"text\" class=\"form-control\" (keyup.enter)=\"search(projectTitle)\" [(ngModel)]=\"projectTitle\" placeholder=\"{{labelPrefix + label + '.placeholder' |translate}}\" aria-label=\"\" aria-describedby=\"\">\n      <div class=\"input-group-append\">\n        <button type=\"button\" class=\"btn btn-outline-secondary\" [dsBtnDisabled]=\"projectTitle === ''\" (click)=\"projectTitle = ''\">{{(labelPrefix + label + '.clear'|translate)}}</button>\n        <button type=\"button\" class=\"btn btn-primary\" [dsBtnDisabled]=\"projectTitle === ''\" (click)=\"search(projectTitle)\">{{(labelPrefix + label + '.search'|translate)}}</button>\n      </div>\n    </div>\n\n    <ds-loading *ngIf=\"(isLoading$ | async)\" message=\"{{'loading.search-results' | translate}}\"></ds-loading>\n    <ds-search-results *ngIf=\"(localEntitiesRD$ | async)?.payload?.page?.length > 0 && (isLoading$ | async) !== true\"\n                              [searchResults]=\"(localEntitiesRD$ | async)\"\n                              [sortConfig]=\"this.searchOptions?.sort\"\n                              [searchConfig]=\"this.searchOptions\"\n                              [selectable]=\"true\"\n                              [disableHeader]=\"true\"\n                              [hidePaginationDetail]=\"false\"\n                              [selectionConfig]=\"{ repeatable: false, listId: entityListId }\"\n                              [showCsvExport]=\"false\"\n                              [linkType]=\"linkTypes.ExternalLink\"\n                              [context]=\"context\"\n                              (deselectObject)=\"deselectEntity()\"\n                              (selectObject)=\"selectEntity($event)\">\n    </ds-search-results>\n\n    <div *ngIf=\"(localEntitiesRD$ | async)?.payload?.page?.length < 1 && (isLoading$ | async) !== true\">\n      <ds-alert [type]=\"'alert-info'\">\n        <p class=\"lead mb-0\">{{(labelPrefix + label + '.notFound' | translate)}}</p>\n      </ds-alert>\n    </div>\n\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <div>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"close()\">{{ (labelPrefix + label + '.cancel' | translate) }}</button>\n  </div>\n  <div>\n    <button type=\"button\" class=\"btn btn-primary\" [dsBtnDisabled]=\"selectedImportType === importType.None\" (click)=\"bound()\">{{ (labelPrefix + label + '.bound' | translate) }}</button>\n  </div>\n</div>\n","import {\n  AsyncPipe,\n  DatePipe,\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  take,\n} from 'rxjs/operators';\n\nimport { SortOptions } from '../../../core/cache/models/sort-options.model';\nimport { QualityAssuranceSourceObject } from '../../../core/notifications/qa/models/quality-assurance-source.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { QualityAssuranceSourcePageParams } from '../../../quality-assurance-notifications-pages/quality-assurance-source-page-component/quality-assurance-source-page-resolver.service';\nimport { AlertComponent } from '../../../shared/alert/alert.component';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ThemedLoadingComponent } from '../../../shared/loading/themed-loading.component';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { NotificationsStateService } from '../../notifications-state.service';\n\n/**\n * Component to display the Quality Assurance source list.\n */\n@Component({\n  selector: 'ds-quality-assurance-source',\n  templateUrl: './quality-assurance-source.component.html',\n  styleUrls: ['./quality-assurance-source.component.scss'],\n  standalone: true,\n  imports: [AlertComponent, NgIf, ThemedLoadingComponent, PaginationComponent, NgFor, RouterLink, AsyncPipe, TranslateModule, DatePipe],\n})\nexport class QualityAssuranceSourceComponent implements OnDestroy, OnInit, AfterViewInit {\n\n  /**\n   * The pagination system configuration for HTML listing.\n   * @type {PaginationComponentOptions}\n   */\n  public paginationConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'btp',\n    pageSize: 10,\n    pageSizeOptions: [5, 10, 20, 40, 60],\n  });\n  /**\n   * The Quality Assurance source list sort options.\n   * @type {SortOptions}\n   */\n  public paginationSortConfig: SortOptions;\n  /**\n   * The Quality Assurance source list.\n   */\n  public sources$: Observable<QualityAssuranceSourceObject[]>;\n  /**\n   * The total number of Quality Assurance sources.\n   */\n  public totalElements$: Observable<number>;\n  /**\n   * Array to track all the component subscriptions. Useful to unsubscribe them with 'onDestroy'.\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize the component variables.\n   * @param {PaginationService} paginationService\n   * @param {NotificationsStateService} notificationsStateService\n   */\n  constructor(\n    private paginationService: PaginationService,\n    private notificationsStateService: NotificationsStateService,\n  ) {\n  }\n\n  /**\n   * Component initialization.\n   */\n  ngOnInit(): void {\n    this.sources$ = this.notificationsStateService.getQualityAssuranceSource();\n    this.totalElements$ = this.notificationsStateService.getQualityAssuranceSourceTotals();\n  }\n\n  /**\n   * First Quality Assurance source loading after view initialization.\n   */\n  ngAfterViewInit(): void {\n    this.subs.push(\n      this.notificationsStateService.isQualityAssuranceSourceLoaded().pipe(\n        take(1),\n      ).subscribe(() => {\n        this.getQualityAssuranceSource();\n      }),\n    );\n  }\n\n  /**\n   * Returns the information about the loading status of the Quality Assurance source (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if the source are loading, 'false' otherwise.\n   */\n  public isSourceLoading(): Observable<boolean> {\n    return this.notificationsStateService.isQualityAssuranceSourceLoading();\n  }\n\n  /**\n   * Returns the information about the processing status of the Quality Assurance source (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if there are operations running on the source (ex.: a REST call), 'false' otherwise.\n   */\n  public isSourceProcessing(): Observable<boolean> {\n    return this.notificationsStateService.isQualityAssuranceSourceProcessing();\n  }\n\n  /**\n   * Dispatch the Quality Assurance source retrival.\n   */\n  public getQualityAssuranceSource(): void {\n    this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig).pipe(\n      distinctUntilChanged(),\n    ).subscribe((options: PaginationComponentOptions) => {\n      this.notificationsStateService.dispatchRetrieveQualityAssuranceSource(\n        options.pageSize,\n        options.currentPage,\n      );\n    });\n  }\n\n  /**\n   * Update pagination Config from route params\n   *\n   * @param eventsRouteParams\n   */\n  protected updatePaginationFromRouteParams(eventsRouteParams: QualityAssuranceSourcePageParams) {\n    if (eventsRouteParams.currentPage) {\n      this.paginationConfig.currentPage = eventsRouteParams.currentPage;\n    }\n    if (eventsRouteParams.pageSize) {\n      if (this.paginationConfig.pageSizeOptions.includes(eventsRouteParams.pageSize)) {\n        this.paginationConfig.pageSize = eventsRouteParams.pageSize;\n      } else {\n        this.paginationConfig.pageSize = this.paginationConfig.pageSizeOptions[0];\n      }\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h1 class=\"border-bottom pb-2\">{{'quality-assurance.title'| translate}}</h1>\n        <ds-alert [type]=\"'alert-info'\" [content]=\"'quality-assurance.source.description'\"></ds-alert>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h2 class=\"h4 border-bottom pb-2\">{{'quality-assurance.source'| translate}}</h2>\n\n        <ds-loading class=\"container\" *ngIf=\"(isSourceLoading() | async)\" message=\"{{'quality-assurance.loading' | translate}}\"></ds-loading>\n        <ds-pagination *ngIf=\"(isSourceLoading() | async) !== true\"\n                       [paginationOptions]=\"paginationConfig\"\n                       [collectionSize]=\"(totalElements$ | async)\"\n                       [hideGear]=\"false\"\n                       [hideSortOptions]=\"true\"\n                       (paginationChange)=\"getQualityAssuranceSource()\">\n\n          <ds-loading class=\"container\" *ngIf=\"(isSourceProcessing() | async)\" message=\"'quality-assurance.loading' | translate\"></ds-loading>\n          <ng-container *ngIf=\"(isSourceProcessing() | async) !== true\">\n            <div *ngIf=\"(sources$ | async)?.length === 0\" class=\"alert alert-info w-100 mb-2 mt-2\" role=\"alert\">\n              {{'quality-assurance.noSource' | translate}}\n            </div>\n            <div *ngIf=\"(sources$ | async)?.length !== 0\" class=\"table-responsive mt-2\">\n              <table id=\"epeople\" class=\"table table-striped table-hover table-bordered\">\n                <thead>\n                <tr>\n                  <th scope=\"col\">{{'quality-assurance.table.source' | translate}}</th>\n                  <th scope=\"col\">{{'quality-assurance.table.last-event' | translate}}</th>\n                  <th scope=\"col\">{{'quality-assurance.table.actions' | translate}}</th>\n                </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let sourceElement of (sources$ | async); let i = index\">\n                    <td>{{sourceElement.id}}</td>\n                    <td>{{sourceElement.lastEvent | date: 'dd/MM/yyyy hh:mm' }}</td>\n                    <td>\n                      <div class=\"btn-group edit-field\">\n                        <button\n                                class=\"btn btn-outline-primary btn-sm\"\n                                title=\"{{'quality-assurance.source-list.button.detail' | translate : { param: sourceElement.id } }}\"\n                                [routerLink]=\"[sourceElement.id]\">\n                          <span class=\"badge badge-info\">{{sourceElement.totalEvents}}</span>\n                          <i class=\"fas fa-info fa-fw\"></i>\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </ng-container>\n        </ds-pagination>\n      </div>\n    </div>\n  </div>\n\n","import {\n  AsyncPipe,\n  DatePipe,\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  ActivatedRoute,\n  Router,\n  RouterLink,\n} from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  take,\n  tap,\n} from 'rxjs/operators';\n\nimport { getNotificatioQualityAssuranceRoute } from '../../../admin/admin-routing-paths';\nimport { SortOptions } from '../../../core/cache/models/sort-options.model';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { QualityAssuranceTopicObject } from '../../../core/notifications/qa/models/quality-assurance-topic.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { Item } from '../../../core/shared/item.model';\nimport {\n  getFirstCompletedRemoteData,\n  getRemoteDataPayload,\n} from '../../../core/shared/operators';\nimport { getItemPageRoute } from '../../../item-page/item-page-routing-paths';\nimport { QualityAssuranceTopicsPageParams } from '../../../quality-assurance-notifications-pages/quality-assurance-topics-page/quality-assurance-topics-page-resolver.service';\nimport { AlertComponent } from '../../../shared/alert/alert.component';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ThemedLoadingComponent } from '../../../shared/loading/themed-loading.component';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { NotificationsStateService } from '../../notifications-state.service';\n\n/**\n * Component to display the Quality Assurance topic list.\n */\n@Component({\n  selector: 'ds-quality-assurance-topic',\n  templateUrl: './quality-assurance-topics.component.html',\n  styleUrls: ['./quality-assurance-topics.component.scss'],\n  standalone: true,\n  imports: [AlertComponent, NgIf, ThemedLoadingComponent, PaginationComponent, NgFor, RouterLink, AsyncPipe, TranslateModule, DatePipe],\n})\nexport class QualityAssuranceTopicsComponent implements OnInit, OnDestroy, AfterViewInit {\n  /**\n   * The pagination system configuration for HTML listing.\n   * @type {PaginationComponentOptions}\n   */\n  public paginationConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'btp',\n    pageSize: 10,\n    pageSizeOptions: [5, 10, 20, 40, 60],\n  });\n  /**\n   * The Quality Assurance topic list sort options.\n   * @type {SortOptions}\n   */\n  public paginationSortConfig: SortOptions;\n  /**\n   * The Quality Assurance topic list.\n   */\n  public topics$: Observable<QualityAssuranceTopicObject[]>;\n  /**\n   * The total number of Quality Assurance topics.\n   */\n  public totalElements$: Observable<number>;\n  /**\n   * Array to track all the component subscriptions. Useful to unsubscribe them with 'onDestroy'.\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * This property represents a sourceId which is used to retrive a topic\n   * @type {string}\n   */\n  public sourceId: string;\n\n  /**\n   * This property represents a targetId (item-id) which is used to retrive a topic\n   * @type {string}\n   */\n  public targetId: string;\n\n  /**\n   * The URL of the item page.\n   */\n  public itemPageUrl: string;\n\n  /**\n   * Initialize the component variables.\n   * @param {PaginationService} paginationService\n   * @param {ActivatedRoute} activatedRoute\n   * @param itemService\n   * @param {NotificationsStateService} notificationsStateService\n   * @param router\n   */\n  constructor(\n    private paginationService: PaginationService,\n    private activatedRoute: ActivatedRoute,\n    private itemService: ItemDataService,\n    private notificationsStateService: NotificationsStateService,\n    private router: Router,\n  ) {\n    this.sourceId = this.activatedRoute.snapshot.params.sourceId;\n    this.targetId = this.activatedRoute.snapshot.params.targetId;\n  }\n\n  /**\n   * Component initialization.\n   */\n  ngOnInit(): void {\n    this.topics$ = this.notificationsStateService.getQualityAssuranceTopics().pipe(\n      tap((topics: QualityAssuranceTopicObject[]) => {\n        const forward = this.activatedRoute.snapshot.queryParams?.forward === 'true';\n        if (topics.length === 1 && forward) {\n          // If there is only one topic, navigate to the first topic automatically\n          this.router.navigate([this.getQualityAssuranceRoute(), this.sourceId, topics[0].id]);\n        }\n      }),\n    );\n    this.totalElements$ = this.notificationsStateService.getQualityAssuranceTopicsTotals();\n  }\n\n  /**\n   * First Quality Assurance topics loading after view initialization.\n   */\n  ngAfterViewInit(): void {\n    this.subs.push(\n      this.notificationsStateService.isQualityAssuranceTopicsLoaded().pipe(\n        take(1),\n      ).subscribe(() => {\n        this.getQualityAssuranceTopics(this.sourceId, this.targetId);\n      }),\n    );\n  }\n\n  /**\n   * Returns the information about the loading status of the Quality Assurance topics (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if the topics are loading, 'false' otherwise.\n   */\n  public isTopicsLoading(): Observable<boolean> {\n    return this.notificationsStateService.isQualityAssuranceTopicsLoading();\n  }\n\n  /**\n   * Returns the information about the processing status of the Quality Assurance topics (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if there are operations running on the topics (ex.: a REST call), 'false' otherwise.\n   */\n  public isTopicsProcessing(): Observable<boolean> {\n    return this.notificationsStateService.isQualityAssuranceTopicsProcessing();\n  }\n\n  /**\n   * Dispatch the Quality Assurance topics retrival.\n   */\n  public getQualityAssuranceTopics(source: string, target?: string): void {\n    this.subs.push(this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig).pipe(\n      distinctUntilChanged(),\n    ).subscribe((options: PaginationComponentOptions) => {\n      this.notificationsStateService.dispatchRetrieveQualityAssuranceTopics(\n        options.pageSize,\n        options.currentPage,\n        source,\n        target,\n      );\n    }));\n  }\n\n  /**\n   * Update pagination Config from route params\n   *\n   * @param eventsRouteParams\n   */\n  protected updatePaginationFromRouteParams(eventsRouteParams: QualityAssuranceTopicsPageParams) {\n    if (eventsRouteParams.currentPage) {\n      this.paginationConfig.currentPage = eventsRouteParams.currentPage;\n    }\n    if (eventsRouteParams.pageSize) {\n      if (this.paginationConfig.pageSizeOptions.includes(eventsRouteParams.pageSize)) {\n        this.paginationConfig.pageSize = eventsRouteParams.pageSize;\n      } else {\n        this.paginationConfig.pageSize = this.paginationConfig.pageSizeOptions[0];\n      }\n    }\n  }\n\n  /**\n   * Returns an Observable that emits the title of the target item.\n   * The target item is retrieved by its ID using the itemService.\n   * The title is extracted from the first metadata value of the item.\n   * The item page URL is also set in the component.\n   * @returns An Observable that emits the title of the target item.\n   */\n  getTargetItemTitle(): Observable<string> {\n    return this.itemService.findById(this.targetId).pipe(\n      take(1),\n      getFirstCompletedRemoteData(),\n      getRemoteDataPayload(),\n      tap((item: Item) => this.itemPageUrl = getItemPageRoute(item)),\n      map((item: Item) => item.firstMetadataValue('dc.title')),\n    );\n  }\n\n  /**\n   * Returns the page route for the given item.\n   * @param item The item to get the page route for.\n   * @returns The page route for the given item.\n   */\n  getItemPageRoute(item: Item): string {\n    return getItemPageRoute(item);\n  }\n\n  /**\n   * Returns the quality assurance route.\n   * @returns The quality assurance route.\n   */\n  getQualityAssuranceRoute(): string {\n    return getNotificatioQualityAssuranceRoute();\n  }\n\n  /**\n   * Unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h1 class=\"border-bottom pb-2\">{{'quality-assurance.title'| translate}}</h1>\n      <ds-alert *ngIf=\"!targetId\" [type]=\"'alert-info'\">{{'quality-assurance.topics.description'| translate:{source: sourceId} }}</ds-alert>\n      <ds-alert *ngIf=\"targetId\" [type]=\"'alert-info'\">\n        {{'quality-assurance.topics.description-with-target'| translate:{source: sourceId} }}\n        <a [routerLink]=\"itemPageUrl\">{{(getTargetItemTitle() | async)}}</a>\n      </ds-alert>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2 class=\"border-bottom pb-2\">{{'quality-assurance.topics'| translate}}</h2>\n\n      <ds-loading class=\"container\" *ngIf=\"(isTopicsLoading() | async)\" message=\"{{'quality-assurance.loading' | translate}}\"></ds-loading>\n      <ds-pagination *ngIf=\"(isTopicsLoading() | async) !== true\"\n                     [paginationOptions]=\"paginationConfig\"\n                     [collectionSize]=\"(totalElements$ | async)\"\n                     [hideGear]=\"false\"\n                     [hideSortOptions]=\"true\"\n                     (paginationChange)=\"getQualityAssuranceTopics(sourceId, targetId)\">\n\n        <ds-loading class=\"container\" *ngIf=\"(isTopicsProcessing() | async)\" message=\"'quality-assurance.loading' | translate\"></ds-loading>\n        <ng-container *ngIf=\"(isTopicsProcessing() | async) !== true\">\n          <div *ngIf=\"(topics$ | async)?.length === 0\" class=\"alert alert-info w-100 mb-2 mt-2\" role=\"alert\">\n            {{'quality-assurance.noTopics' | translate}}\n          </div>\n          <div *ngIf=\"(topics$ | async)?.length !== 0\" class=\"table-responsive mt-2\">\n            <table id=\"epeople\" class=\"table table-striped table-hover table-bordered\">\n              <thead>\n              <tr>\n                <th scope=\"col\">{{'quality-assurance.table.topic' | translate}}</th>\n                <th scope=\"col\">{{'quality-assurance.table.last-event' | translate}}</th>\n                <th scope=\"col\">{{'quality-assurance.table.actions' | translate}}</th>\n              </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let topicElement of (topics$ | async); let i = index\">\n                  <td>{{topicElement.name}}</td>\n                  <td>{{topicElement.lastEvent | date: 'dd/MM/yyyy hh:mm' }}</td>\n                  <td>\n                    <div class=\"btn-group edit-field\">\n                      <button\n                              class=\"btn btn-outline-primary btn-sm\"\n                              title=\"{{'quality-assurance.topics-list.button.detail' | translate : { param: topicElement.name } }}\"\n                              [routerLink]=\"[getQualityAssuranceRoute(), sourceId, topicElement.id]\">\n                        <span class=\"badge badge-info\">{{topicElement.totalEvents}}</span>\n                        <i class=\"fas fa-info fa-fw\"></i>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </ds-pagination>\n    </div>\n  </div>\n</div>\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\n\nimport { QualityAssuranceSourceObject } from '../core/notifications/qa/models/quality-assurance-source.model';\nimport { QualityAssuranceTopicObject } from '../core/notifications/qa/models/quality-assurance-topic.model';\nimport { subStateSelector } from '../shared/selector.util';\nimport {\n  suggestionNotificationsSelector,\n  SuggestionNotificationsState,\n} from './notifications.reducer';\nimport { QualityAssuranceSourceState } from './qa/source/quality-assurance-source.reducer';\nimport { QualityAssuranceTopicState } from './qa/topics/quality-assurance-topics.reducer';\n\n/**\n * Returns the Notifications state.\n * @function _getNotificationsState\n * @param {AppState} state Top level state.\n * @return {SuggestionNotificationsState}\n */\nconst _getNotificationsState = createFeatureSelector<SuggestionNotificationsState>('suggestionNotifications');\n\n// Quality Assurance topics\n// ----------------------------------------------------------------------------\n\n/**\n * Returns the Quality Assurance topics State.\n * @function qualityAssuranceTopicsStateSelector\n * @return {QualityAssuranceTopicState}\n */\nexport function qualityAssuranceTopicsStateSelector(): MemoizedSelector<SuggestionNotificationsState, QualityAssuranceTopicState> {\n  return subStateSelector<SuggestionNotificationsState,QualityAssuranceTopicState>(suggestionNotificationsSelector, 'qaTopic');\n}\n\n/**\n * Returns the Quality Assurance topics list.\n * @function qualityAssuranceTopicsObjectSelector\n * @return {QualityAssuranceTopicObject[]}\n */\nexport function qualityAssuranceTopicsObjectSelector(): MemoizedSelector<SuggestionNotificationsState, QualityAssuranceTopicObject[]> {\n  return subStateSelector<SuggestionNotificationsState, QualityAssuranceTopicObject[]>(qualityAssuranceTopicsStateSelector(), 'topics');\n}\n\n/**\n * Returns true if the Quality Assurance topics are loaded.\n * @function isQualityAssuranceTopicsLoadedSelector\n * @return {boolean}\n */\nexport const isQualityAssuranceTopicsLoadedSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaTopic.loaded,\n);\n\n/**\n * Returns true if the deduplication sets are processing.\n * @function isDeduplicationSetsProcessingSelector\n * @return {boolean}\n */\nexport const isQualityAssuranceTopicsProcessingSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaTopic.processing,\n);\n\n/**\n * Returns the total available pages of Quality Assurance topics.\n * @function getQualityAssuranceTopicsTotalPagesSelector\n * @return {number}\n */\nexport const getQualityAssuranceTopicsTotalPagesSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaTopic.totalPages,\n);\n\n/**\n * Returns the current page of Quality Assurance topics.\n * @function getQualityAssuranceTopicsCurrentPageSelector\n * @return {number}\n */\nexport const getQualityAssuranceTopicsCurrentPageSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaTopic.currentPage,\n);\n\n/**\n * Returns the total number of Quality Assurance topics.\n * @function getQualityAssuranceTopicsTotalsSelector\n * @return {number}\n */\nexport const getQualityAssuranceTopicsTotalsSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaTopic.totalElements,\n);\n\n// Quality Assurance source\n// ----------------------------------------------------------------------------\n\n/**\n * Returns the Quality Assurance source State.\n * @function qualityAssuranceSourceStateSelector\n * @return {QualityAssuranceSourceState}\n */\nexport function qualityAssuranceSourceStateSelector(): MemoizedSelector<SuggestionNotificationsState, QualityAssuranceSourceState> {\n  return subStateSelector<SuggestionNotificationsState,QualityAssuranceSourceState>(suggestionNotificationsSelector, 'qaSource');\n}\n\n/**\n * Returns the Quality Assurance source list.\n * @function qualityAssuranceSourceObjectSelector\n * @return {QualityAssuranceSourceObject[]}\n */\nexport function qualityAssuranceSourceObjectSelector(): MemoizedSelector<SuggestionNotificationsState, QualityAssuranceSourceObject[]> {\n  return subStateSelector<SuggestionNotificationsState, QualityAssuranceSourceObject[]>(qualityAssuranceSourceStateSelector(), 'source');\n}\n\n/**\n * Returns true if the Quality Assurance source are loaded.\n * @function isQualityAssuranceSourceLoadedSelector\n * @return {boolean}\n */\nexport const isQualityAssuranceSourceLoadedSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaSource.loaded,\n);\n\n/**\n * Returns true if the deduplication sets are processing.\n * @function isDeduplicationSetsProcessingSelector\n * @return {boolean}\n */\nexport const isQualityAssuranceSourceProcessingSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaSource.processing,\n);\n\n/**\n * Returns the total available pages of Quality Assurance source.\n * @function getQualityAssuranceSourceTotalPagesSelector\n * @return {number}\n */\nexport const getQualityAssuranceSourceTotalPagesSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaSource.totalPages,\n);\n\n/**\n * Returns the current page of Quality Assurance source.\n * @function getQualityAssuranceSourceCurrentPageSelector\n * @return {number}\n */\nexport const getQualityAssuranceSourceCurrentPageSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaSource.currentPage,\n);\n\n/**\n * Returns the total number of Quality Assurance source.\n * @function getQualityAssuranceSourceTotalsSelector\n * @return {number}\n */\nexport const getQualityAssuranceSourceTotalsSelector = createSelector(_getNotificationsState,\n  (state: SuggestionNotificationsState) => state.qaSource.totalElements,\n);\n","import {\n  AsyncPipe,\n  NgFor,\n  NgIf,\n} from '@angular/common';\nimport {\n  AfterViewInit,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Router,\n  RouterLink,\n} from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  take,\n} from 'rxjs/operators';\n\nimport { SuggestionTarget } from '../../../core/notifications/suggestions/models/suggestion-target.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ThemedLoadingComponent } from '../../../shared/loading/themed-loading.component';\nimport { PaginationComponent } from '../../../shared/pagination/pagination.component';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { getSuggestionPageRoute } from '../../../suggestions-page/suggestions-page-routing-paths';\nimport { SuggestionsService } from '../../suggestions.service';\nimport { SuggestionTargetsStateService } from '../suggestion-targets.state.service';\n\n/**\n * Component to display the Suggestion Target list.\n */\n@Component({\n  selector: 'ds-publication-claim',\n  templateUrl: './publication-claim.component.html',\n  styleUrls: ['./publication-claim.component.scss'],\n  imports: [\n    ThemedLoadingComponent,\n    AsyncPipe,\n    TranslateModule,\n    PaginationComponent,\n    NgIf,\n    NgFor,\n    RouterLink,\n  ],\n  standalone: true,\n})\nexport class PublicationClaimComponent implements AfterViewInit, OnDestroy, OnInit {\n\n  /**\n   * The source for which to list targets\n   */\n  @Input() source = '';\n\n  /**\n   * The pagination system configuration for HTML listing.\n   * @type {PaginationComponentOptions}\n   */\n  public paginationConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'stp_' + this.source,\n    pageSizeOptions: [5, 10, 20, 40, 60],\n  });\n\n  /**\n   * The Suggestion Target list.\n   */\n  public targets$: Observable<SuggestionTarget[]>;\n  /**\n   * The total number of Suggestion Targets.\n   */\n  public totalElements$: Observable<number>;\n  /**\n   * Array to track all the component subscriptions. Useful to unsubscribe them with 'onDestroy'.\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize the component variables.\n   * @param {PaginationService} paginationService\n   * @param {SuggestionTargetsStateService} suggestionTargetsStateService\n   * @param {SuggestionsService} suggestionService\n   * @param {Router} router\n   */\n  constructor(\n    private paginationService: PaginationService,\n    private suggestionTargetsStateService: SuggestionTargetsStateService,\n    private suggestionService: SuggestionsService,\n    private router: Router,\n  ) {\n  }\n\n  /**\n   * Component initialization.\n   */\n  ngOnInit(): void {\n    this.targets$ = this.suggestionTargetsStateService.getSuggestionTargets(this.source);\n    this.totalElements$ = this.suggestionTargetsStateService.getSuggestionTargetsTotals(this.source);\n  }\n\n  /**\n   * First Suggestion Targets loading after view initialization.\n   */\n  ngAfterViewInit(): void {\n    this.subs.push(\n      this.suggestionTargetsStateService.isSuggestionTargetsLoaded(this.source).pipe(\n        take(1),\n      ).subscribe(() => {\n        this.getSuggestionTargets();\n      }),\n    );\n  }\n\n  /**\n   * Returns the information about the loading status of the Suggestion Targets (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if the targets are loading, 'false' otherwise.\n   */\n  public isTargetsLoading(): Observable<boolean> {\n    return this.suggestionTargetsStateService.isSuggestionTargetsLoading(this.source);\n  }\n\n  /**\n   * Returns the information about the processing status of the Suggestion Targets (if it's running or not).\n   *\n   * @return Observable<boolean>\n   *    'true' if there are operations running on the targets (ex.: a REST call), 'false' otherwise.\n   */\n  public isTargetsProcessing(): Observable<boolean> {\n    return this.suggestionTargetsStateService.isSuggestionTargetsProcessing(this.source);\n  }\n\n  /**\n   * Redirect to suggestion page.\n   *\n   * @param {string} id\n   *    the id of suggestion target\n   */\n  public redirectToSuggestions(id: string) {\n    this.router.navigate([getSuggestionPageRoute(id)]);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.suggestionTargetsStateService.dispatchClearSuggestionTargetsAction(this.source);\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Dispatch the Suggestion Targets retrival.\n   */\n  public getSuggestionTargets(): void {\n    this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig).pipe(\n      distinctUntilChanged(),\n      take(1),\n    ).subscribe((options: PaginationComponentOptions) => {\n      this.suggestionTargetsStateService.dispatchRetrieveSuggestionTargets(\n        this.source,\n        options.pageSize,\n        options.currentPage,\n      );\n    });\n  }\n\n  public getTargetUuid(target: SuggestionTarget) {\n    return this.suggestionService.getTargetUuid(target);\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h1 id=\"header\" class=\"border-bottom pb-2\">{{'suggestion.title'| translate}}</h1>\n\n      <ds-loading class=\"container\" *ngIf=\"(isTargetsLoading() | async)\" message=\"{{'suggestion.loading' | translate}}\"></ds-loading>\n      <ds-pagination *ngIf=\"(isTargetsLoading() | async) !== true\"\n                     [paginationOptions]=\"paginationConfig\"\n                     [collectionSize]=\"(totalElements$ | async)\"\n                     [hideGear]=\"false\"\n                     [retainScrollPosition]=\"false\"\n                     (paginationChange)=\"getSuggestionTargets()\">\n\n        <ds-loading class=\"container\" *ngIf=\"(isTargetsProcessing() | async)\" message=\"'suggestion.loading' | translate\"></ds-loading>\n        <ng-container *ngIf=\"(isTargetsProcessing() | async) !== true\">\n          <div *ngIf=\"(targets$ | async)?.length === 0\" class=\"alert alert-info w-100 mb-2 mt-2\" role=\"alert\">\n            {{'suggestion.noTargets' | translate}}\n          </div>\n          <div *ngIf=\"(targets$|async)?.length !== 0\" class=\"table-responsive mt-2\">\n            <table id=\"epeople\" class=\"table table-striped table-hover table-bordered\">\n              <thead>\n                <tr class=\"text-center\">\n                  <th scope=\"col\">{{'suggestion.table.name' | translate}}</th>\n                  <th scope=\"col\">{{'suggestion.table.actions' | translate}}</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let targetElement of (targets$ | async); let i = index\" class=\"text-center\">\n                  <td>\n                    <a target=\"_blank\" [routerLink]=\"['/entities/person/', getTargetUuid(targetElement)]\">{{targetElement.display}}</a>\n                  </td>\n                  <td>\n                    <div class=\"btn-group edit-field\">\n                      <button (click)=\"redirectToSuggestions(targetElement.id)\"\n                              class=\"btn btn-outline-primary btn-sm\"\n                              title=\"{{('suggestion.button.review.title' | translate: { total: targetElement.total.toString() }) +\n                                targetElement.display}}\">\n                        <span>{{'suggestion.button.review' | translate: { total: targetElement.total.toString() } }} </span>\n                        <i class=\"fas fa-lightbulb\"></i>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </ng-container>\n      </ds-pagination>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\n/**\n * Interface for the route parameters.\n */\n\nexport interface AdminNotificationsPublicationClaimPageParams {\n  pageId?: string;\n  pageSize?: number;\n  currentPage?: number;\n}\n\n/**\n * This class represents a resolver that retrieve the route data before the route is activated.\n */\n@Injectable({ providedIn: 'root' })\n\nexport class AdminNotificationsPublicationClaimPageResolver {\n\n  /**\n   * Method for resolving the parameters in the current route.\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns AdminNotificationsSuggestionTargetsPageParams Emits the route parameters\n   */\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): AdminNotificationsPublicationClaimPageParams {\n    return {\n      pageId: route.queryParams.pageId,\n      pageSize: parseInt(route.queryParams.pageSize, 10),\n      currentPage: parseInt(route.queryParams.page, 10),\n    };\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { QualityAssuranceEventsComponent } from '../../notifications/qa/events/quality-assurance-events.component';\n\n/**\n * Component for the page that show the QA events related to a specific topic.\n */\n@Component({\n  selector: 'ds-quality-assurance-events-page',\n  templateUrl: './quality-assurance-events-page.component.html',\n  standalone: true,\n  imports: [QualityAssuranceEventsComponent],\n})\nexport class QualityAssuranceEventsPageComponent {\n\n}\n","<ds-quality-assurance-events></ds-quality-assurance-events>\n","import {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  RouterStateSnapshot,\n} from '@angular/router';\n\n/**\n * Interface for the route parameters.\n */\nexport interface AssuranceEventsPageParams {\n  pageId?: string;\n  pageSize?: number;\n  currentPage?: number;\n}\n\n/**\n * Method for resolving the parameters in the current route.\n * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n * @returns AdminQualityAssuranceEventsPageParams Emits the route parameters\n */\nexport const qualityAssuranceEventsPageResolver: ResolveFn<AssuranceEventsPageParams> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n): AssuranceEventsPageParams => {\n  return {\n    pageId: route.queryParams.pageId,\n    pageSize: parseInt(route.queryParams.pageSize, 10),\n    currentPage: parseInt(route.queryParams.page, 10),\n  };\n};\n","import { inject } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  ResolveFn,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  APP_CONFIG,\n  AppConfig,\n} from '../../../config/app-config.interface';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { QualityAssuranceSourceObject } from '../../core/notifications/qa/models/quality-assurance-source.model';\nimport { QualityAssuranceSourceService } from '../../notifications/qa/source/quality-assurance-source.service';\n\n/**\n * Method for resolving the parameters in the current route.\n * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n * @param router\n * @param qualityAssuranceSourceService\n * @param appConfig\n * @returns Observable<QualityAssuranceSourceObject[]>\n */\nexport const qualityAssuranceSourceDataResolver: ResolveFn<QualityAssuranceSourceObject[]> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n  router: Router = inject(Router),\n  qualityAssuranceSourceService: QualityAssuranceSourceService = inject(QualityAssuranceSourceService),\n  appConfig: AppConfig = inject(APP_CONFIG),\n): Observable<QualityAssuranceSourceObject[]> => {\n  const pageSize = appConfig.qualityAssuranceConfig.pageSize;\n\n  return qualityAssuranceSourceService.getSources(pageSize, 0).pipe(\n    map((sources: PaginatedList<QualityAssuranceSourceObject>) => {\n      if (sources.page.length === 1) {\n        router.navigate([getResolvedUrl(route) + '/' + sources.page[0].id]);\n      }\n      return sources.page;\n    }));\n};\n\n/**\n *\n * @param route url path\n * @returns url path\n */\nfunction getResolvedUrl(route: ActivatedRouteSnapshot): string {\n  return route.pathFromRoot.map(v => v.url.map(segment => segment.toString()).join('/')).join('/');\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\n/**\n * Interface for the route parameters.\n */\nexport interface QualityAssuranceSourcePageParams {\n  pageId?: string;\n  pageSize?: number;\n  currentPage?: number;\n}\n\n/**\n * This class represents a resolver that retrieve the route data before the route is activated.\n */\n@Injectable({ providedIn: 'root' })\nexport class QualityAssuranceSourcePageResolver {\n\n  /**\n   * Method for resolving the parameters in the current route.\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns AdminQualityAssuranceSourcePageParams Emits the route parameters\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): QualityAssuranceSourcePageParams {\n    return {\n      pageId: route.queryParams.pageId,\n      pageSize: parseInt(route.queryParams.pageSize, 10),\n      currentPage: parseInt(route.queryParams.page, 10),\n    };\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { QualityAssuranceSourceComponent } from '../../notifications/qa/source/quality-assurance-source.component';\n\n/**\n * Component for the page that show the QA sources.\n */\n@Component({\n  selector: 'ds-quality-assurance-source-page-component',\n  templateUrl: './quality-assurance-source-page.component.html',\n  imports: [\n    QualityAssuranceSourceComponent,\n  ],\n  standalone: true,\n})\nexport class QualityAssuranceSourcePageComponent {}\n","<ds-quality-assurance-source></ds-quality-assurance-source>\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\n/**\n * Interface for the route parameters.\n */\nexport interface QualityAssuranceTopicsPageParams {\n  pageId?: string;\n  pageSize?: number;\n  currentPage?: number;\n}\n\n/**\n * This class represents a resolver that retrieve the route data before the route is activated.\n */\n@Injectable({ providedIn: 'root' })\nexport class QualityAssuranceTopicsPageResolver {\n\n  /**\n   * Method for resolving the parameters in the current route.\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns AdminQualityAssuranceTopicsPageParams Emits the route parameters\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): QualityAssuranceTopicsPageParams {\n    return {\n      pageId: route.queryParams.pageId,\n      pageSize: parseInt(route.queryParams.pageSize, 10),\n      currentPage: parseInt(route.queryParams.page, 10),\n    };\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { QualityAssuranceTopicsComponent } from '../../notifications/qa/topics/quality-assurance-topics.component';\n\n/**\n * Component for the page that show the QA topics related to a specific source.\n */\n@Component({\n  selector: 'ds-notification-qa-page',\n  templateUrl: './quality-assurance-topics-page.component.html',\n  standalone: true,\n  imports: [QualityAssuranceTopicsComponent],\n})\nexport class QualityAssuranceTopicsPageComponent {\n\n}\n","<ds-quality-assurance-topic></ds-quality-assurance-topic>\n","import {\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\n\nimport { hasValue } from './empty.util';\n\n/**\n * Export a function to return a subset of the state by key\n */\nexport function keySelector<T, V>(parentSelector, subState: string, key: string): MemoizedSelector<T, V> {\n  return createSelector(parentSelector, (state: T) => {\n    if (hasValue(state) && hasValue(state[subState])) {\n      return state[subState][key];\n    } else {\n      return undefined;\n    }\n  });\n}\n/**\n * Export a function to return a subset of the state\n */\nexport function subStateSelector<T, V>(parentSelector, subState: string): MemoizedSelector<T, V> {\n  return createSelector(parentSelector, (state: T) => {\n    if (hasValue(state) && hasValue(state[subState])) {\n      return state[subState];\n    } else {\n      return undefined;\n    }\n  });\n}\n"],"names":["inject","QualityAssuranceBreadcrumbService","qualityAssuranceBreadcrumbResolver","route","state","breadcrumbService","sourceId","paramMap","get","topicId","key","fullPath","url","substring","indexOf","provider","TranslateService","of","observableOf","Breadcrumb","constructor","translationService","QUALITY_ASSURANCE_BREADCRUMB_KEY","getBreadcrumbs","args","split","length","instant","undefined","i0","ɵɵinject","i1","factory","ɵfac","providedIn","HttpHeaders","HttpParams","find","switchMap","take","hasValue","NotificationsService","RemoteDataBuildService","RequestParam","ObjectCacheService","CreateDataImpl","DeleteDataImpl","IdentifiableDataService","PatchDataImpl","SearchDataImpl","DefaultChangeAnalyzer","DeleteByIDRequest","PostRequest","RequestService","HALEndpointService","QualityAssuranceEventDataService","requestService","rdbService","objectCache","halService","notificationsService","comparator","createData","linkPath","responseMsToLive","deleteData","constructIdEndpoint","patchData","searchData","getEventsByTopic","topic","options","linksToFollow","searchParams","searchBy","searchEventsByTopic","clearFindByTopicRequests","setStaleByHrefSubstring","getEvent","id","findById","patchEvent","status","dso","reason","operation","path","op","value","patch","boundProject","itemId","projectId","postOnRelated","removeProject","deleteOnRelated","objectId","requestId","generateRequestId","hrefObs","getIDHrefObs","pipe","href","subscribe","request","send","buildFromRequestUUID","relatedItemId","body","postData","target","correctionType","related","href$","getBrowseEndpoint","Object","create","headers","append","params","deleteQAEvent","qaEvent","delete","i2","i3","i4","i5","i6","select","Store","map","RetrieveAllSourceAction","RetrieveAllTopicsAction","getQualityAssuranceSourceCurrentPageSelector","getQualityAssuranceSourceTotalPagesSelector","getQualityAssuranceSourceTotalsSelector","getQualityAssuranceTopicsCurrentPageSelector","getQualityAssuranceTopicsTotalPagesSelector","getQualityAssuranceTopicsTotalsSelector","isQualityAssuranceSourceLoadedSelector","isQualityAssuranceSourceProcessingSelector","isQualityAssuranceTopicsLoadedSelector","isQualityAssuranceTopicsProcessingSelector","qualityAssuranceSourceObjectSelector","qualityAssuranceTopicsObjectSelector","NotificationsStateService","store","getQualityAssuranceTopics","isQualityAssuranceTopicsLoading","loaded","isQualityAssuranceTopicsLoaded","isQualityAssuranceTopicsProcessing","getQualityAssuranceTopicsTotalPages","getQualityAssuranceTopicsCurrentPage","getQualityAssuranceTopicsTotals","dispatchRetrieveQualityAssuranceTopics","elementsPerPage","currentPage","targteId","dispatch","getQualityAssuranceSource","isQualityAssuranceSourceLoading","isQualityAssuranceSourceLoaded","isQualityAssuranceSourceProcessing","getQualityAssuranceSourceTotalPages","getQualityAssuranceSourceCurrentPage","getQualityAssuranceSourceTotals","dispatchRetrieveQualityAssuranceSource","AsyncPipe","NgFor","NgIf","EPersonDataService","getFirstCompletedRemoteData","getRemoteDataPayload","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ePersonData_r2","property_r1","ɵɵelementContainerStart","ɵɵtemplate","EPersonDataComponent_ng_container_0_ng_container_1_ng_container_1_span_1_Template","ɵɵelement","ɵɵproperty","EPersonDataComponent_ng_container_0_ng_container_1_ng_container_1_Template","ctx_r2","properties","EPersonDataComponent_ng_container_0_ng_container_1_Template","ɵɵpipeBind1","getEPersonData$","EPersonDataComponent","ePersonDataService","ePersonId","ɵɵdirectiveInject","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","EPersonDataComponent_Template","rf","ctx","EPersonDataComponent_ng_container_0_Template","styles","ActivatedRoute","RouterLink","NgbModal","NgbTooltipModule","TranslateModule","BehaviorSubject","combineLatest","from","distinctUntilChanged","last","mergeMap","scan","tap","environment","SortDirection","SortOptions","AuthorizationDataService","FeatureID","FindListOptions","ItemDataService","PaginationService","Metadata","getItemPageRoute","AlertComponent","BtnDisabledDirective","ThemedLoadingComponent","PaginationComponent","PaginationComponentOptions","followLink","ProjectEntryImportModalComponent","ɵɵpipeBind2","ɵɵpureFunction2","_c0","ctx_r0","selectedTopicName","ɵɵsanitizeHtml","itemPageUrl","ɵɵtextInterpolate","getTargetItemTitle","ɵɵpropertyInterpolate","ɵɵpureFunction1","_c1","eventElement_r3","title","event","message","serviceId","ɵɵsanitizeUrl","getPIDHref","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_8_a_13_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_8_ng_template_14_Template","ɵɵtemplateRefExtractor","type","hasPIDHref","noPID_r4","ɵɵlistener","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_10_Template_button_click_8_listener","ɵɵrestoreView","_r5","ɵɵnextContext","ɵɵresetView","showMore","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_10_i_9_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_10_i_10_Template","ɵɵclassProp","abstract","originalId","ɵɵpureFunction0","_c2","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_ng_container_11_span_3_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_ng_container_11_span_6_Template","acronym","code","funder","fundingProgram","jurisdiction","projectTitle","handle","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_button_23_Template_button_click_0_listener","$event","_r6","$implicit","openModalLookup","stopPropagation","isRunning","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_button_24_Template_button_click_0_listener","_r7","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_span_12_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_span_13_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_span_14_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_span_15_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_span_16_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_a_21_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_button_23_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_button_24_Template","ɵɵpropertyInterpolate2","sourceUrlForProjectSearch","hasProject","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_1_Template_button_click_0_listener","_r9","acceptModal_r10","ɵɵreference","modalChoice","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_2_Template_button_click_0_listener","_r11","executeAction","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_7_Template_button_click_0_listener","_r13","rejectModal_r14","openModal","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_9_Template_button_click_0_listener","_r15","undoModal_r16","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_1_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_2_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_Template_button_click_3_listener","_r8","ignoreModal_r12","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_7_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_button_9_Template","showTopic","isAdmin$","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_16_Template_button_click_1_listener","_r17","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_a_4_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_span_5_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_6_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_7_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_8_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_9_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_10_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_ng_container_11_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_td_12_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_14_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_div_16_Template","trust","isReinstateWithdrawnRequest","QualityAssuranceEventsComponent_ds_pagination_16_div_5_th_10_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_ng_container_11_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_tr_16_Template","hasDetailColumn","eventsUpdated$","QualityAssuranceEventsComponent_ds_pagination_16_Template_ds_pagination_paginationChange_0_listener","_r2","getQualityAssuranceEvents","QualityAssuranceEventsComponent_ds_pagination_16_div_3_Template","QualityAssuranceEventsComponent_ds_pagination_16_div_5_Template","paginationConfig","totalElements$","paginationSortConfig","tmp_8_0","tmp_9_0","QualityAssuranceEventsComponent_ng_template_18_Template_button_click_8_listener","modal_r19","_r18","close","QualityAssuranceEventsComponent_ng_template_18_Template_button_click_13_listener","QualityAssuranceEventsComponent_ng_template_20_Template_button_click_8_listener","modal_r21","_r20","QualityAssuranceEventsComponent_ng_template_20_Template_button_click_13_listener","QualityAssuranceEventsComponent_ng_template_22_Template_button_click_8_listener","modal_r23","_r22","QualityAssuranceEventsComponent_ng_template_22_Template_button_click_13_listener","QualityAssuranceEventsComponent_ng_template_24_Template_button_click_8_listener","modal_r25","_r24","QualityAssuranceEventsComponent_ng_template_24_Template_button_click_13_listener","QualityAssuranceEventsComponent","activatedRoute","modalService","qualityAssuranceEventRestService","paginationService","translateService","authorizationService","itemService","assign","pageSize","pageSizeOptions","DESC","isEventPageLoading","defaultConfig","sort","subs","ngOnInit","next","isAuthorized","AdministratorOf","qualityAssuranceConfig","sourceUrlMapForProjectSearch","regEx","replace","splitList","targetId","pop","events","error","action","eventData","content","open","ariaLabelledBy","result","then","selectedReason","_reason","modalRef","size","modalComp","componentInstance","externalSourceEntry","label","push","importedObject","object","first","indexableObject","metadata","rd","hasSucceeded","success","projectHandle","pidHref","getFindListOptions","payload","totalElements","page","fetchEvents","Error","ngOnDestroy","filter","sub","forEach","unsubscribe","related$","target$","relatedItemRD","targetItemRD","data","acc","item","firstMetadataValue","i7","i8","QualityAssuranceEventsComponent_Template","QualityAssuranceEventsComponent_ds_alert_7_Template","QualityAssuranceEventsComponent_ds_alert_8_Template","QualityAssuranceEventsComponent_ds_loading_14_Template","QualityAssuranceEventsComponent_ds_pagination_16_Template","QualityAssuranceEventsComponent_ng_template_18_Template","QualityAssuranceEventsComponent_ng_template_20_Template","QualityAssuranceEventsComponent_ng_template_22_Template","QualityAssuranceEventsComponent_ng_template_24_Template","ɵɵtextInterpolate2","NgbTooltip","TranslatePipe","EventEmitter","FormsModule","NgbActiveModal","Context","SearchService","isNotEmpty","CollectionElementLinkType","SelectableListService","PaginatedSearchOptions","ThemedSearchResultsComponent","labelPrefix","ProjectEntryImportModalComponent_ds_search_results_32_Template_ds_search_results_deselectObject_0_listener","deselectEntity","ProjectEntryImportModalComponent_ds_search_results_32_Template_ds_search_results_selectObject_0_listener","selectEntity","localEntitiesRD$","searchOptions","entityListId","linkTypes","ExternalLink","context","ImportType","modal","searchService","selectService","configuration","isLoading$","EntitySearchModalWithNameVariants","authorityListId","importType","selectedImportType","None","pagination","query","search","deselectAllLists","searchTitle","filterRegEx","bound","selectedEntity","emit","LocalEntity","entity","deselectAll","ProjectEntryImportModalComponent_Template","ProjectEntryImportModalComponent_Template_button_click_4_listener","ProjectEntryImportModalComponent_div_15_Template","ProjectEntryImportModalComponent_Template_input_keyup_enter_21_listener","ɵɵtwoWayListener","ProjectEntryImportModalComponent_Template_input_ngModelChange_21_listener","ɵɵtwoWayBindingSet","ProjectEntryImportModalComponent_Template_button_click_24_listener","ProjectEntryImportModalComponent_Template_button_click_27_listener","ProjectEntryImportModalComponent_ds_loading_30_Template","ProjectEntryImportModalComponent_ds_search_results_32_Template","ProjectEntryImportModalComponent_div_35_Template","ProjectEntryImportModalComponent_Template_button_click_40_listener","ProjectEntryImportModalComponent_Template_button_click_44_listener","ɵɵtwoWayProperty","tmp_13_0","tmp_14_0","DefaultValueAccessor","NgControlStatus","NgModel","DatePipe","sourceElement_r3","lastEvent","totalEvents","QualityAssuranceSourceComponent_ds_pagination_14_ng_container_4_div_3_tr_14_Template","ctx_r1","sources$","QualityAssuranceSourceComponent_ds_pagination_14_ng_container_4_div_1_Template","QualityAssuranceSourceComponent_ds_pagination_14_ng_container_4_div_3_Template","tmp_2_0","tmp_3_0","QualityAssuranceSourceComponent_ds_pagination_14_Template_ds_pagination_paginationChange_0_listener","_r1","QualityAssuranceSourceComponent_ds_pagination_14_ds_loading_2_Template","QualityAssuranceSourceComponent_ds_pagination_14_ng_container_4_Template","isSourceProcessing","QualityAssuranceSourceComponent","notificationsStateService","ngAfterViewInit","isSourceLoading","getCurrentPagination","updatePaginationFromRouteParams","eventsRouteParams","includes","QualityAssuranceSourceComponent_Template","QualityAssuranceSourceComponent_ds_loading_12_Template","QualityAssuranceSourceComponent_ds_pagination_14_Template","Router","getNotificatioQualityAssuranceRoute","topicElement_r3","name","ɵɵpureFunction3","getQualityAssuranceRoute","QualityAssuranceTopicsComponent_ds_pagination_15_ng_container_4_div_3_tr_14_Template","topics$","QualityAssuranceTopicsComponent_ds_pagination_15_ng_container_4_div_1_Template","QualityAssuranceTopicsComponent_ds_pagination_15_ng_container_4_div_3_Template","QualityAssuranceTopicsComponent_ds_pagination_15_Template_ds_pagination_paginationChange_0_listener","QualityAssuranceTopicsComponent_ds_pagination_15_ds_loading_2_Template","QualityAssuranceTopicsComponent_ds_pagination_15_ng_container_4_Template","isTopicsProcessing","QualityAssuranceTopicsComponent","router","snapshot","topics","forward","queryParams","navigate","isTopicsLoading","source","QualityAssuranceTopicsComponent_Template","QualityAssuranceTopicsComponent_ds_alert_6_Template","QualityAssuranceTopicsComponent_ds_alert_7_Template","QualityAssuranceTopicsComponent_ds_loading_13_Template","QualityAssuranceTopicsComponent_ds_pagination_15_Template","createFeatureSelector","createSelector","subStateSelector","suggestionNotificationsSelector","_getNotificationsState","qualityAssuranceTopicsStateSelector","qaTopic","processing","totalPages","qualityAssuranceSourceStateSelector","qaSource","getSuggestionPageRoute","SuggestionsService","SuggestionTargetsStateService","PublicationClaimComponent_ds_pagination_8_ng_container_4_div_3_tr_11_Template_button_click_6_listener","targetElement_r4","_r3","redirectToSuggestions","getTargetUuid","display","total","toString","PublicationClaimComponent_ds_pagination_8_ng_container_4_div_3_tr_11_Template","targets$","PublicationClaimComponent_ds_pagination_8_ng_container_4_div_1_Template","PublicationClaimComponent_ds_pagination_8_ng_container_4_div_3_Template","PublicationClaimComponent_ds_pagination_8_Template_ds_pagination_paginationChange_0_listener","getSuggestionTargets","PublicationClaimComponent_ds_pagination_8_ds_loading_2_Template","PublicationClaimComponent_ds_pagination_8_ng_container_4_Template","isTargetsProcessing","PublicationClaimComponent","suggestionTargetsStateService","suggestionService","getSuggestionTargetsTotals","isSuggestionTargetsLoaded","isTargetsLoading","isSuggestionTargetsLoading","isSuggestionTargetsProcessing","dispatchClearSuggestionTargetsAction","dispatchRetrieveSuggestionTargets","PublicationClaimComponent_Template","PublicationClaimComponent_ds_loading_6_Template","PublicationClaimComponent_ds_pagination_8_Template","AdminNotificationsPublicationClaimPageResolver","resolve","pageId","parseInt","QualityAssuranceEventsPageComponent","QualityAssuranceEventsPageComponent_Template","encapsulation","qualityAssuranceEventsPageResolver","APP_CONFIG","QualityAssuranceSourceService","qualityAssuranceSourceDataResolver","qualityAssuranceSourceService","appConfig","getSources","sources","getResolvedUrl","pathFromRoot","v","segment","join","QualityAssuranceSourcePageResolver","QualityAssuranceSourcePageComponent","QualityAssuranceSourcePageComponent_Template","QualityAssuranceTopicsPageResolver","QualityAssuranceTopicsPageComponent","QualityAssuranceTopicsPageComponent_Template","keySelector","parentSelector","subState"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}